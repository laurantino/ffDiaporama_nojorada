<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.2" doxygen_gitid="caa4e3de211fbbef2c3adf58a6bd4c86d0eb7cb8">
  <compound kind="file">
    <name>doxygen.hpp</name>
    <path>D:/a/exiv2/exiv2/build/</path>
    <filename>doxygen_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>bmpimage.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>bmpimage_8hpp.html</filename>
    <class kind="class">Exiv2::BmpImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newBmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aad75761195f857e8e6a24e9ef5aeb39e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isBmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f0081d729256cd77157f91420a84aa3</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae4d3fc0e08be16ccd0ddfb3c674b5481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>convert_8hpp.html</filename>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8922d8b9a1d540ec6bd055d3b0ce297c</anchor>
      <arglist>(const ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7bfba0876173080d9c6debe93566cff0</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7339dca89b4cd7f9993e73fb7e0ddca3</anchor>
      <arglist>(const XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa154f40deeaae67e03c22c2dfdf77ab2</anchor>
      <arglist>(XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a70dfdeb48373b7ef189a35a46ac08ea3</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af8fceacf7bd7b8a797d9634929fd46cf</anchor>
      <arglist>(const IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a510060c4661508f8eddab05dcd19c863</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a424ae46a7e24000f60316b11772bc019</anchor>
      <arglist>(const XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a167e7c4468cd5547ff324e8812ef2d5e</anchor>
      <arglist>(XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>convertStringCharset</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f890fc38384862cb4f1c0d2907170e6</anchor>
      <arglist>(std::string &amp;str, const char *from, const char *to)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cr2image.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>cr2image_8hpp.html</filename>
    <class kind="class">Exiv2::Cr2Image</class>
    <class kind="class">Exiv2::Cr2Parser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newCr2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e3e2ec3b766535c9d25cefbeaefee75</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isCr2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae3cb4b472f79902f63582c873014c272</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a7956fc605d09bc10e126691f859f1a9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>crwimage.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>crwimage_8hpp.html</filename>
    <class kind="class">Exiv2::CrwImage</class>
    <class kind="class">Exiv2::CrwParser</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newCrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7d67de645edf9383e29e91e4121a2467</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isCrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aac6b303ad007fe7091e8dbed01d18fc1</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>crw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a308214d9c007e1c0f7a5900f4a8ce12d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>datasets.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>datasets_8hpp.html</filename>
    <class kind="struct">Exiv2::RecordInfo</class>
    <class kind="struct">Exiv2::DataSet</class>
    <class kind="class">Exiv2::IptcDataSets</class>
    <class kind="class">Exiv2::IptcKey</class>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>Dictionary</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afae71d05c1e275acf159c2b9324974e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a057c36e3e63277d6d658fffb70958a60</anchor>
      <arglist>(std::ostream &amp;os, const DataSet &amp;dataSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>easyaccess.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>easyaccess_8hpp.html</filename>
    <includes id="exif_8hpp" name="exif.hpp" local="yes" imported="no">exif.hpp</includes>
    <namespace>Exiv2</namespace>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>orientation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3c3db1cc5d043aa7d02c5bdf6ab032ee</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>isoSpeed</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4cf1c6f85a6ca6ce92e0005f99181f0a</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>dateTimeOriginal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af693946ad7c4c70d42c36c5b1201986c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flashBias</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0b6314f768381554e6782fbd08cf1a07</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22719630afe2dc0b0d369b8a492b1aac</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sceneMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7a71bc8df8c2aad2a9557f001659cbed</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>macroMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9b5edeb9ef06ce854bee96dc5c96bdf1</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>imageQuality</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afaf5122eb0ae8c9df40220280edf9140</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>whiteBalance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4bce3f4afc7169280f937fc86a410f6b</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>lensName</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad032c255e7a9c18706051b3cd1e4ec04</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>saturation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a12d945f378758b2fa93f17643e83dead</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sharpness</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aed82fe886b91139fce2d8a1848ee5dfa</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>contrast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a149e3b6368dc269c5cbd6534ea3352ce</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sceneCaptureType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afe3ec88d5fca478d91f3cffc89951936</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>meteringMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae7f69adcca1b80e5ff46d84398eb1628</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>make</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7e1c74bba7c1a3346043be3c10d1cf98</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>model</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9f0a8d607739ceff3b4022beb279c934</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa597e3479245f9007713a40cf35e6ca0</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>fNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7dab70c071e89bc0ac8e12ede1c2ae83</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>shutterSpeedValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae3884075a7281f7239e42603779a7b63</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>apertureValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a64d3d0f7a95d6d51a2fc373b83e7aedf</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>brightnessValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8df6cb744109030b31f5ad1d221bbea4</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureBiasValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa24b50a995c223e75acee83e991d14cb</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>maxApertureValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac42453d4d9fab1c2dadebff472cad22a</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>subjectDistance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6c3e40c8c6696bdf6a28148f2bb8065c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>lightSource</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a196bda962e3befbc32bd6a9eea811b31</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flash</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0eeccf09d0d1a2317ab03065685ca519</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>serialNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aea5cb5e3d068b0f05f65d84767777dbf</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>focalLength</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a30b712fad259eeccbc1e06077f64ffd6</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>subjectArea</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aec77300a3b74c4530fbda653e539cd09</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flashEnergy</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af557d9510b43c08fe6eae296550bcced</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureIndex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6d31ee8c1a6d7e8ac9d49f0f505e495</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sensingMethod</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aef2d9ef9f2b1e93653bccc9472d81662</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>afPoint</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa2b7bc246ea19f62e14a4620d82a7d41</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epsimage.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>epsimage_8hpp.html</filename>
    <class kind="class">Exiv2::EpsImage</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::ImageType</namespace>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newEpsInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a757c50f07507acf4265bd3c3f5065bcd</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isEpsType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afecfd2180c2824313ed3567714ca4db0</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>eps</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aeb97f777e3c8bf8cfdb89e24ad6adb25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>error_8hpp.html</filename>
    <class kind="class">Exiv2::LogMsg</class>
    <class kind="class">Exiv2::AnyError</class>
    <class kind="class">Exiv2::BasicError</class>
    <namespace>Exiv2</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXV_DEBUG</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a824e555382302a4e54e1a0d0ad97279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_INFO</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a877bab177c7381b262585d6cf5f58224</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_WARNING</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a06ee301360765662f07d822ea005647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXV_ERROR</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a3b67d3a20351fe4c1da14ca3f2c6f704</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasicError&lt; char &gt;</type>
      <name>Error</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>accd3e49cafe9db52c1e0e6f648753cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorCode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kerValueTooLarge</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340ba5d37fc6fe341311a3cc5d752fd222fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kerDataAreaValueTooLarge</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340bace2b02c4983f44c3584b85de7a861c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; charT &gt;</type>
      <name>toBasicString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a336b0900420d9e691be0cb9d03d29922</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7278aaca730b5b5378961aea4fc522eb</anchor>
      <arglist>(std::ostream &amp;os, const AnyError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errMsg</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a69fb303117f0eadea1e7e6f201fc5620</anchor>
      <arglist>(int code)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exif.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>exif_8hpp.html</filename>
    <class kind="class">Exiv2::Exifdatum</class>
    <class kind="class">Exiv2::ExifThumbC</class>
    <class kind="class">Exiv2::ExifThumb</class>
    <class kind="class">Exiv2::ExifData</class>
    <class kind="class">Exiv2::ExifParser</class>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::list&lt; Exifdatum &gt;</type>
      <name>ExifMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a93a10b1ca722d594efdf5472464c8ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iptc.hpp</name>
    <path>D:/a/exiv2/exiv2/include/exiv2/</path>
    <filename>iptc_8hpp.html</filename>
    <includes id="datasets_8hpp" name="datasets.hpp" local="yes" imported="no">datasets.hpp</includes>
    <class kind="class">Exiv2::Iptcdatum</class>
    <class kind="class">Exiv2::IptcData</class>
    <class kind="class">Exiv2::IptcParser</class>
    <namespace>Exiv2</namespace>
    <member kind="typedef">
      <type>std::vector&lt; Iptcdatum &gt;</type>
      <name>IptcMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5caa9cbded318bf7d22a2d219c3d45f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>canonmn_int.hpp</name>
    <path>D:/a/exiv2/exiv2/src/</path>
    <filename>canonmn__int_8hpp.html</filename>
    <class kind="class">Exiv2::Internal::CanonMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
    <member kind="function">
      <type>float</type>
      <name>canonEv</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a98d2248e3f1df52f23cbbdd18b380a88</anchor>
      <arglist>(long val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>casiomn_int.hpp</name>
    <path>D:/a/exiv2/exiv2/src/</path>
    <filename>casiomn__int_8hpp.html</filename>
    <class kind="class">Exiv2::Internal::CasioMakerNote</class>
    <class kind="class">Exiv2::Internal::Casio2MakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>exiv2app.hpp</name>
    <path>D:/a/exiv2/exiv2/src/</path>
    <filename>exiv2app_8hpp.html</filename>
    <class kind="struct">ModifyCmd</class>
    <class kind="struct">CmdIdAndString</class>
    <class kind="class">Params</class>
    <class kind="struct">Params::YodAdjust</class>
    <member kind="typedef">
      <type>std::vector&lt; ModifyCmd &gt;</type>
      <name>ModifyCmds</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>aa7ee423bfbeb8b589934d22bdab8a2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CmdId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>ae6f8eb975213634b138cd9114b143567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MetadataId</name>
      <anchorfile>exiv2app_8hpp.html</anchorfile>
      <anchor>a4d2c7e9b6e47d52f540831c5b5c9b2bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nikonmn_int.hpp</name>
    <path>D:/a/exiv2/exiv2/src/</path>
    <filename>nikonmn__int_8hpp.html</filename>
    <class kind="class">Exiv2::Internal::Nikon1MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon2MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon3MakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="file">
    <name>olympusmn_int.hpp</name>
    <path>D:/a/exiv2/exiv2/src/</path>
    <filename>olympusmn__int_8hpp.html</filename>
    <class kind="class">Exiv2::Internal::OlympusMakerNote</class>
    <namespace>Exiv2</namespace>
    <namespace>Exiv2::Internal</namespace>
  </compound>
  <compound kind="class">
    <name>Exiv2::AnyError</name>
    <filename>classExiv2_1_1AnyError.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1AnyError.html</anchorfile>
      <anchor>a98ad01ec7177ad585a2822a292c33d9c</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArrayCfg</name>
    <filename>structExiv2_1_1Internal_1_1ArrayCfg.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>tagStep</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a2b2b4f00c539b15123177649cabbd554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>abbebcf2ae0b67a438d0fa66a3cabed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ByteOrder</type>
      <name>byteOrder_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a9df7e162de9f33b28cb88184b1af056d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TiffType</type>
      <name>elTiffType_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a9784c4e799ef48fc178e27ecf24dce20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CryptFct</type>
      <name>cryptFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a7a6ae4cd29d4e7822b4fdaccea7f95a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSize_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a07e1bbd973045b9faea8a595a00e29eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasFillers_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>ade63547b782912667cd9c0d278659e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>concat_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a48d04c0a34331b2c60918071e5cd41d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayDef</type>
      <name>elDefaultDef_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayCfg.html</anchorfile>
      <anchor>a360bcca16f6238842571b885fd4d7ddd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArrayDef</name>
    <filename>structExiv2_1_1Internal_1_1ArrayDef.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>a9ce1b879ed9a274b3fe434752748bb10</anchor>
      <arglist>(uint32_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>ae03ff8c04b60cebd6ddbc20fbff62515</anchor>
      <arglist>(uint16_t tag, IfdId group) const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>ae938e896879af5d19bd95f7b48fe55b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TiffType</type>
      <name>tiffType_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>a95c11f75aca91b98e312d44f9932109c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>count_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArrayDef.html</anchorfile>
      <anchor>acad24ca28deb4c2327cbb720bb4a59b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ArraySet</name>
    <filename>structExiv2_1_1Internal_1_1ArraySet.html</filename>
    <member kind="variable">
      <type>const ArrayCfg</type>
      <name>cfg_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>a8ad1065ba895de81edfeebf0f684dcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ArrayDef *</type>
      <name>def_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>a5509a22b08d09d9dc5b33f8ec8dd81f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>defSize_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ArraySet.html</anchorfile>
      <anchor>aa0315132a8c0b9d1e51a2c00996175cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::AsciiValue</name>
    <filename>classExiv2_1_1AsciiValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; AsciiValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a799374e09b63edbcd9e3f01a5ef2a314</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a105b0e3b58bda8517aaf4deee1f67054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a69ed02512af72c5d9a1082d6c9c16def</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a1bc6307b16159dcce4b190d32649e9e3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a297d0522f13395b3390c594c83046cb5</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a89cdcd23a22d5a824d2f6e4b1230ebc3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>ad3d4d55aa5b81780df984de05f804bd4</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a105b0e3b58bda8517aaf4deee1f67054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a69ed02512af72c5d9a1082d6c9c16def</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsciiValue</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a1bc6307b16159dcce4b190d32649e9e3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a297d0522f13395b3390c594c83046cb5</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a89cdcd23a22d5a824d2f6e4b1230ebc3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>ad3d4d55aa5b81780df984de05f804bd4</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1AsciiValue.html</anchorfile>
      <anchor>a2d1d1b213a0db908f95b713c226af8e3</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BasicError</name>
    <filename>classExiv2_1_1BasicError.html</filename>
    <templarg>typename charT</templarg>
    <base>Exiv2::AnyError</base>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a07538c8b76f0f1e96a37aca08846c257</anchor>
      <arglist>(ErrorCode code)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a4045e76c22f7b27a3ee1b15e18384938</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>aafe14e40d2b556fc2f55fc0c51d5f6e2</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1, const B &amp;arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a2043528cd64b9a26d216e78f3e5fd920</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1, const B &amp;arg2, const C &amp;arg3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>aab5474ac9203c73a3b0e8f594d38b703</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a65f66bd1492dba0eef0e089c98e3b336</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a64fd31dad1d23798c2c566b1113caa95</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a07538c8b76f0f1e96a37aca08846c257</anchor>
      <arglist>(ErrorCode code)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a4045e76c22f7b27a3ee1b15e18384938</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>aafe14e40d2b556fc2f55fc0c51d5f6e2</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1, const B &amp;arg2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a2043528cd64b9a26d216e78f3e5fd920</anchor>
      <arglist>(ErrorCode code, const A &amp;arg1, const B &amp;arg2, const C &amp;arg3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicError</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>aab5474ac9203c73a3b0e8f594d38b703</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a65f66bd1492dba0eef0e089c98e3b336</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classExiv2_1_1BasicError.html</anchorfile>
      <anchor>a64fd31dad1d23798c2c566b1113caa95</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BasicIo</name>
    <filename>classExiv2_1_1BasicIo.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Position</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1d23c3bf7618f2ee6ebb5cf033b10911</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BasicIo &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>acd38bc83df4ddc8e6fd4d923b06715fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicIo</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a785e9303a21bebcee19d20195ca6eda2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1beff0dcdf03510bad13b6946379c5f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a67ae3ca0f8aece92a7b7749dfb02edde</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ac548d52ef633ac425bd01d17ccd2e7e4</anchor>
      <arglist>(const byte *data, long wcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a31334606e230bbe94d6b8768d3c6d75f</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ad16a1fab0f122c8ca11b86d09b03b9a7</anchor>
      <arglist>(byte data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8c9e6c7377b642afbb2c14a0e3896917</anchor>
      <arglist>(long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aec8cb20c86e72b87577370a28d66a0ca</anchor>
      <arglist>(byte *buf, long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a648bc0d9b1a79e34684375074d806534</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>acb964ff603c96da8711baddb66a385a4</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a561221bbe1d215b4d6b5ceceaa2e9a97</anchor>
      <arglist>(long offset, Position pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aed3b01f1024944a82f72a9004efb9f98</anchor>
      <arglist>(bool isWriteable=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aad39cb2b01e19b5e648988bbb239fa63</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>bigBlock_</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a64c13339b4859aa21faf1f79415c1ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aeb9673a48a7af7376b7018998fb552e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a5e1bfc89b8c336c1a96bcaff9c5f4723</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a17744832ee807c68f9c8d744692d9aaf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ad674727cddbf9cea627423620a8bb3d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a29b826f89a8aac3c83ece6f8f343ed72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8c4af60d14039fd99d36c73ce8354c15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>populateFakeData</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a47a081ffd8f8b061abc8711f3a4d38e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicIo</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a785e9303a21bebcee19d20195ca6eda2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a1beff0dcdf03510bad13b6946379c5f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a67ae3ca0f8aece92a7b7749dfb02edde</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ac548d52ef633ac425bd01d17ccd2e7e4</anchor>
      <arglist>(const byte *data, long wcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a31334606e230bbe94d6b8768d3c6d75f</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>ad16a1fab0f122c8ca11b86d09b03b9a7</anchor>
      <arglist>(byte data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a8c9e6c7377b642afbb2c14a0e3896917</anchor>
      <arglist>(long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aec8cb20c86e72b87577370a28d66a0ca</anchor>
      <arglist>(byte *buf, long rcount)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a648bc0d9b1a79e34684375074d806534</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>acb964ff603c96da8711baddb66a385a4</anchor>
      <arglist>(BasicIo &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>a561221bbe1d215b4d6b5ceceaa2e9a97</anchor>
      <arglist>(long offset, Position pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aed3b01f1024944a82f72a9004efb9f98</anchor>
      <arglist>(bool isWriteable=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1BasicIo.html</anchorfile>
      <anchor>aad39cb2b01e19b5e648988bbb239fa63</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::binaryToStringHelper</name>
    <filename>structExiv2_1_1Internal_1_1binaryToStringHelper.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>Exiv2::BlockMap</name>
    <filename>classExiv2_1_1BlockMap.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>blockType_e</name>
      <anchorfile>classExiv2_1_1BlockMap.html</anchorfile>
      <anchor>a0d6e2c7d2def6496ec113802e04276d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockMap</name>
      <anchorfile>classExiv2_1_1BlockMap.html</anchorfile>
      <anchor>a54f830011d08c18335169882eb799194</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlockMap</name>
      <anchorfile>classExiv2_1_1BlockMap.html</anchorfile>
      <anchor>ad4b255ed4784546efd9844d493036706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populate</name>
      <anchorfile>classExiv2_1_1BlockMap.html</anchorfile>
      <anchor>a6ebcf424cf2dea3f2b75caf1517ee567</anchor>
      <arglist>(byte *source, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markKnown</name>
      <anchorfile>classExiv2_1_1BlockMap.html</anchorfile>
      <anchor>a759b496414467a4fe4483a6ba58073a6</anchor>
      <arglist>(size_t num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BmffImage</name>
    <filename>classExiv2_1_1BmffImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>BmffImage</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac3050586d1e1b8415c25fe9423022aff</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseTiff</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac7d79a73bada41a9ca5065a280bb9cee</anchor>
      <arglist>(uint32_t root_tag, uint64_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseXmp</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a48b9bc6ecd0eaa577d97124da2780b40</anchor>
      <arglist>(uint64_t length, uint64_t start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseCr3Preview</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a2eb56be0a5d01a71980b140cdec861da</anchor>
      <arglist>(DataBuf &amp;data, std::ostream &amp;out, bool bTrace, uint8_t version, uint32_t width_offset, uint32_t height_offset, uint32_t size_offset, uint32_t relative_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a43c6d4b0795e2236b6ba85facf38907f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a25772a35529f142e05e94799aa92c9c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac65b7079a0d8056d9dc8e43e05d437b0</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>aabcb2bd1776831f61fdaa03b321398b6</anchor>
      <arglist>(std::ostream &amp;out, Exiv2::PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>acf9471916ca0f19125f48a5fd3090f9b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a0d5be1ef34f1cfc43577826fe9c4dfd3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac71b9d3f9580af141290020f49446cbd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BmffImage</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac3050586d1e1b8415c25fe9423022aff</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseTiff</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac7d79a73bada41a9ca5065a280bb9cee</anchor>
      <arglist>(uint32_t root_tag, uint64_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseXmp</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a48b9bc6ecd0eaa577d97124da2780b40</anchor>
      <arglist>(uint64_t length, uint64_t start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseCr3Preview</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a2eb56be0a5d01a71980b140cdec861da</anchor>
      <arglist>(DataBuf &amp;data, std::ostream &amp;out, bool bTrace, uint8_t version, uint32_t width_offset, uint32_t height_offset, uint32_t size_offset, uint32_t relative_position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a43c6d4b0795e2236b6ba85facf38907f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>a25772a35529f142e05e94799aa92c9c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>ac65b7079a0d8056d9dc8e43e05d437b0</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1BmffImage.html</anchorfile>
      <anchor>aabcb2bd1776831f61fdaa03b321398b6</anchor>
      <arglist>(std::ostream &amp;out, Exiv2::PrintStructureOption option, int depth) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::BmpImage</name>
    <filename>classExiv2_1_1BmpImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>BmpImage</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>aa7fa1608c9407212ad5393bc278d4c44</anchor>
      <arglist>(const BmpImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>BmpImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a9367b45669d8dd84b9037a06f31bdfe8</anchor>
      <arglist>(const BmpImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BmpImage</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a092479a15456e0831c92cea3bb87367f</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a294d5b0c24f7236a30cd611d6a7fad5a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a5d14a3706834d5ac1afa97766ac0e58d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a88ea3b41fc110a342cbef484fefe81f7</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>abb95d50ac3ec12da4a4d956af03cc8a4</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a450743e4dd7abff14d66f461c03d0431</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>af46af2619f37466a9869ed7acbad6113</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BmpImage</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>aa7fa1608c9407212ad5393bc278d4c44</anchor>
      <arglist>(const BmpImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>BmpImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a9367b45669d8dd84b9037a06f31bdfe8</anchor>
      <arglist>(const BmpImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BmpImage</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a092479a15456e0831c92cea3bb87367f</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a294d5b0c24f7236a30cd611d6a7fad5a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a5d14a3706834d5ac1afa97766ac0e58d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a88ea3b41fc110a342cbef484fefe81f7</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>abb95d50ac3ec12da4a4d956af03cc8a4</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>a450743e4dd7abff14d66f461c03d0431</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1BmpImage.html</anchorfile>
      <anchor>af46af2619f37466a9869ed7acbad6113</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CanonMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1CanonMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3c81fc12f0e39595d0be950debb89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6dae78b0cac2fa190e88c2b9c2682561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a19ad7233b46e19412afd07c6abca2cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPa</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a64b219fc700f55b231586f8c81b61c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCf</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3d0c1a2a2baadb47fb017efa6d0b6261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a0fa8b9b1c5ff0a541285b0cca7350a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListTi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aa1bf071afea5705b42de99142a381c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a203344d78569e5d75c0ea157f15d1e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abac6750da609603a873ad3a375884741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMv</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a1f16db8c700990826986ff519c4dce34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMc</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a66e0c6431d7b0e2aae1bc53b38189e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf3</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ac0b31c5a56ffebf5c1896d30635d47e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFcd3</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3ccaf3c62c262874e5e60a90de33e72a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListWbi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>acf86f23d493f9c460a6a0afa429a7959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCo</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a886bd80d6a9dc17cc4b8ef1b7851ddbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFcd2</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ab26a4639d02c44c6530e39920f9361e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFcd1</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a9101bfaea2196cdb1cdddc770a07db2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAs</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ab43b589e0602d3718e0cf9a97fb178dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCbi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a32af1b54cae60c7d9fdae86da64b9d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a4dfce1fc8b20c751889a43fb6f483b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMo</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>afcfc30d77d69d5d5a1cc881ccd1c0d97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPreI</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a0414526c0ff086fda38c9179d7f75e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCi</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a4fac2f1fa6e700d1fb654a66154068b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAfMiAdj</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ab9f634ab30f1ab7c39b0a71bbb799931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListVigCor</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ad0b29c895163b51c07fc284b6f7f0826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListVigCor2</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>afd98d8cab7eb575821c1a1db9e7673c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLiOp</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6e52c72ff64991f3d1bccde87c55de99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLe</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ac406e03f852206b773c942fcccd4b52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAm</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a51a8eec88bb2ea85beb8eb2789b510a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMe</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6adbaf9cfd6ef2540b829bbc239280ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFil</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a1421769a82e3f864b5b9c2d3ff5eeb60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListHdr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a5d6ceaa4a78d01e909c9d8177b1d214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAfC</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aaeae9a6621ccabffa0577a4e13216b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRawB</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ab1ed8594e916ea9f5d5119bdab0ef5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf2</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a59c00cfc157ac27cfca6ebf23fac6581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFiFileNumber</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a855339d00000363505b605bb04968c71</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a78f4f8d5b1ee4953e838ba73050857a0</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0008</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aa273348bed665d9201179fce7c73b0e7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000c</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ad27d1c8361515c7a07a0f40a5466b010</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCs0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a6ecab56136c0e3e8a0ed5aa543dcb94c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCsLensType</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abe617b7dc5018aa2aecdcfd7aec32035</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCsLens</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ae8f03d224336c64601c8726d1d14633c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0001</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abae4f7d81d6b51959e7fd424aa29827a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a30e8a90b067bab29f9dd5ba1e6ad9c60</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0003</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aff5e4204e14e1dcddc7b29be0fafd586</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0009</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a19f6ba09113640bb8be3e0ae150c5ea6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x000c</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ac363538c861936e48b0737dc7de95c48</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x000d</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a95f0355e4e9786696f23c71bca77fd61</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x000e</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>aecca49287a3093be70764ebe5f8a28ea</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *pExifData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0013</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>ad561a40517cbfc6ebd4bbe34177e2e66</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0015</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a3eec32eca5659bce32d1547fbe30957c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0016</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>abed475fc6211d1b9aedcc925902cbe82</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0017</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a26e4af4cb3ca6399f19b5b2a9988b8ba</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSi0x0018</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a9196cfb246dee3c5d7fe16a96a696e4f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFiFocusDistance</name>
      <anchorfile>classExiv2_1_1Internal_1_1CanonMakerNote.html</anchorfile>
      <anchor>a9a687e777207436292768d801d94e500</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Casio2MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Casio2MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MakerNote.html</anchorfile>
      <anchor>aaf0207ed96702b082ba6c2d85991dcda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x2001</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MakerNote.html</anchorfile>
      <anchor>aed56d698b525af6fe8878131a6cc893c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x2022</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MakerNote.html</anchorfile>
      <anchor>ac4d4545aa36131109c56d621b88b1956</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Casio2MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Casio2MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Casio2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>aec051e8d5f6a17d4d80da463e83e2a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Casio2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>a729fdebc3ff507bef69eff9310b52290</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>aac7fb45324dc3514077fdcd9f3f6cf1a</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>a95fe30e61d247040a2e10fb32a17e667</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>abd4b23d49cbde40b37bbf484a3ed3a2b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>ad9ca26f6926d4b2e58d8691f153a3859</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>a4c1f37f1794271c7930ab5a3d5fffc33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>a5f9cd42f84c98d5348f94e7896118ac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Casio2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>aec051e8d5f6a17d4d80da463e83e2a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Casio2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>a729fdebc3ff507bef69eff9310b52290</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Casio2MnHeader.html</anchorfile>
      <anchor>aac7fb45324dc3514077fdcd9f3f6cf1a</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CasioMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1CasioMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1CasioMakerNote.html</anchorfile>
      <anchor>af5b67cd475a155164ec3ef868596a375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0006</name>
      <anchorfile>classExiv2_1_1Internal_1_1CasioMakerNote.html</anchorfile>
      <anchor>a47f3be6afa11d428d1faef13fd9ee438</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0015</name>
      <anchorfile>classExiv2_1_1Internal_1_1CasioMakerNote.html</anchorfile>
      <anchor>a5b83c46a73a3721f74dd20b88cd47571</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CommentValue::CharsetInfo</name>
    <filename>classExiv2_1_1CommentValue_1_1CharsetInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>CharsetInfo</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>acb913385dc81e3b2d0a10f8e2c692064</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharsetInfo</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>acb41d3aee6140cece25a106a2a791088</anchor>
      <arglist>(const CharsetInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>CharsetInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a5ab781af5899ef00148ef5124ebab3a9</anchor>
      <arglist>(const CharsetInfo &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a01262330f3440a341734757f142d3fa0</anchor>
      <arglist>(CharsetId charsetId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>code</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a035235c0f0e7b8deada2e8ef111b480e</anchor>
      <arglist>(CharsetId charsetId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharsetId</type>
      <name>charsetIdByName</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>a11c99bba8c8529cb1d437497c69faa51</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharsetId</type>
      <name>charsetIdByCode</name>
      <anchorfile>classExiv2_1_1CommentValue_1_1CharsetInfo.html</anchorfile>
      <anchor>ac9bbeb2bd3f4143bed7aab6e6515f3b6</anchor>
      <arglist>(const std::string &amp;code)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::CommentValue::CharsetTable</name>
    <filename>structExiv2_1_1CommentValue_1_1CharsetTable.html</filename>
    <member kind="function">
      <type></type>
      <name>CharsetTable</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a6d4548ab85ad7e5cb73937d3c809a95b</anchor>
      <arglist>(CharsetId charsetId, const char *name, const char *code)</arglist>
    </member>
    <member kind="variable">
      <type>CharsetId</type>
      <name>charsetId_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a41723a676c46bf69c8b7376392db0066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>a7dafa39d67bf1a442fd5c8350a1487b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>code_</name>
      <anchorfile>structExiv2_1_1CommentValue_1_1CharsetTable.html</anchorfile>
      <anchor>ac9404e0866cb85b5966ddf5c91304d14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffComponent</name>
    <filename>classExiv2_1_1Internal_1_1CiffComponent.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CiffComponent &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a5476c52f80b86c122c47208fa57dc60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CiffComponent * &gt;</type>
      <name>Components</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a5d006cff1465a6feb1774d0d8946a988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a48aad30101fd360a7956ecf00611fdd8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a241ef11ce8db1b56f059729fb99b1863</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab8697193e1bca2e496fe3a8471f33d8d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa07abaa63d3c85d92c4609e3a1dfde19</anchor>
      <arglist>(Image &amp;image, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab69dbf5f9a69e71dd01f5280c2569426</anchor>
      <arglist>(std::ostream &amp;os, ByteOrder byteOrder, const std::string &amp;prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDirEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a0008cedb1e436168b9769a67b84dad81</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>dir</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab936299a6a2b621a58fde5939a4045b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aac1273c701882ef68a22e0d3baf297ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a32ab59fad81c724eac4c0d5b4bae64f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a3281f8daafa3730aa70d2ec45e57857a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ad84dcd229df4d8ea173ad6ec1a701f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a1286f05a62e3d37f1afe85ce40b8b04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tagId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa0ac7a614e81c670901b03f035ac5c86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a28054a927bce1a285d895b6f20b4d374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataLocId</type>
      <name>dataLocation</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a5119de0089425da7476dd2e8e88a3f78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>findComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a98dbcb0a44b26c889e557f01b5fa8183</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doDecode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a78f1afe3715944c885e80e666ccbede0</anchor>
      <arglist>(Image &amp;image, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doPrint</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a256915de1f2b327c4f0ac8a4bcfb023d</anchor>
      <arglist>(std::ostream &amp;os, ByteOrder byteOrder, const std::string &amp;prefix) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doEmpty</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a6d67cd03cb012e3d2116f7b844ccfe88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CiffComponent *</type>
      <name>doFindComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a2258e09350a9c1c5273a5eab1375f70b</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a48aad30101fd360a7956ecf00611fdd8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a241ef11ce8db1b56f059729fb99b1863</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab8697193e1bca2e496fe3a8471f33d8d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a28b07653e226d560709b731dde169478</anchor>
      <arglist>(UniquePtr component)</arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>af019bd49e7c4a38c644f4d9b0e99bff6</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a796cd02123f8f107f98c0e3bb5221208</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a6a7574b05379d86c2cc71ec5aa18b7b6</anchor>
      <arglist>(const byte *pData, uint32_t size, uint32_t start, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a28f3354567a79aed51d111ef51fa5f58</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, uint32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeValueData</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a185e1f0f6064990dd1a5c6b9164a0e0d</anchor>
      <arglist>(Blob &amp;blob, uint32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDir</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a7ef2788e0125bd87717e1c04d27209e7</anchor>
      <arglist>(uint16_t dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ade6aff78d2f8ea571709fdcb896e6264</anchor>
      <arglist>(DataBuf &amp;&amp;buf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a2adef06fdae2c0178603b5015e798120</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataLocId</type>
      <name>dataLocation</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>aa8a1296c8299343399ab9eff9d0e6583</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doAdd</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a48c768f903c514a975093c2d35ccb3d1</anchor>
      <arglist>(UniquePtr component)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CiffComponent *</type>
      <name>doAdd</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a8c72fc7369b5772b2c0ae977c84ed37d</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doRemove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a4878acf471cbc8680a4111439790c2ef</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwTagId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doRead</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>ab814e06f56d1db89f0828e319a921c50</anchor>
      <arglist>(const byte *pData, uint32_t size, uint32_t start, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a46c9e097d4974da18d891ceab43b5bf3</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, uint32_t offset)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a3bf3b862b5d5d5a96cb035177aabae0d</anchor>
      <arglist>(uint32_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffComponent.html</anchorfile>
      <anchor>a7203038d5cd748c8bbd319443291b972</anchor>
      <arglist>(uint32_t offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffDirectory</name>
    <filename>classExiv2_1_1Internal_1_1CiffDirectory.html</filename>
    <base>Exiv2::Internal::CiffComponent</base>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a55ed36f5e873acb2c9d5c2e3bf7ab80f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>ad8d88930816866fa8b897534108cca10</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a6f3ae26eaf0814205ec6f9a54e8335e9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a55ed36f5e873acb2c9d5c2e3bf7ab80f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>ad8d88930816866fa8b897534108cca10</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a6f3ae26eaf0814205ec6f9a54e8335e9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffDirectory.html</anchorfile>
      <anchor>a576d1c93e772acfc663c1f199e668ee5</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffEntry</name>
    <filename>classExiv2_1_1Internal_1_1CiffEntry.html</filename>
    <base>Exiv2::Internal::CiffComponent</base>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>adfc5456fbd1c026759bb106e8bfb48d0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>abc023ca95fbc78e600c3d090c0dde9e9</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>adfc5456fbd1c026759bb106e8bfb48d0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffEntry.html</anchorfile>
      <anchor>abc023ca95fbc78e600c3d090c0dde9e9</anchor>
      <arglist>(uint16_t tag, uint16_t dir)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CiffHeader</name>
    <filename>classExiv2_1_1Internal_1_1CiffHeader.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CiffHeader &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>ac3f53e366c1b380edfcc5749a73d4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a5378222e1577d0fe2df654a72a3726fa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>aa4b16507eae5e80a6724515092b89373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>ad9f0859c4a8b75c7d208451a92741c18</anchor>
      <arglist>(Blob &amp;blob) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a807104a489a984d399c742b5c5e8fefa</anchor>
      <arglist>(Image &amp;image) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a698dca1c9003de4453c3e2cb0c1ca9a3</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a51fdec64934af56666348b1c36bcf5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CiffComponent *</type>
      <name>findComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>aedb9366775c2780bd6f42cd12c486fa2</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a5378222e1577d0fe2df654a72a3726fa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>aa4b16507eae5e80a6724515092b89373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a3d53434a9b7d2f5a9a791304e76488a7</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a502be0bff20a05542afdd469ac6eee91</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir, DataBuf &amp;&amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>a5b9ba517b40e199a1ffe81f91c7dad87</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>signature</name>
      <anchorfile>classExiv2_1_1Internal_1_1CiffHeader.html</anchorfile>
      <anchor>aebd22975dc161b7412506ef5debdb420</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CmdIdAndString</name>
    <filename>structCmdIdAndString.html</filename>
    <member kind="variable">
      <type>CmdId</type>
      <name>cmdId_</name>
      <anchorfile>structCmdIdAndString.html</anchorfile>
      <anchor>aae9c97248475449a855a843b906361f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>cmdString_</name>
      <anchorfile>structCmdIdAndString.html</anchorfile>
      <anchor>afcf01c153fe8502ffa70d713e2685f8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CommentValue</name>
    <filename>classExiv2_1_1CommentValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <class kind="class">Exiv2::CommentValue::CharsetInfo</class>
    <class kind="struct">Exiv2::CommentValue::CharsetTable</class>
    <member kind="enumeration">
      <type></type>
      <name>CharsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ae18c0bebdb51d4380c32b20f89f8fdc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CommentValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a8348ead0b0d6e1f0f648f28e5979a58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a78b03cf4b841577f41e10ae51962b710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a4305d98b7eef38ca055f4bc1a3ddb96e</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ac3f0b7251c0a6596f9aa48d95fb888db</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a5f3ec982f5404daf474b410389dd228e</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>aa4981b59e203ee1af1df442e2e423df0</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="variable">
      <type>ByteOrder</type>
      <name>byteOrder_</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ab3199a8019d5799c21ff584112c113bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>aa80f5777fcc860dcdf4906a8a4ac50eb</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a8b9b3ceb925b07f0088eb0df60157ce7</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>comment</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ac0d86032c2b89a487b613c984a5f7a64</anchor>
      <arglist>(const char *encoding=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>detectCharset</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a4f733815b581b0e0e6f8c3bf996cc9bf</anchor>
      <arglist>(std::string &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>CharsetId</type>
      <name>charsetId</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a860d1fb3f9d05a69035d18c0ee1994ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a78b03cf4b841577f41e10ae51962b710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a4305d98b7eef38ca055f4bc1a3ddb96e</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CommentValue</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>ac3f0b7251c0a6596f9aa48d95fb888db</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>a5f3ec982f5404daf474b410389dd228e</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1CommentValue.html</anchorfile>
      <anchor>aa4981b59e203ee1af1df442e2e423df0</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ConstSliceBase</name>
    <filename>structExiv2_1_1Internal_1_1ConstSliceBase.html</filename>
    <templarg>template&lt; typename data_type &gt; class storage_type</templarg>
    <templarg>typename data_type</templarg>
    <base>Exiv2::Internal::SliceBase</base>
    <member kind="function">
      <type></type>
      <name>ConstSliceBase</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>af19c6e79461cd3e8ac2658c67432197a</anchor>
      <arglist>(data_type &amp;data, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>at</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>aa50e39905bd03ab25effe7facf9da95a</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>aa03ef52aa7dc9cb20f4aa4ed5ecf515a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>a891fedf1f108ce5c7be34859a05f1bb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>slice_type</type>
      <name>subSlice</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>a5ffbb40deacd94ba4f2c1065f2c2333b</anchor>
      <arglist>(size_t begin, size_t end) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>storage_type&lt; data_type &gt;</type>
      <name>storage_</name>
      <anchorfile>structExiv2_1_1Internal_1_1ConstSliceBase.html</anchorfile>
      <anchor>a8f85c67275e64e44430fb0f3379bd778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::ContainerStorage</name>
    <filename>structExiv2_1_1Internal_1_1ContainerStorage.html</filename>
    <templarg>typename container</templarg>
    <member kind="function">
      <type></type>
      <name>ContainerStorage</name>
      <anchorfile>structExiv2_1_1Internal_1_1ContainerStorage.html</anchorfile>
      <anchor>af99f63e273a34078c4b76d3a7859ea3c</anchor>
      <arglist>(container &amp;data, size_t, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>unsafeAt</name>
      <anchorfile>structExiv2_1_1Internal_1_1ContainerStorage.html</anchorfile>
      <anchor>afcbdd4ec041dd6cfdb1d162df2a76588</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>unsafeGetIteratorAt</name>
      <anchorfile>structExiv2_1_1Internal_1_1ContainerStorage.html</anchorfile>
      <anchor>a3a7b5d981b4517f36151e3231ccc9cc1</anchor>
      <arglist>(size_t index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Converter::Conversion</name>
    <filename>structExiv2_1_1Converter_1_1Conversion.html</filename>
    <member kind="variable">
      <type>MetadataId</type>
      <name>metadataId_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a2cd7f3ed76954bbd4fe53d7ba47293d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>key1_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a5f660c9f86bfcb4d98aee91c99d39f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>key2_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a12f6c777e40374684e6bda32fcfe55c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvertFct</type>
      <name>key1ToKey2_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>a3e3d9d946dc019807c204144118d7684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvertFct</type>
      <name>key2ToKey1_</name>
      <anchorfile>structExiv2_1_1Converter_1_1Conversion.html</anchorfile>
      <anchor>aaa817fb7dd83e72265d6c545fed61014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Converter</name>
    <filename>classExiv2_1_1Converter.html</filename>
    <class kind="struct">Exiv2::Converter::Conversion</class>
    <member kind="typedef">
      <type>void(Converter::*)(const char *, const char *)</type>
      <name>ConvertFct</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a1021d7372987bdcfabea7e4c0711c094</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a91728580444ea3f734fad7db93283260</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ac33088063e7870950ad4f87bb9b3d627</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvToXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a9ff54c47c6a6446bbef4d79e8d4f8060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvFromXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae5963fe9f0bdd8382de2ce2d50f16d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErase</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a37f93ea473239af2d73be3af50ef2345</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverwrite</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>abac9285398034aacce1531ce6272db63</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvNone</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7f6b0c94474efaddfa7d3ecaf49ed719</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae982c003ead2d1e7e27a6a7d8401ed30</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a759b21bb838f846d904c6ce44cce23d6</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3238a397b14b749e274acd38b94c1509</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2840545129d3fa365a98ad966215b364</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2859d78ddf45ce2be0f16881ffb2bad9</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a4898bc4a39cee1eedbea7588c4f8b79f</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>afbaf2c45e8b57430c674caed8edde085</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a862d9877fe263e1924959dd4d7e4d32e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a01fa347250b39e24418e31203cee0a06</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aeda35aa57f60caf68d81603b0c33fe2e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a6c4fe48b02bd5f036a8ce7e1d41a2ea3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a71becb0e5b8f267cc96d9b7f5312c4fc</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a72ec87bd8cd8b0342e199bf144e450c5</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a8c155519d2d5371a7cb3a843828694be</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3fa6261ccd2aad114811f336da7d65a8</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ab919aa805d435f5da8119fb5ab7272a3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvIptcValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a214d53f25cf6cedc9e5b18dde9251346</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValueToIptc</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aaa7c55b0481e6469d3195b0f99f70d5d</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeExifDigest</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a058c361345d9bac48d392a3c51a184af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7c2991c94c32b976bf92568a7844bb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ab5c1d5ad1dae4e877bacc823ff8ea9f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overwrite</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a922a1308eeeba2de6a80369e327da3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a91728580444ea3f734fad7db93283260</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Converter</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ac33088063e7870950ad4f87bb9b3d627</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvToXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a9ff54c47c6a6446bbef4d79e8d4f8060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvFromXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae5963fe9f0bdd8382de2ce2d50f16d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErase</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a37f93ea473239af2d73be3af50ef2345</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverwrite</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>abac9285398034aacce1531ce6272db63</anchor>
      <arglist>(bool onoff=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvNone</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7f6b0c94474efaddfa7d3ecaf49ed719</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ae982c003ead2d1e7e27a6a7d8401ed30</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a759b21bb838f846d904c6ce44cce23d6</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3238a397b14b749e274acd38b94c1509</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2840545129d3fa365a98ad966215b364</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a2859d78ddf45ce2be0f16881ffb2bad9</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a4898bc4a39cee1eedbea7588c4f8b79f</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>afbaf2c45e8b57430c674caed8edde085</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvExifGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a862d9877fe263e1924959dd4d7e4d32e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a01fa347250b39e24418e31203cee0a06</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpComment</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aeda35aa57f60caf68d81603b0c33fe2e</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpArray</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a6c4fe48b02bd5f036a8ce7e1d41a2ea3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpDate</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a71becb0e5b8f267cc96d9b7f5312c4fc</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a72ec87bd8cd8b0342e199bf144e450c5</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSVersion</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a8c155519d2d5371a7cb3a843828694be</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpFlash</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a3fa6261ccd2aad114811f336da7d65a8</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpGPSCoord</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>ab919aa805d435f5da8119fb5ab7272a3</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvIptcValue</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a214d53f25cf6cedc9e5b18dde9251346</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cnvXmpValueToIptc</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>aaa7c55b0481e6469d3195b0f99f70d5d</anchor>
      <arglist>(const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeExifDigest</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a058c361345d9bac48d392a3c51a184af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>classExiv2_1_1Converter.html</anchorfile>
      <anchor>a7c2991c94c32b976bf92568a7844bb5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Cr2Header</name>
    <filename>classExiv2_1_1Internal_1_1Cr2Header.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>ada7e3259b9f29a8f6a1ffb0f1d3ecb35</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a2ff2ba5a654f0d6e2bb56205bd5f7f38</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a71d8c3be30eb6ecf2b4c63e3b25686d9</anchor>
      <arglist>(const byte *pData, uint32_t size) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a498da21b94506528109c57dc3008abab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a5b126ec393fd843007328cfa0ba0dc69</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>offset2addr</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a4df6a77c3d06c54505c6e016d3666ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>ada7e3259b9f29a8f6a1ffb0f1d3ecb35</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cr2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a2ff2ba5a654f0d6e2bb56205bd5f7f38</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Cr2Header.html</anchorfile>
      <anchor>a71d8c3be30eb6ecf2b4c63e3b25686d9</anchor>
      <arglist>(const byte *pData, uint32_t size) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Cr2Image</name>
    <filename>classExiv2_1_1Cr2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Cr2Image</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aeaf6d9b35e66aceb717b467ca2b1779f</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>abbbdb995ea3eba20181804404346d316</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a307f283a803e7a4833fdebb5705260d7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a6decb357585e496077e3025ec7c0764f</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>ac93ea1e2891af4e437ea12aeb632071c</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>afd2e3249099e144ceb89511882302074</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>ac3d04ceac359c0968603d6e050230a05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aa82b1df364dd9e648ccff1c5e7d6e4f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cr2Image</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aa77b83807200eb20e61bced0b5c781ff</anchor>
      <arglist>(const Cr2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Cr2Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aef84e3a68e25fdab8deda46d03e411bc</anchor>
      <arglist>(const Cr2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cr2Image</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aeaf6d9b35e66aceb717b467ca2b1779f</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>abbbdb995ea3eba20181804404346d316</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a307f283a803e7a4833fdebb5705260d7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>a6decb357585e496077e3025ec7c0764f</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>ac93ea1e2891af4e437ea12aeb632071c</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>afd2e3249099e144ceb89511882302074</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>ac3d04ceac359c0968603d6e050230a05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aa82b1df364dd9e648ccff1c5e7d6e4f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cr2Image</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aa77b83807200eb20e61bced0b5c781ff</anchor>
      <arglist>(const Cr2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Cr2Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Cr2Image.html</anchorfile>
      <anchor>aef84e3a68e25fdab8deda46d03e411bc</anchor>
      <arglist>(const Cr2Image &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Cr2Parser</name>
    <filename>classExiv2_1_1Cr2Parser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Cr2Parser.html</anchorfile>
      <anchor>a258fb26e5b7234b669391de9fa395182</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Cr2Parser.html</anchorfile>
      <anchor>abee19aa031e922035aa95129ed6305f9</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CrwImage</name>
    <filename>classExiv2_1_1CrwImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>CrwImage</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>aa1503c7531247c4af74070dab22d78a4</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>af2034be8ea8306f2bc5a796e2548f378</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>ae9396c882ea827a2aedea4ddc5c83e47</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>aab1c6f7d240dc193ba85a011d08ed2d0</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a4c1eb878ece7946bf417412e010a489c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a16344c1e46199771abb76f73ef2a6376</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a1b4aaded5b988d88bf7de1fd0e72ced1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrwImage</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a58601a2e9ec4547f921732d6e7032a5a</anchor>
      <arglist>(const CrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>CrwImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a7ba79e5f904610a433d573d13527c57d</anchor>
      <arglist>(const CrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrwImage</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>aa1503c7531247c4af74070dab22d78a4</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>af2034be8ea8306f2bc5a796e2548f378</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>ae9396c882ea827a2aedea4ddc5c83e47</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>aab1c6f7d240dc193ba85a011d08ed2d0</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a4c1eb878ece7946bf417412e010a489c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a16344c1e46199771abb76f73ef2a6376</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a1b4aaded5b988d88bf7de1fd0e72ced1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrwImage</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a58601a2e9ec4547f921732d6e7032a5a</anchor>
      <arglist>(const CrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>CrwImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1CrwImage.html</anchorfile>
      <anchor>a7ba79e5f904610a433d573d13527c57d</anchor>
      <arglist>(const CrwImage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::CrwMap</name>
    <filename>classExiv2_1_1Internal_1_1CrwMap.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>a8abc0f4c524faf5c50e924e32d1ce4aa</anchor>
      <arglist>(const CiffComponent &amp;ciffComponent, Image &amp;image, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>abe05b6fe8d83c440acd29e98640451dc</anchor>
      <arglist>(CiffHeader *pHead, const Image &amp;image)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadStack</name>
      <anchorfile>classExiv2_1_1Internal_1_1CrwMap.html</anchorfile>
      <anchor>ae8e294d1437f8087521e7566e298f79b</anchor>
      <arglist>(CrwDirs &amp;crwDirs, uint16_t crwDir)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::CrwMapping</name>
    <filename>structExiv2_1_1Internal_1_1CrwMapping.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwTagId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>ae1d07658e2c4f6c6e6adc5ecb319e431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwDir_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>aa412d424d237230e0bd4ddcdf5bf587a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a7ae07df0d75e8c08420a2ad006c61435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a6dca36583a62f4d6625239d52e84ec29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a2f451f1f58068991537170a5b3664de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrwDecodeFct</type>
      <name>toExif_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>a22e026f16d60a4188a8ca7120def0381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CrwEncodeFct</type>
      <name>fromExif_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>ace880a94ed89279dfa6320b11cfbb803</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrwMapping</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwMapping.html</anchorfile>
      <anchor>af2baaca143e2ccb2252af22842ef39d2</anchor>
      <arglist>(uint16_t crwTagId, uint16_t crwDir, uint32_t size, uint16_t tag, Internal::IfdId ifdId, CrwDecodeFct toExif, CrwEncodeFct fromExif)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::CrwParser</name>
    <filename>classExiv2_1_1CrwParser.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1CrwParser.html</anchorfile>
      <anchor>a80a0861a3c37e739ef144d425f439079</anchor>
      <arglist>(CrwImage *pCrwImage, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1CrwParser.html</anchorfile>
      <anchor>a315bf9d2eda81fa73580b5c184410edb</anchor>
      <arglist>(Blob &amp;blob, const byte *pData, uint32_t size, const CrwImage *pCrwImage)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::CrwSubDir</name>
    <filename>structExiv2_1_1Internal_1_1CrwSubDir.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>crwDir_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwSubDir.html</anchorfile>
      <anchor>abbd1122fd275cf739af883f605978723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>parent_</name>
      <anchorfile>structExiv2_1_1Internal_1_1CrwSubDir.html</anchorfile>
      <anchor>a1a4e6be6250972ebd11694876d56867b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DataBuf</name>
    <filename>structExiv2_1_1DataBuf.html</filename>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a7acbb6dd1dc8ba1cfded52cafffe1da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa7f5e919eddab5d8623cebbc6af91328</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa0a63b749954741d5516dd58265b2e5c</anchor>
      <arglist>(const byte *pData, long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ae28257072d790c2fc8521018daec5f35</anchor>
      <arglist>(const DataBuf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aba97d2545de403777cb203307eb634fb</anchor>
      <arglist>(DataBuf &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ab5ee5eefc2521158847edeb0ff12ac6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataBuf &amp;</type>
      <name>operator=</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa6161de821cb71d72aaa4a9233575538</anchor>
      <arglist>(DataBuf &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alloc</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>abe06b478dee2d020c4bde3f974bdeb90</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a00aacab8ccdce682ac84e46e29437c60</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type>EXV_WARN_UNUSED_RESULT std::pair&lt; byte *, long &gt;</type>
      <name>release</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ac41e3325029ea75a471a8947930893fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a46715e2b7a42477649b6044d519f43b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a11552c9f48b0f1614949531b944ee27b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyBytes</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a4cbf7946b15c42e64d36232fbb2a7022</anchor>
      <arglist>(size_t offset, const void *buf, size_t bufsize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cmpBytes</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a1613561da79d6045f470eaeebe7b3ce2</anchor>
      <arglist>(size_t offset, const void *buf, size_t bufsize) const</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>data</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a8798f18324024c6c2dc3073061b1e921</anchor>
      <arglist>(size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>c_data</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a5781d9c54ec5ddad6332b7a649604526</anchor>
      <arglist>(size_t offset=0) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>af2016714ffd8a2b5dd964d1c86f41d12</anchor>
      <arglist>(size_t offset=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>a7acbb6dd1dc8ba1cfded52cafffe1da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa7f5e919eddab5d8623cebbc6af91328</anchor>
      <arglist>(long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aa0a63b749954741d5516dd58265b2e5c</anchor>
      <arglist>(const byte *pData, long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ae28257072d790c2fc8521018daec5f35</anchor>
      <arglist>(const DataBuf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>aba97d2545de403777cb203307eb634fb</anchor>
      <arglist>(DataBuf &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataBuf</name>
      <anchorfile>structExiv2_1_1DataBuf.html</anchorfile>
      <anchor>ab5ee5eefc2521158847edeb0ff12ac6c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DataSet</name>
    <filename>structExiv2_1_1DataSet.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>number_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>ae0fc1aca97dccadc825a0112d196cd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a4996dc18811843f754c0cb5b976e586b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a8b89d6e49ac3ad4fdc5e2f2138352a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>af62ed9aa5fcc9f6563c7c385d3739a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mandatory_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a0639d1bb04976221cd28ff6b6190cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>repeatable_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a820e53b3b6ed93bfa7d8a50f9f3d1851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>minbytes_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a1c36827d01f39d661c7f1683ce8da7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxbytes_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a4241e9ca17787260d8275783b7f6a4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>type_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>aac5e57bace39890e7a5a63367436ce26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>recordId_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a426dd3405de78233c4e323f2c1424382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>photoshop_</name>
      <anchorfile>structExiv2_1_1DataSet.html</anchorfile>
      <anchor>a330b945cf363899d0dd2f6ff9e054c8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::DataValue</name>
    <filename>classExiv2_1_1DataValue.html</filename>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DataValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a04544ad916e92a85140c2044abbff65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>adcb95dc5337a74cf7c1362461191628f</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a88b43dcc46f249f895ab80793785048a</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a8bf8784943a66203ae57ce478888b161</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a6f16f9afd0d1586dad93e7d0d94a6083</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a358d5612bc7850af5a6a1fd32acfecb5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>aa499e1e538225c9f19ffa5455bd28c3e</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a3f9599ce29bd4ef8c8ea44a12c40d590</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a7390fbaf0ed1cc0b811516bcec04ee2a</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a86056b1df3a03b1d9759cf98d77d2a68</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a1f1e4b1068c89d4fa85dc04ae4da73fb</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>adcb95dc5337a74cf7c1362461191628f</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DataValue.html</anchorfile>
      <anchor>a88b43dcc46f249f895ab80793785048a</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::DateValue::Date</name>
    <filename>structExiv2_1_1DateValue_1_1Date.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>year</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a04752d59b976cf190d1434f213948e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>month</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a22759f4cb5c8137777ee3b155adad7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>day</name>
      <anchorfile>structExiv2_1_1DateValue_1_1Date.html</anchorfile>
      <anchor>a3e1ac15589c5a534485fc02fe6cd2383</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::DateValue</name>
    <filename>classExiv2_1_1DateValue.html</filename>
    <base>Exiv2::Value</base>
    <class kind="struct">Exiv2::DateValue::Date</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DateValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a9f7a1db36c300afbcffc6eb4e200f0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ac64871fa22e0b3af3819838d65dcc7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>af337f8a13ff9656ff610398091d271cd</anchor>
      <arglist>(int year, int month, int day)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ad992bb22fece259ef5911306312fcdfa</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a0552a5a3b23f80d34e003e365ffdf250</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a7e3179d2ba51a87d13fc40d30f5f7569</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDate</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>adfb7f12fa25958b6d7ff3ca5912616ab</anchor>
      <arglist>(const Date &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a5f2f131eb49c17821aa08e7621abb22f</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Date &amp;</type>
      <name>getDate</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a085ba43c62d04e18e945bd9f06536822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>aed6db90d3c09da40c64a906e229e3cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a0b17e52aa6132183a6ecf28db7d83e43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a3c87dad9470e80b09b3aceaedac30e0b</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>af6369bd3efac133a9460657eab794eee</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a4f34bd127da129edb546b3fd2c47d3e0</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a01db7c46e9b2cca7344ed78f7f4e00d8</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ac64871fa22e0b3af3819838d65dcc7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>af337f8a13ff9656ff610398091d271cd</anchor>
      <arglist>(int year, int month, int day)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DateValue</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>ad992bb22fece259ef5911306312fcdfa</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a0552a5a3b23f80d34e003e365ffdf250</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>a7e3179d2ba51a87d13fc40d30f5f7569</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDate</name>
      <anchorfile>classExiv2_1_1DateValue.html</anchorfile>
      <anchor>adfb7f12fa25958b6d7ff3ca5912616ab</anchor>
      <arglist>(const Date &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Safe::Internal::enable_if</name>
    <filename>structSafe_1_1Internal_1_1enable__if.html</filename>
    <templarg>bool B</templarg>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Safe::Internal::enable_if&lt; true, T &gt;</name>
    <filename>structSafe_1_1Internal_1_1enable__if_3_01true_00_01T_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>Exiv2::EpsImage</name>
    <filename>classExiv2_1_1EpsImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>EpsImage</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a050ec1b2a0e77fed751710cb48ed4a6f</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a81c233111056fe125d0e9a74b240c8e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a193a1f80503e1ce4bd55ca2693c404c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>aeafe706988771ca4d94e3ccff3f5f5e9</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a947e396419b4a5ecacc427d9dc593d42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EpsImage</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>adb6b55055e1f3998bb470f65b8d862dc</anchor>
      <arglist>(const EpsImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>EpsImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a6f506c5943dc0511533d62e459d1c679</anchor>
      <arglist>(const EpsImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EpsImage</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a050ec1b2a0e77fed751710cb48ed4a6f</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a81c233111056fe125d0e9a74b240c8e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a193a1f80503e1ce4bd55ca2693c404c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>aeafe706988771ca4d94e3ccff3f5f5e9</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a947e396419b4a5ecacc427d9dc593d42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EpsImage</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>adb6b55055e1f3998bb470f65b8d862dc</anchor>
      <arglist>(const EpsImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>EpsImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1EpsImage.html</anchorfile>
      <anchor>a6f506c5943dc0511533d62e459d1c679</anchor>
      <arglist>(const EpsImage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifData</name>
    <filename>classExiv2_1_1ExifData.html</filename>
    <member kind="typedef">
      <type>ExifMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a02e2a2acb4cfeb0f7755c1a45f94106f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExifMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a2b8ac7a474d6527c0f3f6a0a9cebef77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a5c56fca27e6c2c3700d6138e8401f39e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a91d231cd1b9fefc311c5166e30ab66eb</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>ad809ad2a4689a15a899d1ddba954ae2b</anchor>
      <arglist>(const Exifdatum &amp;exifdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a13b24f0ee2a3f585cf714b9418b75edd</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a3d630c776ed6275671a637a1b21e2bd1</anchor>
      <arglist>(iterator beg, iterator end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1d8ccafb025f9d5800686903b6250f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9a52cead52e69e79252ffd7ee5bc8818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1495692d4d076247380549214cbf0cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a53bce2980ee060fc2da5fe6751f51db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9c15177b03489e3d4bb81e9acc1165fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9700e579aef8fd1845dd5da59b608773</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>ae43cdc4f82d4859a34ec1c1ad80461b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a8371ca1048b380848c5cf36c71cdd386</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a5e278c1accb2c04abe0c2e9d9a278f1f</anchor>
      <arglist>(const ExifKey &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a0627816364585c0579cba89e6e287d74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a4558d60feb5ecf6fa86316a0b87ce7e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a5c56fca27e6c2c3700d6138e8401f39e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a91d231cd1b9fefc311c5166e30ab66eb</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>ad809ad2a4689a15a899d1ddba954ae2b</anchor>
      <arglist>(const Exifdatum &amp;exifdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a13b24f0ee2a3f585cf714b9418b75edd</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a3d630c776ed6275671a637a1b21e2bd1</anchor>
      <arglist>(iterator beg, iterator end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1d8ccafb025f9d5800686903b6250f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9a52cead52e69e79252ffd7ee5bc8818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a1495692d4d076247380549214cbf0cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a53bce2980ee060fc2da5fe6751f51db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9c15177b03489e3d4bb81e9acc1165fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1ExifData.html</anchorfile>
      <anchor>a9700e579aef8fd1845dd5da59b608773</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Exifdatum</name>
    <filename>classExiv2_1_1Exifdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a87b020b65ee176932833047ab16188cf</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a742963f5494cc749bd90ad1b6d9e737f</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>afb9c07db099237373ac4093c935ee7df</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aab7eab62ed82f33e12cd8d88ffa9a5d9</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad29bb9ce35e4b7be8ea67d26738bed65</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a36d15c86f69d419135bbca96aace313f</anchor>
      <arglist>(const uint32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a7ba36dfab4b35ce63ddba8a709bc9a60</anchor>
      <arglist>(const URational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad57bfe66904fec5a5dee0ddb771dfc1f</anchor>
      <arglist>(const int16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8c2554feadba5d32c506eb3440906ef6</anchor>
      <arglist>(const int32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2a78b171519e1d8f2dd4fa81f850a9fc</anchor>
      <arglist>(const Rational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa27c6cb13826a42651d1d2e42c73f3bd</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9ea0ff4062fc55ed0c28a353a5affe4c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a330c7cb94f77c13c20f686e278870ee8</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a0f3b559fcc8f44e1a77efe4e15ed335c</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa229bf86f961689cf9051bc603a64c9e</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend Exifdatum &amp;</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>acd87a65fbba205c16f793fbcdede53b8</anchor>
      <arglist>(Exifdatum &amp;, const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a4b65fc91ad1cbfa93e44d8e9e328e634</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a631e79561e1229febd6968c41fe2532b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a13936fe6def6c49d11deedf5853cfe79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ab2f84b2e252b9a58a62d90a5c5c0a076</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>af2b2347890e27d78b4f4994d86582162</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad01ef45e9ad3dc8162acf688ffda8688</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ifdId</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a29e242cc06b84f1dd945221ef1a7bd82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ifdName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8c10496eb12ee11fccb552a22b17ee75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a5df370db03f9bb71341cc08be4b03779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a74c5b9566bfc14a85b5668e3ea4df44e</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8ff4faf6d84b664d1dc5160ea041ca45</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a55e614d7df026cf6fdd8d09aa79d724a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a7083256855c94e8226ec4efbf4f407a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a91c07e7e2e25d8197054b15bd5528282</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a280bce1eaf3efc53e0804095612db3b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a3e301afcf4e96ad7fb6888730ae4f21f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a5d61e86ebee53686f46b89f891e38787</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a13f957fe1fb81f679a36218ff266a097</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a0dad51df2ecc1e15eefbba0cb6877694</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9829fa1050f15d46f2940d3c90f39711</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>acfb2ebaa60014a5cefb50a07c273c75f</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Value::UniquePtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a130e648848d6657c3d35c82d765063c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa31dc1ea33b4782a5b9baa0b82f0a9d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8b56ed8dece3096aff1d3750cd7e1eb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2a2e59f107bd85527d5e3438c1f92c72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a87b020b65ee176932833047ab16188cf</anchor>
      <arglist>(const ExifKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a742963f5494cc749bd90ad1b6d9e737f</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Exifdatum</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>afb9c07db099237373ac4093c935ee7df</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aab7eab62ed82f33e12cd8d88ffa9a5d9</anchor>
      <arglist>(const Exifdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad29bb9ce35e4b7be8ea67d26738bed65</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a36d15c86f69d419135bbca96aace313f</anchor>
      <arglist>(const uint32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a7ba36dfab4b35ce63ddba8a709bc9a60</anchor>
      <arglist>(const URational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>ad57bfe66904fec5a5dee0ddb771dfc1f</anchor>
      <arglist>(const int16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a8c2554feadba5d32c506eb3440906ef6</anchor>
      <arglist>(const int32_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a2a78b171519e1d8f2dd4fa81f850a9fc</anchor>
      <arglist>(const Rational &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa27c6cb13826a42651d1d2e42c73f3bd</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Exifdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a9ea0ff4062fc55ed0c28a353a5affe4c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a330c7cb94f77c13c20f686e278870ee8</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>a0f3b559fcc8f44e1a77efe4e15ed335c</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Exifdatum.html</anchorfile>
      <anchor>aa229bf86f961689cf9051bc603a64c9e</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifKey</name>
    <filename>classExiv2_1_1ExifKey.html</filename>
    <base>Exiv2::Key</base>
    <class kind="struct">Exiv2::ExifKey::Impl</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ExifKey &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a543e39cba794baf2d7319d00dce8a3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a0874f4846012c3c0b67690ebb3fe9f9a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a8def2fe4560de6a5d470230df6539e47</anchor>
      <arglist>(uint16_t tag, const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3c8df38c1a6d76b1533d9b3ae32f083d</anchor>
      <arglist>(const TagInfo &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a60c87fdaf37922883f415a7ba244a968</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>aaa67947f3b7dae4f3c2eeb9501881275</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ExifKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3827a71a5647f0163660bdf6d3733fbb</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>adea5f86a54e3f9fd336fa3a2ec8bbc1b</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a62d9b99351824932e344d03c39c84537</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>afba3aaadf651f99552a9bbdfed8fd4d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a77c9706265a2e5b6cbc0c298f330baa3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ifdId</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a6329c33f72a927fdb0d02a6338a987bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a444c8b8be58395cb21021ddd4ed3923a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>ab93aee94f4f3f80aed662f3c28caa66e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>acdee933e534fdfde657ca5391a38ce71</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagDesc</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>ab427941784c3d68a5e9759a4dc69d51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>defaultTypeId</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a799c1d0301eef178c2d4b3b9a8efe560</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a4180f486ea44b118a020a0193d9acc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a0874f4846012c3c0b67690ebb3fe9f9a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a8def2fe4560de6a5d470230df6539e47</anchor>
      <arglist>(uint16_t tag, const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3c8df38c1a6d76b1533d9b3ae32f083d</anchor>
      <arglist>(const TagInfo &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a60c87fdaf37922883f415a7ba244a968</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExifKey</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>aaa67947f3b7dae4f3c2eeb9501881275</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ExifKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>a3827a71a5647f0163660bdf6d3733fbb</anchor>
      <arglist>(const ExifKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1ExifKey.html</anchorfile>
      <anchor>adea5f86a54e3f9fd336fa3a2ec8bbc1b</anchor>
      <arglist>(int idx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifParser</name>
    <filename>classExiv2_1_1ExifParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>a0a1965f73e968b9b9b26ba254585f0de</anchor>
      <arglist>(ExifData &amp;exifData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>aadab9ea4fdff24670cd8a973aa0690f8</anchor>
      <arglist>(Blob &amp;blob, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1ExifParser.html</anchorfile>
      <anchor>a2109bba0b2b538470d3f0c2f25dd471a</anchor>
      <arglist>(Blob &amp;blob, ByteOrder byteOrder, const ExifData &amp;exifData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifTags</name>
    <filename>classExiv2_1_1ExifTags.html</filename>
    <member kind="function">
      <type></type>
      <name>ExifTags</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a3ec0681a2664a527dadf377d86af5e30</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifTags</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a30118c4738343b432fe2923603393271</anchor>
      <arglist>(const ExifTags &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>ExifTags &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a532ab4a3d873c25d67a59657bd4a3777</anchor>
      <arglist>(const ExifTags &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GroupInfo *</type>
      <name>groupList</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a5d71adffd6eb252b4478181f4862b647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ab8daef767ee7ec0d126b46b3b9104536</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>taglist</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ac8741d3b5757722e5fdbf702463293f9</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>taglist</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a4e49849331e9bbc14b670d6638a4d7eb</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>sectionName</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ab1f99d9f94c3953e0dd29da28cf2df0b</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>defaultCount</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a4c7e1ea79e5e63a559b7dddf164895c8</anchor>
      <arglist>(const ExifKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ifdName</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a67f47ab2677def885dff551f41e0a6df</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMakerGroup</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>ae49f3872a2b0f12a0bebf2ce5ab82cb4</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isExifGroup</name>
      <anchorfile>classExiv2_1_1ExifTags.html</anchorfile>
      <anchor>a3ad909719ca3aeadb1d61bedf4cb540a</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifThumb</name>
    <filename>classExiv2_1_1ExifThumb.html</filename>
    <base>Exiv2::ExifThumbC</base>
    <member kind="function">
      <type></type>
      <name>ExifThumb</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a2c81742f577443a41c1b184406093c68</anchor>
      <arglist>(ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a90e5155ba60dae3af4066f80464c788d</anchor>
      <arglist>(const std::string &amp;path, URational xres, URational yres, uint16_t unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>aa29789f0a658d53066e0b55bb2b1acb2</anchor>
      <arglist>(const byte *buf, long size, URational xres, URational yres, uint16_t unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>af5578e157a1e60b295d703aecec242b8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJpegThumbnail</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>af8cf3725b3d9d6fa08055ea4809bf77f</anchor>
      <arglist>(const byte *buf, long size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a5239338ade638043bf66337fd9d4e3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifThumb</name>
      <anchorfile>classExiv2_1_1ExifThumb.html</anchorfile>
      <anchor>a2c81742f577443a41c1b184406093c68</anchor>
      <arglist>(ExifData &amp;exifData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExifThumbC</name>
    <filename>classExiv2_1_1ExifThumbC.html</filename>
    <member kind="function">
      <type></type>
      <name>ExifThumbC</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a47c5170242743d1dfd32a6d03527f7b7</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a90714cf1e4ba74caf94a09db9ca6d6c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>aa97f0111eb9e810548740fe7bf263335</anchor>
      <arglist>(const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>ae6c4c44ff4dc4dfb669aca9e0c7ca8e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>extension</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a789a18017988a735e846239336c1e24b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExifThumbC</name>
      <anchorfile>classExiv2_1_1ExifThumbC.html</anchorfile>
      <anchor>a47c5170242743d1dfd32a6d03527f7b7</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ExvImage</name>
    <filename>classExiv2_1_1ExvImage.html</filename>
    <base>Exiv2::JpegBase</base>
    <member kind="function">
      <type></type>
      <name>ExvImage</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ad722296e0db12ae8fb0095bf19e74d4b</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EXIV2API bool</type>
      <name>isExvType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>a5e9a3ffa89d4c0f6332aa12460f948be</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>adae941436971ed314789bd44a93c60de</anchor>
      <arglist>(BasicIo &amp;outIo) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExvImage</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ad722296e0db12ae8fb0095bf19e74d4b</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>ad0261615823a11e27a5a23187f9b3e04</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExvImage</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>aea69277ff08c9a163d0ea7be40cfb3de</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExvImage</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>a95d09ba2592bc12e838a4d7153eae9ab</anchor>
      <arglist>(const ExvImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>ExvImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>a82d6def07d4c46e6e3f875938e23a9d2</anchor>
      <arglist>(const ExvImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1ExvImage.html</anchorfile>
      <anchor>abd0aa1ad1a7a5eac42255cd02c0dacba</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::FileIo</name>
    <filename>classExiv2_1_1FileIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::FileIo::Impl</class>
    <member kind="function">
      <type></type>
      <name>FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a940ebd4fc3630f31c59adf99a52824c3</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a3cbb57a65efcbeb1da6d68d2c7e21930</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a1793ddca7f8c94619ceae7a127da73c2</anchor>
      <arglist>(const std::string &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a53260058b2cf3f45c2dd840eb8c03d40</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a8768d25ac1b81c8398631a26a85624b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a5496aea34990c9ba9492b35121082427</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a7dde9b3b4d58419c3069963780985bbf</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>adcb9d9605f527b6c589c1c525c58795a</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>af5fdda6e4277481ab1f8dc0e613b7775</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a707699903db6e568984c76bc74ed5ebf</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ac93cf26909a4bb6fd473190fecd6f430</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>aedbd2758720b47f872f4943b3b1a6f41</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ae48f8ba210f85ff1c9c27587166f83c5</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ad9ae6d937eb20bc2c0bb000b58ddf266</anchor>
      <arglist>(bool isWriteable=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a740f28dc8ed7db421a174119298703c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPath</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a000c027e3e75c2192d6ef537ccf6f6ec</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a27ec782684c274a01a574c7932f9268a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ac1a8e9b675e65d004856a8df69a0bc37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a4cf89df7ecd6ed71dfcefd3e99354c61</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a7cc57ecb1d01960746e7e285b8db00a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a8356074dc2b78f0a10178d13909f4106</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>aa5c1751acdd51c1d35ff295bba5186b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populateFakeData</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a6ad3f8efcc17dbf5004427cada9a2957</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a11f6a07801ed07eaff57cc8570c239c4</anchor>
      <arglist>(FileIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>FileIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>aaa664467b4047d1c751cb642234d3527</anchor>
      <arglist>(const FileIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a940ebd4fc3630f31c59adf99a52824c3</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileIo</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a3cbb57a65efcbeb1da6d68d2c7e21930</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a1793ddca7f8c94619ceae7a127da73c2</anchor>
      <arglist>(const std::string &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a53260058b2cf3f45c2dd840eb8c03d40</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a8768d25ac1b81c8398631a26a85624b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a5496aea34990c9ba9492b35121082427</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a7dde9b3b4d58419c3069963780985bbf</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>adcb9d9605f527b6c589c1c525c58795a</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>af5fdda6e4277481ab1f8dc0e613b7775</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a707699903db6e568984c76bc74ed5ebf</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ac93cf26909a4bb6fd473190fecd6f430</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>aedbd2758720b47f872f4943b3b1a6f41</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ae48f8ba210f85ff1c9c27587166f83c5</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>ad9ae6d937eb20bc2c0bb000b58ddf266</anchor>
      <arglist>(bool isWriteable=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a740f28dc8ed7db421a174119298703c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPath</name>
      <anchorfile>classExiv2_1_1FileIo.html</anchorfile>
      <anchor>a000c027e3e75c2192d6ef537ccf6f6ec</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FindExifdatum</name>
    <filename>classExiv2_1_1Internal_1_1FindExifdatum.html</filename>
    <member kind="function">
      <type></type>
      <name>FindExifdatum</name>
      <anchorfile>classExiv2_1_1Internal_1_1FindExifdatum.html</anchorfile>
      <anchor>a24aa8db73317e338856c0009dd47ee9a</anchor>
      <arglist>(Exiv2::Internal::IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classExiv2_1_1Internal_1_1FindExifdatum.html</anchorfile>
      <anchor>acedcaf96d30fa640d2e288829f16779e</anchor>
      <arglist>(const Exiv2::Exifdatum &amp;md) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FujiMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1FujiMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMakerNote.html</anchorfile>
      <anchor>ad34e3281ad11e91a4c94f4ee35e24c70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::FujiMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1FujiMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a6f66491820ae3a8d1ed7168bb9285532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a361bc9acb18d99c55de49c6561df3cb7</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a8852ed4c3f3eac01282a5993b62b30ea</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>ae3bc088516139f43e5fc3ff81b97a837</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a8b826181b39919d7b40a01488022006d</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a1b28a9bcae0d21a2755cf385ddd01d8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>ac6e6cff1918111306903b12235fe7739</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a532cfcaca12e50a35b97f7888ecf74fb</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>add7e100a6a4c11a5112b5f4ccdbfe6fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a6f66491820ae3a8d1ed7168bb9285532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FujiMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a361bc9acb18d99c55de49c6561df3cb7</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1FujiMnHeader.html</anchorfile>
      <anchor>a8852ed4c3f3eac01282a5993b62b30ea</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::GifImage</name>
    <filename>classExiv2_1_1GifImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>GifImage</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>abeb4e51f96d0a866885dae95c66cdd5c</anchor>
      <arglist>(const GifImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>GifImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>aa6577d9c5847d4310b49fcad5892ed8a</anchor>
      <arglist>(const GifImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GifImage</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ae0a4c09a4c5e097b4165cb913f13d195</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a49e9942b01a3584ba20fede3bc11005a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ad6cbaf44827ae0f29f87636913b1cf88</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a971ce55672a2363f0171a35d66e3b438</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a30e528b03d068b51cde2a1e250db3650</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>adc5a1aa0c134e91a6260cbe970426905</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a561e21eae37a325a32040330fb4dd044</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GifImage</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>abeb4e51f96d0a866885dae95c66cdd5c</anchor>
      <arglist>(const GifImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>GifImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>aa6577d9c5847d4310b49fcad5892ed8a</anchor>
      <arglist>(const GifImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GifImage</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ae0a4c09a4c5e097b4165cb913f13d195</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a49e9942b01a3584ba20fede3bc11005a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>ad6cbaf44827ae0f29f87636913b1cf88</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a971ce55672a2363f0171a35d66e3b438</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a30e528b03d068b51cde2a1e250db3650</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>adc5a1aa0c134e91a6260cbe970426905</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1GifImage.html</anchorfile>
      <anchor>a561e21eae37a325a32040330fb4dd044</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::GroupInfo</name>
    <filename>structExiv2_1_1GroupInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a1f3856c6802d1275937eb6f2ebe83614</anchor>
      <arglist>(int ifdId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>aa7e04508af881e1b1878d9a8626279af</anchor>
      <arglist>(const GroupName &amp;groupName) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a16f5047a1e6d5e49e212cbbbd69e554e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ifdName_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a53e480f2a6c880394ad3f41b5a8b3d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>groupName_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a8906db17b5b163382647c998512c158a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TagListFct</type>
      <name>tagList_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a4a1b4b61eecebb651ae415e867c98c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1GroupInfo.html</anchorfile>
      <anchor>a1800290b7f417c05ab921730e6f01657</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::HttpIo::HttpImpl</name>
    <filename>classExiv2_1_1HttpIo_1_1HttpImpl.html</filename>
    <base>Exiv2::RemoteIo::Impl</base>
    <member kind="function">
      <type></type>
      <name>HttpImpl</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a6c4eac95e1b4ade3dddb5fb423d0ac8b</anchor>
      <arglist>(const std::string &amp;url, size_t blockSize)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getFileLength</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a64e7be6dc91a08cd92977b7fe5371c1d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDataByRange</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>aa6cbccf96c5a6aa7f4b86852b2b5ff4d</anchor>
      <arglist>(long lowBlock, long highBlock, std::string &amp;response) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRemote</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a43150510dca6849d3f2330e20ac6f9c6</anchor>
      <arglist>(const byte *data, size_t size, long from, long to) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpImpl</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a052fdf9c6d2a93374381ef67a5ef93dc</anchor>
      <arglist>(const HttpImpl &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>HttpImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>a406bce5e0952f63de0b1113f1f29d9ad</anchor>
      <arglist>(const HttpImpl &amp;rhs)=delete</arglist>
    </member>
    <member kind="variable">
      <type>Exiv2::Uri</type>
      <name>hostInfo_</name>
      <anchorfile>classExiv2_1_1HttpIo_1_1HttpImpl.html</anchorfile>
      <anchor>adc3b9d6d4800c566f6007773c4c6b7da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::HttpIo</name>
    <filename>classExiv2_1_1HttpIo.html</filename>
    <base>Exiv2::RemoteIo</base>
    <class kind="class">Exiv2::HttpIo::HttpImpl</class>
    <member kind="function">
      <type></type>
      <name>HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>aa6eda32636069f5ecba554fc25213ec6</anchor>
      <arglist>(const std::string &amp;url, size_t blockSize=1024)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>a4c166fd9ebf85551642440dbb9730094</anchor>
      <arglist>(HttpIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>HttpIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>a9a862b58d4d894fb12d49489cce67318</anchor>
      <arglist>(const HttpIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>aa6eda32636069f5ecba554fc25213ec6</anchor>
      <arglist>(const std::string &amp;url, size_t blockSize=1024)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpIo</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>a4c166fd9ebf85551642440dbb9730094</anchor>
      <arglist>(HttpIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>HttpIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1HttpIo.html</anchorfile>
      <anchor>a9a862b58d4d894fb12d49489cce67318</anchor>
      <arglist>(const HttpIo &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Iloc</name>
    <filename>structExiv2_1_1Iloc.html</filename>
  </compound>
  <compound kind="class">
    <name>Exiv2::Image</name>
    <filename>classExiv2_1_1Image.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Image &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0fc4b4462939c6b010bbd8dd10b8e6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ad904d646ce69598bfdee04e5fbb29b64</anchor>
      <arglist>(int imageType, uint16_t supportedMetadata, BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9aeee27240bd9dc4863e4d574621e705</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aaada24ce9c2d86fa8c43454f123aa4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5b9b0050e69f898b1226e7655f0c799f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5c517b500586613595e2e1b62601657a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a4ae9df6e6697c84ac3dae3a6bdc3e542</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a023e5b75899394692254e66b73ffc696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ExifData &amp;</type>
      <name>exifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afa7e0c07195ce91d0fcd5388464e6379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IptcData &amp;</type>
      <name>iptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0c42e4669d2860d7cb237d3092693937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const XmpData &amp;</type>
      <name>xmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a181a02c0e9121f48dbaff73def9033f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>comment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a61a73ba9ad90bf26f8ed85f4bd93a5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>xmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afcbe1c4739ca4ba6ac2d32fdf023fb3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo &amp;</type>
      <name>io</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8b45124ca3d6839bb644b5f6dacb71e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccessMode</type>
      <name>checkMode</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9044deeee647a5c646d90d4285ecde66</anchor>
      <arglist>(MetadataId metadataId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a3393e922bf59ef1f535ab7dd41db7f92</anchor>
      <arglist>(MetadataId metadataId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeXmpFromPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ae71a3de5f6782e09464ae152944969a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NativePreviewList &amp;</type>
      <name>nativePreviews</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afca3179b0fe912ccd808fff7d2e7e2d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeSupported</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a48deb806a67146e7c91ff206fbc4d106</anchor>
      <arglist>(int imageType, uint16_t supportedMetadata)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>imageType</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9631075925ed92077b247e53a63fae0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BasicIo::UniquePtr</type>
      <name>io_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a6d595b6a0a92ff7c64236bdbc1306426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExifData</type>
      <name>exifData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aa1a8a72f1faf1b49a980a5050be8f8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IptcData</type>
      <name>iptcData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ac613777e529af8d8c421cf0138234d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmpData</type>
      <name>xmpData_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afd748b186fc5d731e7943ab38b718168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataBuf</type>
      <name>iccProfile_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afbb37d01478a74bfabf19ad920c81a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>comment_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ad908536e7406677e193f6fa75e53d3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>xmpPacket_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ab62dc4efdf1c3ffe94443588e7d7b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pixelWidth_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a114180b5449669339b0cbe3f4078a915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pixelHeight_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a093efd59b753173a50a5c3a2ab881878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NativePreviewList</type>
      <name>nativePreviews_</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a7fe1e6f41e5e2e99ce1560f0b5ad36b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a2ababaa29f2f711ee34c6d6821f9fd00</anchor>
      <arglist>(const Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a6dfb4be23dd3448b31aa36f8deae2504</anchor>
      <arglist>(const Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::string &amp;</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a64d497c26c3513b4ca3443f1b16df583</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a15b057b0357371869e77dac84192670b</anchor>
      <arglist>(uint16_t tag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ad904d646ce69598bfdee04e5fbb29b64</anchor>
      <arglist>(int imageType, uint16_t supportedMetadata, BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9aeee27240bd9dc4863e4d574621e705</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8ef49892a2e88c01187f4f13d4800ac1</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option=kpsNone, int depth=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a198b8d5924d6441748aa162130c96a5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af9f7e86aac2f656473e456e16550ab58</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a50787e6b2b88ab4844ed09a6d32d91cd</anchor>
      <arglist>(const ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearExifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a67cf025df937da851e1f587489c5e6a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a19bfac3c9245ca5c4c471e241bd33606</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearIptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8bb36c698ce3ee89654fe8177c8e962a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8c6aff4701c23158c2d79598c26c18ad</anchor>
      <arglist>(const std::string &amp;xmpPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearXmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a797b7909cb55019289f5f1a7fa9086cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5fff5a898432265e656457ac8f7f666b</anchor>
      <arglist>(const XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearXmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a910871299f87e8c075e5c977a37dd943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af3c4746e941aa39bb7762b7b7da108a8</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearComment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a62891a2c703c2c546e22605d01b1fdab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIccProfile</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a7828a40c7f27e63814dcf3ff5060f903</anchor>
      <arglist>(DataBuf &amp;&amp;iccProfile, bool bTestValid=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearIccProfile</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a17311ef39f0bb2bba68722d328033d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>iccProfileDefined</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>abce46df193c9796de47c31c863da941c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DataBuf &amp;</type>
      <name>iccProfile</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a6f09e532af94b0a7b9b9f407352554cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5374f217a84fadfe4ba97bebf00ae2b3</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afd9153e3fc83f31b4d63b56d530688cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExifData &amp;</type>
      <name>exifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>acc0dd47f87be88458e1c6e18b463a536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IptcData &amp;</type>
      <name>iptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ac68e4cb2fc5eb685a56ea06333fe0e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual XmpData &amp;</type>
      <name>xmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aade24695d8ac332f0402dcb10d601382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>xmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a356eca19190afb6c6cc2fa02aa936cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXmpFromPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ab64199a4be87a12f81bd111ce4019dfc</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>af1533e0b8d24c49974d0dc59911c330a</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTiffStructure</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0799da0ceb675d40a4ad75eba07eb37d</anchor>
      <arglist>(BasicIo &amp;io, std::ostream &amp;out, PrintStructureOption option, int depth, size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printIFDStructure</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a6304ef637b6f71059b12c06f65b26e21</anchor>
      <arglist>(BasicIo &amp;io, std::ostream &amp;out, Exiv2::PrintStructureOption option, uint32_t start, bool bSwap, char c, int depth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBigEndianPlatform</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a43dbe6bedef6b0b0794dd21f5c3ec555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLittleEndianPlatform</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ab6d5583279f48f1215984bd2173bfbe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>aaada24ce9c2d86fa8c43454f123aa4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5b9b0050e69f898b1226e7655f0c799f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a5c517b500586613595e2e1b62601657a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a4ae9df6e6697c84ac3dae3a6bdc3e542</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a023e5b75899394692254e66b73ffc696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ExifData &amp;</type>
      <name>exifData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afa7e0c07195ce91d0fcd5388464e6379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IptcData &amp;</type>
      <name>iptcData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a0c42e4669d2860d7cb237d3092693937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const XmpData &amp;</type>
      <name>xmpData</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a181a02c0e9121f48dbaff73def9033f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>comment</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a61a73ba9ad90bf26f8ed85f4bd93a5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>xmpPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afcbe1c4739ca4ba6ac2d32fdf023fb3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BasicIo &amp;</type>
      <name>io</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a8b45124ca3d6839bb644b5f6dacb71e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccessMode</type>
      <name>checkMode</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9044deeee647a5c646d90d4285ecde66</anchor>
      <arglist>(MetadataId metadataId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsMetadata</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a3393e922bf59ef1f535ab7dd41db7f92</anchor>
      <arglist>(MetadataId metadataId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeXmpFromPacket</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>ae71a3de5f6782e09464ae152944969a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NativePreviewList &amp;</type>
      <name>nativePreviews</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>afca3179b0fe912ccd808fff7d2e7e2d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeSupported</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a48deb806a67146e7c91ff206fbc4d106</anchor>
      <arglist>(int imageType, uint16_t supportedMetadata)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>imageType</name>
      <anchorfile>classExiv2_1_1Image.html</anchorfile>
      <anchor>a9631075925ed92077b247e53a63fae0c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ImageFactory</name>
    <filename>classExiv2_1_1ImageFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>ImageFactory</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a1c88cc6db59a55a0c1222723f68828c2</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFactory</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a138eafaa54b33f2ab9177d2cb4db7ee4</anchor>
      <arglist>(const ImageFactory &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasicIo::UniquePtr</type>
      <name>createIo</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a97cfbf84d6db2c302b13a56ab46afb6d</anchor>
      <arglist>(const std::string &amp;path, bool useCurl=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a3133e16ff4725e79b2ca194372d6aed6</anchor>
      <arglist>(const std::string &amp;path, bool useCurl=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a5a4a8f9546981dd5eae1ee5c571f13dc</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a6452f98c95de933ced20272d3329fa3e</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a8325f32c4a5a59fe49a82ccd10bbd969</anchor>
      <arglist>(int type, const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a65d2f4dd1a71c0077dccf7e301eb10c4</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image::UniquePtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>abeb9dc705ba489584f8c803363d03a42</anchor>
      <arglist>(int type, BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a93387c43470e70c700e1addb92907c40</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a5b0f62579f4a9945f525f952cb86619e</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>abd5d3ab76420ec7db45cc2105f4e5907</anchor>
      <arglist>(BasicIo &amp;io)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AccessMode</type>
      <name>checkMode</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a2953661dfbe37cf916e4fdeb5ef5c519</anchor>
      <arglist>(int type, MetadataId metadataId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkType</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>af9aa6dad41f17eb012d8d18e291d19f9</anchor>
      <arglist>(int type, BasicIo &amp;io, bool advance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFactory</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a1c88cc6db59a55a0c1222723f68828c2</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFactory</name>
      <anchorfile>classExiv2_1_1ImageFactory.html</anchorfile>
      <anchor>a138eafaa54b33f2ab9177d2cb4db7ee4</anchor>
      <arglist>(const ImageFactory &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::ExifKey::Impl</name>
    <filename>structExiv2_1_1ExifKey_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ab192adc609ebf97eb90c73bc0287191a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a950fbe85d36bc8677619c12f531e61fc</anchor>
      <arglist>(uint16_t tag, IfdId ifdId, const TagInfo *tagInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decomposeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ae806dc4eb7794447f5889c2883b37003</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>familyName_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a98dbc56ec67cfd8b3aa86b333c477663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TagInfo *</type>
      <name>tagInfo_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ad12223b387627eb84e6cccc1af9f2d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>acd643ac92a5c640414b747c2ac8cffc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a7125aa50441d563cc0184259b1174e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>abdfed8384444ea9bab3df604b6e4764f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>groupName_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a888861e3e239676cea5afd6e7429fb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key_</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a19ad969958fdabf840f540bd53ede686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a3d3efd50448edfcc04c1a82ae62b7155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ab192adc609ebf97eb90c73bc0287191a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>a950fbe85d36bc8677619c12f531e61fc</anchor>
      <arglist>(uint16_t tag, IfdId ifdId, const TagInfo *tagInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decomposeKey</name>
      <anchorfile>structExiv2_1_1ExifKey_1_1Impl.html</anchorfile>
      <anchor>ae806dc4eb7794447f5889c2883b37003</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::FileIo::Impl</name>
    <filename>classExiv2_1_1FileIo_1_1Impl.html</filename>
    <class kind="struct">Exiv2::FileIo::Impl::StructStat</class>
    <member kind="enumeration">
      <type></type>
      <name>OpMode</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a393f5d1d8ba1ef27f78661a2b2c1c8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>af700f746a64b093c30ace7663c69fa05</anchor>
      <arglist>(std::string path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>switchMode</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a7be38a2e6a5da155aa1d4b6420d15912</anchor>
      <arglist>(OpMode opMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stat</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ad920d7628496279bb7f7e69b0f9e77cf</anchor>
      <arglist>(StructStat &amp;buf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyXattrFrom</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ae6940aa18a9073470fea5fdc754c48e3</anchor>
      <arglist>(const FileIo &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a60ce03c9b176b34ad628ecf2c6cf9a00</anchor>
      <arglist>(const Impl &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a3f8c2e137a1f11a6334924572b59d10f</anchor>
      <arglist>(const Impl &amp;rhs)=delete</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a5d7c63a21b4d7848e003df9dc4d923f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>openMode_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a2aa93061bb685b73df97da7b011bde7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>fp_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a3a87e5a388cea50de410261fa7d0f53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpMode</type>
      <name>opMode_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ae6ea0ef6708d70983bda651a555ccc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>pMappedArea_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a9db9e6ec78e0ed12c1829c8e941bf2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mappedLength_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>aea9c770a4ba090737b31e7b7b00933c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>ada7659603d39613151d4d132cccdfdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isWriteable_</name>
      <anchorfile>classExiv2_1_1FileIo_1_1Impl.html</anchorfile>
      <anchor>a8987d346a621d765a5689da5a279f9a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MemIo::Impl</name>
    <filename>classExiv2_1_1MemIo_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a2ac3187818357decc9b3c24a4111ea39</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>ae8c85effb3a1b2fce8d81e7950be45a9</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a6f8d94b48bb1247befc376c77192eb37</anchor>
      <arglist>(long wcount)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>abf08368e431acfa92bcdd53bc01e906c</anchor>
      <arglist>(const Impl &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>aab86454c8d9106fd508d2838a89186f2</anchor>
      <arglist>(const Impl &amp;rhs)=delete</arglist>
    </member>
    <member kind="variable">
      <type>byte *</type>
      <name>data_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a10b98f28aa6f683b443d92cc97e5a759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>idx_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a724103eb1764b20a4ff46499b6b0b176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>size_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a8e86d7b469b1b94b272df23e85e3f055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>sizeAlloced_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a2cdcd4eed1f4fe98618b1d64800b0d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a343d3ab32885c6a4abe937452d86ac04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eof_</name>
      <anchorfile>classExiv2_1_1MemIo_1_1Impl.html</anchorfile>
      <anchor>a099926553b3155d0e6ee8db863e95131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RemoteIo::Impl</name>
    <filename>classExiv2_1_1RemoteIo_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>ad43207b9089d018ae9d5acdd833f9b94</anchor>
      <arglist>(const std::string &amp;url, size_t blockSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Impl</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a5793149ca0c3f0b02b6e32c0709ddf61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getFileLength</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a53c781ce3d168a906443a3be47ccf675</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDataByRange</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a5fe40c759b2512fb5f3bc734ec7a9320</anchor>
      <arglist>(long lowBlock, long highBlock, std::string &amp;response)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeRemote</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a18c42e3b5ae87c3bb347569af863a42a</anchor>
      <arglist>(const byte *data, size_t size, long from, long to)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>populateBlocks</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a0a6d7e7e64d2213bcaf9d5bb4217aa18</anchor>
      <arglist>(size_t lowBlock, size_t highBlock)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>ae30113fd238d5147ccbc1d301a5b5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blockSize_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>ada2804a9cb82548b7fe0454688f9bbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BlockMap *</type>
      <name>blocksMap_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a74c885a98054c0177ac6afefdb655e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>af4bb99ed17926a8c7f0a3fb2ca70c3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>idx_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a31088e31234c09f55e1acc11bf206e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isMalloced_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a939103a72eb0740b172aa4f3ef0dcd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eof_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>aa9a9664429368feab8ac75529063b30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Protocol</type>
      <name>protocol_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>a133181f3b4048902b4d1837e151f6307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>totalRead_</name>
      <anchorfile>classExiv2_1_1RemoteIo_1_1Impl.html</anchorfile>
      <anchor>afb1c885fb46d649fe308f58b05c4ef5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Xmpdatum::Impl</name>
    <filename>structExiv2_1_1Xmpdatum_1_1Impl.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>af7c3b3febfd3b16e9dbb28dda364b274</anchor>
      <arglist>(const XmpKey &amp;key, const Value *pValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>a1be31ac7b8a49cbf934a01a3683e9696</anchor>
      <arglist>(const Impl &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>operator=</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>a17a7f80194e7b7eb2a6a7fee34bac68b</anchor>
      <arglist>(const Impl &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>XmpKey::UniquePtr</type>
      <name>key_</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>af4b3a88b142f7d3db5372ab0c56eabcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value::UniquePtr</type>
      <name>value_</name>
      <anchorfile>structExiv2_1_1Xmpdatum_1_1Impl.html</anchorfile>
      <anchor>a8403b2f3e01bb1fc15baa98146707428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::INIReader</name>
    <filename>classExiv2_1_1INIReader.html</filename>
    <member kind="function">
      <type></type>
      <name>INIReader</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>a303dc5352470dba2af23719d40f4298d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseError</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>a7527150689e2dbdc7388306c00d5e039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Get</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>a6439b80e41a73cf473f6defc2ba06cd1</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;name, const std::string &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>GetInteger</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>ab10cead604ef78b193b6359e08816001</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;name, long default_value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetReal</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>a5569de279168047f7541296f7a76773e</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;name, double default_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetBoolean</name>
      <anchorfile>classExiv2_1_1INIReader.html</anchorfile>
      <anchor>ad092745d2b36f3cf496fe5013f7ca7f6</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;name, bool default_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IoCloser</name>
    <filename>classExiv2_1_1IoCloser.html</filename>
    <member kind="function">
      <type></type>
      <name>IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a72accf64d9ef3d84869f046709ce3a46</anchor>
      <arglist>(BasicIo &amp;bio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a906eb8fa1bcef3b86397c367d8731af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BasicIo &amp;</type>
      <name>bio_</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>aefe0b0d7b2bf97cffac29fa5a388e75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>abf6fd92de40b9371b0df6e52ba63016a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>af632a9f7e4f804fbbff367d608e2034d</anchor>
      <arglist>(const IoCloser &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IoCloser &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a1821e689a0111a9c4b79a1a3200fbfdb</anchor>
      <arglist>(const IoCloser &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a72accf64d9ef3d84869f046709ce3a46</anchor>
      <arglist>(BasicIo &amp;bio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IoCloser</name>
      <anchorfile>classExiv2_1_1IoCloser.html</anchorfile>
      <anchor>a906eb8fa1bcef3b86397c367d8731af0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::IoWrapper</name>
    <filename>classExiv2_1_1Internal_1_1IoWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>IoWrapper</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a4237c7a12faecebeb424cbc36caff995</anchor>
      <arglist>(BasicIo &amp;io, const byte *pHeader, long size, OffsetWriter *pow)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a6fabb0585e55152b54f60c56e837c672</anchor>
      <arglist>(const byte *pData, long wcount)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a248b4747439e4bcbe9eabce1906ef48b</anchor>
      <arglist>(byte data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a5d82c353c309c968a6daa5169a8a7e4a</anchor>
      <arglist>(int id, uint32_t target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoWrapper</name>
      <anchorfile>classExiv2_1_1Internal_1_1IoWrapper.html</anchorfile>
      <anchor>a4237c7a12faecebeb424cbc36caff995</anchor>
      <arglist>(BasicIo &amp;io, const byte *pHeader, long size, OffsetWriter *pow)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcData</name>
    <filename>classExiv2_1_1IptcData.html</filename>
    <member kind="typedef">
      <type>IptcMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a0d53776cd2f36e63fff78c8f142a7caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IptcMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a683257be46a446865ca5f4e81b8e88d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ab2b58c6eda595eee09ac5f61e93070f7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6c209bd981fc5073ae5effaa56d07310</anchor>
      <arglist>(const IptcKey &amp;key, Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a2d843afb1f9c0978b8845c741148ed27</anchor>
      <arglist>(const Iptcdatum &amp;iptcdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a56782cedd228be37bf5d1c3df77b6435</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>aee7392b0585be4916c56f08e3c9e7be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3db828436ee87c6d4d1d4a450b0c3c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a622ff967f192b898e05920dfbc63aabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a03385c128b29d262ade837093fddc0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6753e8a713ab2b42a3bdc7b3d9eab401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ae53fdfabd295de29b971e51cd1fa9347</anchor>
      <arglist>(const IptcKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findId</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3218fa1e8cc6a8f6c75982f3fd554507</anchor>
      <arglist>(uint16_t dataset, uint16_t record=IptcDataSets::application2)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a157b224f81c7fab2b6ac7ca5d3af7044</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a655cd7ff549545d361355b36f7203a0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>aaf86e195ddf904705c0906b674287c1a</anchor>
      <arglist>(const IptcKey &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findId</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>acd1eb1344cd130c204d6c489f909ec73</anchor>
      <arglist>(uint16_t dataset, uint16_t record=IptcDataSets::application2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a4c8b0bc3d09b8dc0a97ed0fd26370c7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a83946a7f792cd416714c4c19b2c57176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a31c08ff558abdf89249a486c30e99406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>detectCharset</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ad3e8b7f41fce8884e7435046ad0166bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a4074a0ba183dcdbfe41fe21e5419fb05</anchor>
      <arglist>(std::ostream &amp;out, const Slice&lt; byte * &gt; &amp;bytes, uint32_t depth)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ab2b58c6eda595eee09ac5f61e93070f7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6c209bd981fc5073ae5effaa56d07310</anchor>
      <arglist>(const IptcKey &amp;key, Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a2d843afb1f9c0978b8845c741148ed27</anchor>
      <arglist>(const Iptcdatum &amp;iptcdatum)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a56782cedd228be37bf5d1c3df77b6435</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>aee7392b0585be4916c56f08e3c9e7be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3db828436ee87c6d4d1d4a450b0c3c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByTag</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a622ff967f192b898e05920dfbc63aabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a03385c128b29d262ade837093fddc0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a6753e8a713ab2b42a3bdc7b3d9eab401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>ae53fdfabd295de29b971e51cd1fa9347</anchor>
      <arglist>(const IptcKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findId</name>
      <anchorfile>classExiv2_1_1IptcData.html</anchorfile>
      <anchor>a3218fa1e8cc6a8f6c75982f3fd554507</anchor>
      <arglist>(uint16_t dataset, uint16_t record=IptcDataSets::application2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcDataSets</name>
    <filename>classExiv2_1_1IptcDataSets.html</filename>
    <member kind="function">
      <type></type>
      <name>IptcDataSets</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>ab6bd733f6656589d7282ccb6360efb0f</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcDataSets</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a1d35c243b8a3fb45b5142efb6926c5b0</anchor>
      <arglist>(const IptcDataSets &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>IptcDataSets &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a62b15a6df9f0113f363b8b23b1884353</anchor>
      <arglist>(const IptcDataSets &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>dataSetName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>acf9da9675f32e0aa7ed1ba7477b5fa0f</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetTitle</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>adb1e57213642811fbe364e622a39430b</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetDesc</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>abb3e47ab12bde848111a228fcd4b8dc2</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>dataSetPsName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a7775528ce0f2b50c062c90bc41bd5899</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>dataSetRepeatable</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>aec65e226142ca1cc42d500d2975339f7</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>dataSet</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>ae870d879dd1480ea7df3deb00d046b96</anchor>
      <arglist>(const std::string &amp;dataSetName, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>dataSetType</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>ab2cecf57fcd655b8c497a68ce39bfa38</anchor>
      <arglist>(uint16_t number, uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a3b8106845031d532466282d26f1dd9fb</anchor>
      <arglist>(uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>recordDesc</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a451b18150c3628d3761fc08950cf1975</anchor>
      <arglist>(uint16_t recordId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>recordId</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a36ca205824a1b8f8c251e4150de1a9a9</anchor>
      <arglist>(const std::string &amp;recordName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DataSet *</type>
      <name>envelopeRecordList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a2eb656d824099840e99692eb9817f9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DataSet *</type>
      <name>application2RecordList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>aad8d636d503f49c914007b2a3727ccb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dataSetList</name>
      <anchorfile>classExiv2_1_1IptcDataSets.html</anchorfile>
      <anchor>a234bd6223e95d18aa67fbc357b7a0e9b</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Iptcdatum</name>
    <filename>classExiv2_1_1Iptcdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>afd7609003de423f9ffb325855a235557</anchor>
      <arglist>(const IptcKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a9b4348e0e20b4c32e6eac8462596c2f7</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2fc3c635f3a89dca462a0ec80fb3d1ca</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a884f0bbe277f0211ef2acd06bd397466</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a548fd455cc034cc0a65c0a9eaa41011e</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>aab56a297ea27b7dd31be8cc282e4772f</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2d5cd4a80e6379d78010f8b18e6811c8</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a37635f6355685ec34710f9596734cc48</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a257589d20938147d732301aaabae505e</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>abf531031c9e5de44ae8b9d360a9e2045</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>af448f9131df246aaf961d80bf67bbef0</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a47a85053ec7ff54c7e296542d07b0b41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a1a067f5eaecb8150037fc3f25324355d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>record</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a4a6bf618a9bb87d112b055afe5b2d254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a0701993ffd0bafc55ebf0f1d782ddd21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ae14fc92903d96b684a33a6a13656dfd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a4c5763d8bb9068313c5bb61a7597db3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a9c221a1f5b789006c54a85d3b95d3bcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a8b1d569b9f5a1107bb439dad6e855e40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>af0121b9d3c9bc11c5b10ca59d7085118</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>aed00d59038315d5102f4cfdbae512a05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2ef94bc4c0aa43260912a1f7fb9028cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ab6ae4c4422c045ec0a01da51edbb70bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a653f94c73e2a14c383649dc9b237b6f3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a21e0226c3ef2000208dab1f6c28ad19a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a375f05d48927f9d06f01932825043613</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a0afebab240553e1d963fbf711b707cbb</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a55e5ddcb294db066c3315b25bd97b905</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a0382f9a071ac6c27ae8dc5a749e093c6</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Value::UniquePtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a3f42afc0cc90cf612dc1706953d83512</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>ab7c25fd61993f3d28846c699cfe3e080</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>afd7609003de423f9ffb325855a235557</anchor>
      <arglist>(const IptcKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a9b4348e0e20b4c32e6eac8462596c2f7</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iptcdatum</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2fc3c635f3a89dca462a0ec80fb3d1ca</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a884f0bbe277f0211ef2acd06bd397466</anchor>
      <arglist>(const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a548fd455cc034cc0a65c0a9eaa41011e</anchor>
      <arglist>(const uint16_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>aab56a297ea27b7dd31be8cc282e4772f</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Iptcdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a2d5cd4a80e6379d78010f8b18e6811c8</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a37635f6355685ec34710f9596734cc48</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Iptcdatum.html</anchorfile>
      <anchor>a257589d20938147d732301aaabae505e</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcKey</name>
    <filename>classExiv2_1_1IptcKey.html</filename>
    <base>Exiv2::Key</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IptcKey &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a1446da3055cb2b2c85cd5adeba4cd906</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a7cc813c4f2f65b308587579a1f814689</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a97fe8f71498b1e412894ed2475657101</anchor>
      <arglist>(uint16_t tag, uint16_t record)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>aea7dcce2b8a20888e3dfa518d79f1b14</anchor>
      <arglist>(const IptcKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>aafe1898c3a943c040f44a13bd5f7e453</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a7fdcfe29f9fa88a2f4bb9f3fdc0e33fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>afccf37a6a8456d56d68b9f12b4da1985</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>adea866603fd8f268917b2cf6361436f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a44b735d7d1d0459beac504c598c39663</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>ae15d493ab75c6c5696ae9bc7204d7bd3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a1a8e5ae8df0a530d884a50ec3adc6ee7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a0d8dd2d874bde8d562ee3d87f047cc8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>record</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a5540d1d2008013b0b3339863719582e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IptcKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a5fa127b91597f4ac6b5ccd74315a98c4</anchor>
      <arglist>(const IptcKey &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>af90cd2fd735f773145046bce37240a05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decomposeKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a90c5328803dc9aaf89cc91ff6f0fc92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a7cc813c4f2f65b308587579a1f814689</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a97fe8f71498b1e412894ed2475657101</anchor>
      <arglist>(uint16_t tag, uint16_t record)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>aea7dcce2b8a20888e3dfa518d79f1b14</anchor>
      <arglist>(const IptcKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IptcKey</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>aafe1898c3a943c040f44a13bd5f7e453</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a7fdcfe29f9fa88a2f4bb9f3fdc0e33fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>afccf37a6a8456d56d68b9f12b4da1985</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>adea866603fd8f268917b2cf6361436f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a44b735d7d1d0459beac504c598c39663</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>ae15d493ab75c6c5696ae9bc7204d7bd3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a1a8e5ae8df0a530d884a50ec3adc6ee7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>recordName</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a0d8dd2d874bde8d562ee3d87f047cc8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>record</name>
      <anchorfile>classExiv2_1_1IptcKey.html</anchorfile>
      <anchor>a5540d1d2008013b0b3339863719582e6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::IptcParser</name>
    <filename>classExiv2_1_1IptcParser.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1IptcParser.html</anchorfile>
      <anchor>a5284a756c97571f0fd1de6c59f5cc2ac</anchor>
      <arglist>(IptcData &amp;iptcData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1IptcParser.html</anchorfile>
      <anchor>ade6b61bc6ce95b24c2c0b47575f1c20a</anchor>
      <arglist>(const IptcData &amp;iptcData)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Safe::Internal::is_signed</name>
    <filename>structSafe_1_1Internal_1_1is__signed.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>Exiv2::Jp2Image</name>
    <filename>classExiv2_1_1Jp2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Jp2Image</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a0e0fcfeb79e69c737e8fa4b4e69fa9a4</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a3accc55404b3d484434879c32d35f674</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a5482de43ee4cf13a3e1b2271685529c5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a83b8b57226f6c76dab28725eb58bc857</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a04964562b48cce73f7844c8e784f695f</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a5b52ec3f759a1a8c3fc48444d833e223</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Jp2Image</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a0e0fcfeb79e69c737e8fa4b4e69fa9a4</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a3accc55404b3d484434879c32d35f674</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a5482de43ee4cf13a3e1b2271685529c5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a83b8b57226f6c76dab28725eb58bc857</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a04964562b48cce73f7844c8e784f695f</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a5b52ec3f759a1a8c3fc48444d833e223</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Jp2Image</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a8d610970d4a3b9a0e7b91f76495dd2de</anchor>
      <arglist>(const Jp2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Jp2Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Jp2Image.html</anchorfile>
      <anchor>a4cf5e1e0d39279263e2123f2b183f846</anchor>
      <arglist>(const Jp2Image &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::JpegBase</name>
    <filename>classExiv2_1_1JpegBase.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab4106b3ae2e781eb7d5585e5c1a1adab</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ae09104f22a1736c80634cb218a55124f</anchor>
      <arglist>(const JpegBase &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>JpegBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a88944d8ef4a0ab3655c5d10b8a0dd720</anchor>
      <arglist>(const JpegBase &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad4640857a051a3eea4fa70b3a4bdaf28</anchor>
      <arglist>(int type, BasicIo::UniquePtr io, bool create, const byte initData[], long dataSize)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>dht_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ae3eb667ccda25b54d012b9918ca2d993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>dqt_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a502f053264054adbece15856ba93ba82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>dri_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad9031e63c7559196a1c25aafee149d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sos_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>adc9892701cefb740883517d2583f43b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>eoi_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a8438226f555834d790635f5cfbe3d679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app0_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>afbf04efa4c26aa75856257c2135f08cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app1_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a0099da69918d98749d6383598b131f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app2_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab860b77f2ffad92ea60e2fb57491ba86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>app13_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a0eedd23068eae6fcf8d9681559e2e6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>com_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad13fc33b6bd884d6fff485cf6dbcd40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof0_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab39edaad91598d29c35051d7287cbc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof1_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a4901500c296a01332cef10f7781b4755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof2_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a6cf39e408b3db73dd75fb90de2e970a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof3_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>aa2bad5e55d81a8fb8a843888ecd556a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof5_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>adcc64e2f09b2ef0f9ad9bc041939e8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof6_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>af06fce45f8ac8febadae102633b4689e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof7_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>af6b2d687fc5c3f04fd3301c5de7d2c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof9_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a3e0ef88a47920375bb8c95ac63fe38cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof10_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a9546ccd6f763295248a3759186288c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof11_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a740f098625893ae5c69b3a7354c68307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof13_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a6a74aae8baecaca21a57cfc8ce7c5fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof14_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ae4f9424a0661f047b2247b50f703cf7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const byte</type>
      <name>sof15_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>afcd141ad8bb6aa6cb8a57f8231f50b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *const</type>
      <name>exifId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a0148502388324fabf7b181cc6be7646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *const</type>
      <name>jfifId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>addd09e4e22d17172d44b2ff8ced2f621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *const</type>
      <name>xmpId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>aba029c2fe4505de9491f95ada3602f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *const</type>
      <name>iccId_</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a65ebc02f9ac69937e06171aa5fb8f75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ac0e50df4487d0a75f0e9f0eada49b335</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a2ef53072be0c656e67e8a610ceb8be53</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>abf5b99b3b1a25922d0f45d964c05cc9b</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a17bc2fe8a8e2562ae18d220e695cf2bf</anchor>
      <arglist>(BasicIo &amp;oIo) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ab4106b3ae2e781eb7d5585e5c1a1adab</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ae09104f22a1736c80634cb218a55124f</anchor>
      <arglist>(const JpegBase &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>JpegBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>a88944d8ef4a0ab3655c5d10b8a0dd720</anchor>
      <arglist>(const JpegBase &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JpegBase</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>ad4640857a051a3eea4fa70b3a4bdaf28</anchor>
      <arglist>(int type, BasicIo::UniquePtr io, bool create, const byte initData[], long dataSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1JpegBase.html</anchorfile>
      <anchor>aad464a055fd28f2f0e9f99af3967f208</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::JpegImage</name>
    <filename>classExiv2_1_1JpegImage.html</filename>
    <base>Exiv2::JpegBase</base>
    <member kind="function">
      <type></type>
      <name>JpegImage</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a6fd8d77f7666e3f22a9bc46b0755f504</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EXIV2API bool</type>
      <name>isJpegType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>ae19b36616ee5d8202ab703922fd38278</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a761c7747d3d5295957ec46f52ef16a8b</anchor>
      <arglist>(BasicIo &amp;outIo) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegImage</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a6fd8d77f7666e3f22a9bc46b0755f504</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a9b6501a18cefa5de592f26cdf7c52714</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegImage</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a7bc50dca25762360b89dcbd50831a447</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JpegImage</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a7e96ad9a8a5b1df747bfdff1e242d670</anchor>
      <arglist>(const JpegImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>JpegImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>aa1522fd16888e7b3eee2bde724416920</anchor>
      <arglist>(const JpegImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isThisType</name>
      <anchorfile>classExiv2_1_1JpegImage.html</anchorfile>
      <anchor>a362bebd4b55855b20ebe8f79be8fd334</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::NikonArrayIdx::Key</name>
    <filename>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a311c0a1130815cc8316c33e489ef47f3</anchor>
      <arglist>(uint16_t tag, const char *ver, uint32_t size)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a6a46e5a128c66160ca8e82819ba59598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ver_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>af704247134ed213b2e868313f090b104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx_1_1Key.html</anchorfile>
      <anchor>a310039ac9cb057a3a1393c4de38f9eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffGroupStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>a72bbb2804a5f207abf2a56abbf3b21ea</anchor>
      <arglist>(uint32_t e, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>e_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>a53a35fd5353cda375b229c0521a35971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct_1_1Key.html</anchorfile>
      <anchor>aca57c9f52d7c58df93f360e1656e5995</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffImgTagStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>a8c860d0f22a9dcbe640b004cf11e05ce</anchor>
      <arglist>(uint16_t t, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>t_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>acbeeab7da5f13ea018abff27d92c1d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct_1_1Key.html</anchorfile>
      <anchor>aef9b111263b0b604cece4db84c1a1520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMappingInfo::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>a6b499752e32ddd62b0bc2d4b3a35ef9c</anchor>
      <arglist>(std::string m, uint32_t e, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>a73465324364508d6dc02822ac2ac0861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>e_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>add46be5badb97686a9e84eb5e589f492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo_1_1Key.html</anchorfile>
      <anchor>ae8d274bb774049116a9f6b3b19af4038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffTreeStruct::Key</name>
    <filename>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>ab293dd00014d2a09ad7a3fc3ce8cabdb</anchor>
      <arglist>(uint32_t r, IfdId g)</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>r_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>a497fa01af248a14005b9511360330ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>g_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct_1_1Key.html</anchorfile>
      <anchor>a094999c962296fe5f13017bb07aba9f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Key</name>
    <filename>classExiv2_1_1Key.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Key &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a9e9fc49e8bc83bc3adf8777744350d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>adaeb260410df1017cde117534dc3dd90</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a272fe50e38e5af51bc3fa54e32cd7931</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>afe816c1c2c28ee7e57b0e0ee041c1f37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a23dab45ff9d7151b484b90e686e833fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>af6bccc6d5552d2c3324d28099554b5c0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a3593df05b735beb63ec263ee00f37e37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a7a04f9c117d0373661b982ac63a9ce84</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>UniquePtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a04913a0cbdc71934cc16e4c3f1a1b161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a7718aa87f9555bdbc8600578e14aa607</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>adaeb260410df1017cde117534dc3dd90</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a272fe50e38e5af51bc3fa54e32cd7931</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>afe816c1c2c28ee7e57b0e0ee041c1f37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a23dab45ff9d7151b484b90e686e833fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>af6bccc6d5552d2c3324d28099554b5c0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a3593df05b735beb63ec263ee00f37e37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a7a04f9c117d0373661b982ac63a9ce84</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>UniquePtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a04913a0cbdc71934cc16e4c3f1a1b161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a7718aa87f9555bdbc8600578e14aa607</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Key &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Key.html</anchorfile>
      <anchor>a785bed8a97d343358eafacf4011b2868</anchor>
      <arglist>(const Key &amp;rhs)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::LangAltValue</name>
    <filename>classExiv2_1_1LangAltValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; LangAltValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a18b1ea5222e87e535203fd3a63ece279</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aa6e57338d68ad7a79567e7d4271ce74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>abf8c25b7c35adcd521ec83bacd0b09fd</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ad8b97d913185f05651732373b956e7a3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string, LangAltValueComparator &gt;</type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aac22411b727aa8047bc2b1131a2fcfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ae466310e854d707c1e5f5a44730a27c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a361286f8c8d4dfd4fb22ced665a6a021</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a1fa6d65e6256cd3ce4cc37a22aa54619</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>af26c034b177b3500195891e67863809e</anchor>
      <arglist>(const std::string &amp;qualifier) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a13afd907bec57ff854b4a96578cf5971</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a2a84850628a27f62ed260897c23223eb</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a2f0c455b63377bb1cfdd932e3f734a6f</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aecdf674b2f5163fbfbbff449e68de7ab</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>aa6e57338d68ad7a79567e7d4271ce74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LangAltValue</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>abf8c25b7c35adcd521ec83bacd0b09fd</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ad8b97d913185f05651732373b956e7a3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1LangAltValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::LangAltValueComparator</name>
    <filename>structExiv2_1_1LangAltValueComparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structExiv2_1_1LangAltValueComparator.html</anchorfile>
      <anchor>a4cb7bda82abf011ed1938745823b6ebe</anchor>
      <arglist>(const std::string &amp;str1, const std::string &amp;str2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::LensIdFct</name>
    <filename>structExiv2_1_1Internal_1_1LensIdFct.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>id_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensIdFct.html</anchorfile>
      <anchor>ad0767f809540b9923c60c5840f3f15e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintFct</type>
      <name>fct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1LensIdFct.html</anchorfile>
      <anchor>a2165c6f6ee8faaec78cd1a48f02e80fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::LensInfoNotFound</name>
    <filename>classExiv2_1_1Internal_1_1LensInfoNotFound.html</filename>
  </compound>
  <compound kind="class">
    <name>Exiv2::LogMsg</name>
    <filename>classExiv2_1_1LogMsg.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Level</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af72a9026cffe2536ae475e1c31e7ff70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Handler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a7058654225955500dc09e31d0834aed1</anchor>
      <arglist>)(int, const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a54629d4766f6bdf60d69ea62103c747c</anchor>
      <arglist>(const LogMsg &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LogMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a72012e21887fc1d4fe1486f838d460d0</anchor>
      <arglist>(const LogMsg &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aef46b169c328eecf0b83886ef8b9ea9f</anchor>
      <arglist>(Level msgType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aedeb7bc7577e6c82e002f03017ce2f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostringstream &amp;</type>
      <name>os</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a8a7e8537111d3ece4a66a6bfad43f095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLevel</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>a1a93e7de5fd3fd3c949e91372bf1721e</anchor>
      <arglist>(Level level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setHandler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>af10c81fa649219d0c968f457f53d67f1</anchor>
      <arglist>(Handler handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>level</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>acc66b40a37a56cdd2d173e11d61820fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handler</type>
      <name>handler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>abba96ec44d989f510ba045fb985c462d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultHandler</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>afd27d3e454319fa258a97e51406a9a81</anchor>
      <arglist>(int level, const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aef46b169c328eecf0b83886ef8b9ea9f</anchor>
      <arglist>(Level msgType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogMsg</name>
      <anchorfile>classExiv2_1_1LogMsg.html</anchorfile>
      <anchor>aedeb7bc7577e6c82e002f03017ce2f04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MemIo</name>
    <filename>classExiv2_1_1MemIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::MemIo::Impl</class>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab2273b64e44e90f6cdbf785b132d9dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ad65869d43163ab8d38484a1d36448f3d</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a72698ade14f6ee21cc1e0fd4dbfa1b99</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>aa9ad05a03274b430016fb99b273c52b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>af747eaacc652f4e32b0c120faf42b49e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>af45c364d610ad9e92e2ac2e34ad9c05e</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>aa45963370753db55e5297fe01810d1ec</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ad13e21891ed3a87432654ba139cb1e7a</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a61ce4029cd0388e688962027c0b38d9e</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>adc5279608b654bef18e813e4270461de</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab2d825f42b29546562a0356c8d176f96</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a446454e12edd73d9d4825cb7c35e86d0</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a8b0bfaf38c73e96d2af0c03ca3497757</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab457492ef5f151b0bec55f5cb93461da</anchor>
      <arglist>(bool=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ae09f4dd8bf257486ef83c422b734ba79</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a8c665fe61621101527993de8f58d7fa5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>adf8d00bb725d8d701cbbb27965a6d8f3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a76e2cf6b16ccbadd1b70ac0ac7f84c73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ae0ae4dd1b3d61ee5d70d23b4f4640122</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>aae2d4b78bfc3a96ee4a19567006d61c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a7bdaa032c505c91bbb079d4d96db7c24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populateFakeData</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>abbca7639a90aceca1084797b983a2ab5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a92e46f18d5167edfd67daff0007892fc</anchor>
      <arglist>(MemIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>MemIo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab50ef0636000e74a11ee9443cbca887e</anchor>
      <arglist>(const MemIo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab2273b64e44e90f6cdbf785b132d9dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ad65869d43163ab8d38484a1d36448f3d</anchor>
      <arglist>(const byte *data, long size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemIo</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a72698ade14f6ee21cc1e0fd4dbfa1b99</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>aa9ad05a03274b430016fb99b273c52b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>af747eaacc652f4e32b0c120faf42b49e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>af45c364d610ad9e92e2ac2e34ad9c05e</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>aa45963370753db55e5297fe01810d1ec</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ad13e21891ed3a87432654ba139cb1e7a</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a61ce4029cd0388e688962027c0b38d9e</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>adc5279608b654bef18e813e4270461de</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab2d825f42b29546562a0356c8d176f96</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a446454e12edd73d9d4825cb7c35e86d0</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>a8b0bfaf38c73e96d2af0c03ca3497757</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ab457492ef5f151b0bec55f5cb93461da</anchor>
      <arglist>(bool=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1MemIo.html</anchorfile>
      <anchor>ae09f4dd8bf257486ef83c422b734ba79</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Metadatum</name>
    <filename>classExiv2_1_1Metadatum.html</filename>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa496529751ea589931c7edb90dd3ad27</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a0867c0402a036692e19cfa659a09ce50</anchor>
      <arglist>(const Metadatum &amp;rhs)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a13ca87cd8d4dce75bbfa515e4c27a8c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>afed1289c7d2404903ec64499528bb7c3</anchor>
      <arglist>(const ExifData *pMetadata=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a24bda0168b0655ccbbc8b870b583f1da</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a36a70f57d228db2ce804526e260fab82</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>af9d30791ac19ecd4a80cd9214f3d1495</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a65e6586f646bc8e5cbfe880e6ad483c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a880644b1b92788c59b4457ca9d692c55</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a828306096c0575ffc5d02c73c3b6ff53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a58cd8a22d1debd0e3f8cd2407587ed31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a39ee5937edab29d199f3d318bb55eace</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a0f4c5f021786e0e7abc3ae25b984f4e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a544ecc668c84b4ddf208e147cc12c01e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a1a77c33ee0ba24127dff478e26ba8fa7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a75740ff36685a69d617e0b9548fcf2b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a05e186d6189b44ac428b7d21a8dbc762</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a8617d2efd0c1a241e96e853b7f00f077</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a25cbb22ddf9597cfd4002dafb8713cfd</anchor>
      <arglist>(long n) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a66148c73f1b565885b4ee51358ae4308</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa70af228d888327badd2333020256ac2</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aea1935014f316b7a2eabc12be92ca7c9</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value::UniquePtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a47cb6e1f0bfc26458e3b8c26284af41d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a703207d6f853c2b040d75ec907ea4dfd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa496529751ea589931c7edb90dd3ad27</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a0867c0402a036692e19cfa659a09ce50</anchor>
      <arglist>(const Metadatum &amp;rhs)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Metadatum</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a13ca87cd8d4dce75bbfa515e4c27a8c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>af4dd21ad1c59ae0bbe521651951615f3</anchor>
      <arglist>(const Value *pValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a246b60cc8cca54ce6a6e97eeb4ef84bc</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Metadatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aeb1f6c3ccafade3d3a04ca8ced8c93a3</anchor>
      <arglist>(const Metadatum &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>afed1289c7d2404903ec64499528bb7c3</anchor>
      <arglist>(const ExifData *pMetadata=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a24bda0168b0655ccbbc8b870b583f1da</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a36a70f57d228db2ce804526e260fab82</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>af9d30791ac19ecd4a80cd9214f3d1495</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a65e6586f646bc8e5cbfe880e6ad483c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a880644b1b92788c59b4457ca9d692c55</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a828306096c0575ffc5d02c73c3b6ff53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a58cd8a22d1debd0e3f8cd2407587ed31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a39ee5937edab29d199f3d318bb55eace</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a0f4c5f021786e0e7abc3ae25b984f4e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a544ecc668c84b4ddf208e147cc12c01e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a1a77c33ee0ba24127dff478e26ba8fa7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a75740ff36685a69d617e0b9548fcf2b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a05e186d6189b44ac428b7d21a8dbc762</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a8617d2efd0c1a241e96e853b7f00f077</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a25cbb22ddf9597cfd4002dafb8713cfd</anchor>
      <arglist>(long n) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a66148c73f1b565885b4ee51358ae4308</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aa70af228d888327badd2333020256ac2</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>aea1935014f316b7a2eabc12be92ca7c9</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value::UniquePtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a47cb6e1f0bfc26458e3b8c26284af41d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Metadatum.html</anchorfile>
      <anchor>a703207d6f853c2b040d75ec907ea4dfd</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::MimeTypeList</name>
    <filename>structExiv2_1_1MimeTypeList.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a43fd003ec11ed6e246fbb61654cba1f4</anchor>
      <arglist>(int compression) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>compression_</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a41c0c1212ff6e858c2db6fff3c987bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1MimeTypeList.html</anchorfile>
      <anchor>a1e58604286304921b4ceb6a834bbabf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::MinoltaMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a7ed35284ec7ee8c8df89010fd25edc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCsStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a4d125cf7fc0a488a630cf3b9c51a0c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs7D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ab63dd0e0c5a1fde3b6f6df06832d4cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ad2da7222e3cb07369340f0ea23f90baf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCsA100</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a975d3b57e06fcf97992d0ae293933c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureSpeedStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a0ad754361cd6487c9ff10fa710f6d42f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureTimeStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ad6377a02aa1a7969f67e85ee8657f209</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFNumberStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a5c40e016520dbc7275a586a771760363</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureCompensationStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>aa06a034258cc950cc200c4f6d041de30</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFocalLengthStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a2080a93d1efc4f1daa820be1a47af890</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaDateStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a624395073c43c5b772ff7c7c96ad6ad1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaTimeStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a437692d41909f931b57f65fb5bf1df3c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaFlashExposureCompStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a15e27e24d426ebf5f7f982b8dd267eb9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaWhiteBalanceStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>aeed85acc372fee0e0fae768baa3dc221</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaBrightnessStd</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a10b86dbdb66356612079014d073b4818</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureManualBias5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>a8fd4d9653b24e90d4019eed36b583fd1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printMinoltaExposureCompensation5D</name>
      <anchorfile>classExiv2_1_1Internal_1_1MinoltaMakerNote.html</anchorfile>
      <anchor>ac22380bb27463ea5dd7d4cabfe097abc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1MnHeader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a9680ff31e6a54798cb34f70a3af0a374</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a1932fbdfe5684d9262c7277d17062d68</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0ae20114fb027315fa793064217b4fb6</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>ae55b23ff14f7362a3a9d05aaf168db3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0033143984bfa08b335d8a0c37a96962</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a7f20fcf783d82d7fc56840507877d6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>acf7dc0766a03016af195578272e8f1a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a65059816a73efa54abafa585efa04a82</anchor>
      <arglist>(uint32_t mnOffset) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a9680ff31e6a54798cb34f70a3af0a374</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a1932fbdfe5684d9262c7277d17062d68</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0ae20114fb027315fa793064217b4fb6</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>ae55b23ff14f7362a3a9d05aaf168db3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a0033143984bfa08b335d8a0c37a96962</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a7f20fcf783d82d7fc56840507877d6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>acf7dc0766a03016af195578272e8f1a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1MnHeader.html</anchorfile>
      <anchor>a65059816a73efa54abafa585efa04a82</anchor>
      <arglist>(uint32_t mnOffset) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ModifyCmd</name>
    <filename>structModifyCmd.html</filename>
    <member kind="function">
      <type></type>
      <name>ModifyCmd</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a1cba957cfcd4265e43cc33e7b163ba4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CmdId</type>
      <name>cmdId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a6cca81a436a8675bdf3f375a899a1501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>aa908d1afc78e3c46caca1fd1dcf54f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MetadataId</type>
      <name>metadataId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>ac969ff380e729e45be295c8c614ce6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Exiv2::TypeId</type>
      <name>typeId_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a4e266f7bd0051d317fc2f331ee44b9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>structModifyCmd.html</anchorfile>
      <anchor>a9519fc53399bb4fb35d6b235e44f6129</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::MrwImage</name>
    <filename>classExiv2_1_1MrwImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>MrwImage</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a41f54e789f277feb146f4d8928604ffd</anchor>
      <arglist>(const MrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>MrwImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a4d7732f9155e47a8444a87b32b0c873d</anchor>
      <arglist>(const MrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MrwImage</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a6b2bce16b0bea39d8c6f1a8bf00b3cff</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a85a84de81bb258870c2491d4a43b1f9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a7334569f64a62e26bd9135f16f4ad895</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a09d00cfe5148f3d74d4539adee8c9534</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>ae4f07d2a5d1ffed72eda999d0256a44e</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a0ea9a308841928913a32134e49043307</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a030613a4d2f29a728dd0f409e2de780e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>ac400b127a4fcac38af13fd0e8ff16537</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a99b303fded1d60091e8e5a8cb76004de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MrwImage</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a41f54e789f277feb146f4d8928604ffd</anchor>
      <arglist>(const MrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>MrwImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a4d7732f9155e47a8444a87b32b0c873d</anchor>
      <arglist>(const MrwImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MrwImage</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a6b2bce16b0bea39d8c6f1a8bf00b3cff</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a85a84de81bb258870c2491d4a43b1f9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a7334569f64a62e26bd9135f16f4ad895</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a09d00cfe5148f3d74d4539adee8c9534</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>ae4f07d2a5d1ffed72eda999d0256a44e</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a0ea9a308841928913a32134e49043307</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a030613a4d2f29a728dd0f409e2de780e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>ac400b127a4fcac38af13fd0e8ff16537</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1MrwImage.html</anchorfile>
      <anchor>a99b303fded1d60091e8e5a8cb76004de</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::MutableSliceBase</name>
    <filename>structExiv2_1_1Internal_1_1MutableSliceBase.html</filename>
    <templarg>template&lt; typename &gt; class storage_type</templarg>
    <templarg>typename data_type</templarg>
    <base>Exiv2::Internal::ConstSliceBase</base>
    <member kind="function">
      <type></type>
      <name>MutableSliceBase</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>a5e9f6d3048f51b3d68958a4028d5f6af</anchor>
      <arglist>(data_type &amp;data, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>at</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>af49a31960459b957ec31408444fd80d3</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>ab460a874bedd31148af809b57e9efb62</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>a16d144805d512fe820d3ad092ead6c8d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstSliceBase&lt; storage_type, const data_type &gt;</type>
      <name>to_const_base</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>a03caa761a8da85caec998678c8008c60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>slice_type</type>
      <name>subSlice</name>
      <anchorfile>structExiv2_1_1Internal_1_1MutableSliceBase.html</anchorfile>
      <anchor>ae0ad7db2931c6efdf1969a8ebadce60f</anchor>
      <arglist>(size_t begin, size_t end)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::NativePreview</name>
    <filename>structExiv2_1_1NativePreview.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>position_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ace41cff23edb5322229647da766b482d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a76f008dd10a7cff654682db8ee82ab89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>width_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a3d625e3121491a8abb1989783a442a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>height_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ab7e910bedd3385b914972142f8e93895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filter_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>a38b8d3338ca4c49611c53460cb64ac71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1NativePreview.html</anchorfile>
      <anchor>ab3ba8fee304dcf8e9076056a002b3fe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon1MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a07f95d0c31a454ddd08596d93d5e3546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a195f975baf2b352400b160cdedbf734f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a9512b8fb2c9e9e3ad6d88746e0aa5a72</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0085</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>ac31a71f6172238fba5ecbaf086d1e776</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0086</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a254d47c729464e9cfdac00f9fe6c049a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0088</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>a3a3a59ad0ba1292fac0e6c68dacf9f9a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printBarValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon1MakerNote.html</anchorfile>
      <anchor>ac5401259006911ddf1157078e6d50cc8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon2MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</anchorfile>
      <anchor>a5bfcdae844f11a69d296ca85a63bb913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MakerNote.html</anchorfile>
      <anchor>abe4c37c8b38afda87bec332d7fc11c41</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon2MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a745da49dfb6712f2357db9ddb540745a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a4883f8e7e8fa25040354bbfa96fc787f</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ada639a98df7b515581027e8960e88b2a</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a345ff0c9d9edbd3cd9b965ced127aed7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a0292c5fe6bde95f151ad264fd773a371</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ae75489c69fbacdda4d9380c93eb84948</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ac6ab9309613bb80615e119b9e5f89544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a745da49dfb6712f2357db9ddb540745a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Nikon2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>a4883f8e7e8fa25040354bbfa96fc787f</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon2MnHeader.html</anchorfile>
      <anchor>ada639a98df7b515581027e8960e88b2a</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon3MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ac358d44a7dd6837a07ab2385384b7e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListVr</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>af59e006eac800a949cd5d312d5cf1639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPc</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>affa3dbded8e2e918a4674d7c34f13de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListWt</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a10e08e9d83ae2eb9121559063f242c9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListIi</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3c57d3b3363b293a9b19a43285cb95af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a4704a9ba6429312f520a5a4f030a7da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf21</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aeeabc267d4e8e10df94d12e63e730088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAf22</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a05c5bfc1a3b0d48bb8cbfd3858ab0896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListAFT</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aed4cea1f77f7d66e8241a9be179b00e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a1dbe8cc702e24dc933f893417f41dced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListMe</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2fcce54594c3ba9cc24d4c7dd64a7006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a9cd851da75a8faf1602f212052ef5645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a662b5307f06c051a41c1bf0517154d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFl3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a5eae3ad9da77eb2b6e7ec6b416c952eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a118ded2689be40a22349903091c83327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a88e843b83bea05da49319ef0a37b30a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ac023c876f1b8b5f8a3b4a5f11abee396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aaa9c2314ddbb9ea2a50095f737782f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSi5</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a77cfba4f7b1e4a39fb1de9d53d49efd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a68ae327da06170eb0b218c27b88fc2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2d1d576a8235d2b95f3b4dfa588ad371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ad850a7103fdd24004054f8e68cdc5e9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb2b</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a708f5d84e0b23b71204cea47ddc2256f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab036d36d7bfc885bb2a3fe3331ca2f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCb4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a470a166affe087b3805039a8c47a9311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd1</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab7504de0ee75e6a4b69ebdeb6a821370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd2</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ad82974022bb0de378d995ae076fadae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd3</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a350901bea31af5a3fd388fc4becfeaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListLd4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a065e33796e00ec335a5286029647438a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0002</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a678b7365718ccaba211578ece0b2a11c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a844e3e904a1f03b18b12eedfbd2426f8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0083</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3c52cbbef312bca26edb767348a50471</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0084</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a66e4079e034b50c2913f7a8698f72597</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0085</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2c229cade852d167ae902e44af838093</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0086</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a2fee496bbdf1c8acaaec9d2427013b4e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0088</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>aca54465a5a83c506ff164e2db10be0ee</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0089</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a8eee7952b0c7465cbb5e00aef60a28ef</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x008b</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>adff8e6ac89731e4c497afe7c7f6a173b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printAfPointsInFocus</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>add8045dc230d099fab9638918f7a4528</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printLensId</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3d6fb82d2369baab391500522af6f977</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata, const std::string &amp;group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printLensId4ZMount</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a4b16c16411b120545aeb634100c24e5d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocusDistance</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a7c7c696ac16b59c04eca0ca8f68a91a5</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printAperture</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a4013268e57e829c97f252a6cc59ee057</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printApertureLd4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a3b4268ae194b02fc4f247624ca0e4fbe</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocal</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a28b4d8a290ea765ddb38ad3ef2bed7c5</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocalLd4</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a7fffe61dcb876b8f095ea53d7f8219cc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFStops</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a6ca20ae91a8d52a6909ca247c4c5cdf6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printExitPupilPosition</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a06651763a24989a69bf08be76a300f83</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x009a</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a76c76801ca20c73a7519e3ef896d3f94</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x009e</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a6346ff8bb13bdb6081c653b203029d16</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printIiIso</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ae3d52ed17c72fef2fa98be45a017fa62</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFlashFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a373e2dc383e668f927e1a72d98f30fed</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printRepeatingFlashRate</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a25a5839ced045d3d102285299129682d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printRepeatingFlashCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a24ace53a0abec80f08a225c2bd9d8d40</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printTimeZone</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>ab1e76948d6104466301a11b25dc85ea7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPictureControl</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MakerNote.html</anchorfile>
      <anchor>a1f90c75d6d4e0401db4be6b041424a7b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Nikon3MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a4d4f0f180a68922addb026b5f559e993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a9d9169f9e12aec592be4d156a8e9c78c</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>acd4a1a1346223f7275e8c6abc739e6ff</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a92fe0f0082ab1de6246e27ed88fa34df</anchor>
      <arglist>(ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>afc2b0f92cb6e28788bb19aeeeb4f9aeb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a9968354ff76fbf6ac1b146cfdb8c90ea</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>aa528e72acd98edc9a910b9c8b30f5d7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>afd3ebf5617147a76402e3263db253f77</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>ab3d559c78bab5e5a6267814817c3159b</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>af0790d55b82c27e643680326462d4057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a4d4f0f180a68922addb026b5f559e993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Nikon3MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a9d9169f9e12aec592be4d156a8e9c78c</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>acd4a1a1346223f7275e8c6abc739e6ff</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1Nikon3MnHeader.html</anchorfile>
      <anchor>a92fe0f0082ab1de6246e27ed88fa34df</anchor>
      <arglist>(ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::NikonArrayIdx</name>
    <filename>structExiv2_1_1Internal_1_1NikonArrayIdx.html</filename>
    <class kind="struct">Exiv2::Internal::NikonArrayIdx::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>acc2d1b4b7785578cca4d24810a8a86cc</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>ae1171f742edbb3337c1bcf0e7ce53cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ver_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a7a2586631855184e7e484f066dc96415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a16a30b68d38d107a539bfb076d4247f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a80d8855ef3fb66f7e37a30d1232edafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>start_</name>
      <anchorfile>structExiv2_1_1Internal_1_1NikonArrayIdx.html</anchorfile>
      <anchor>a9d8c948df5b3ac559eb0eb26d63959aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo::Ns</name>
    <filename>structExiv2_1_1XmpNsInfo_1_1Ns.html</filename>
    <member kind="function">
      <type></type>
      <name>Ns</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Ns.html</anchorfile>
      <anchor>ad4ae9e319bc25d4d241be1e941300add</anchor>
      <arglist>(std::string ns)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ns_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Ns.html</anchorfile>
      <anchor>a9a184d2bc761ac5a34424e989ed7680e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OffsetWriter</name>
    <filename>classExiv2_1_1Internal_1_1OffsetWriter.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OffsetId</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaacdcd1d3c2a9cabb6ee53dca00d7b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cr2RawIfdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaacdcd1d3c2a9cabb6ee53dca00d7b66a9cd54e49efc4b1dfaf2afdf478cd7369</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cr2RawIfdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaacdcd1d3c2a9cabb6ee53dca00d7b66a9cd54e49efc4b1dfaf2afdf478cd7369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>ac2bb169036d207264d7567a1dad7bd01</anchor>
      <arglist>(OffsetId id, uint32_t origin, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>a3027f3a66c703571949035345a962ac8</anchor>
      <arglist>(OffsetId id, uint32_t target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeOffsets</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>aaf0531ea3f253d92eaf60c29807ec8b9</anchor>
      <arglist>(BasicIo &amp;io) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>ac2bb169036d207264d7567a1dad7bd01</anchor>
      <arglist>(OffsetId id, uint32_t origin, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExiv2_1_1Internal_1_1OffsetWriter.html</anchorfile>
      <anchor>a3027f3a66c703571949035345a962ac8</anchor>
      <arglist>(OffsetId id, uint32_t target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Olympus2MnHeader</name>
    <filename>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>ad9ac595b2bd4dbe59fb1e732bf22874c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>addb50c6c62ab264d7d22dff2079012df</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a1afa6cc8c9feb904e0d330e9c86562d1</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a8ab7dbb8e10c7909921453e5f3127c78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a8b0151f6dceb37bb3c5f1fa3838baef7</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a62c4cc1ad64d715abd6ea718a2c561d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>ac2528462b24398c960799ad487ea5263</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>add41fedef1a2cb622e34c8c670b99286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>ad9ac595b2bd4dbe59fb1e732bf22874c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Olympus2MnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>addb50c6c62ab264d7d22dff2079012df</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1Olympus2MnHeader.html</anchorfile>
      <anchor>a1afa6cc8c9feb904e0d330e9c86562d1</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OlympusMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1OlympusMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ae9d353ff8d84a4c84ea0c63ce055451e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a864bab7b691c8eae817e8556de35b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListEq</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa94fc9c156caccaf4e9c266d5b04f3fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRd</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a5d6918e7f562dd61695d9fe85b5e5d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRd2</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>af0dcd1a68105b370cfbdc82d96072a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListIp</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a7bdd868124b0ac2324f51a4699f8c8a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFi</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aea50ea5fe5644a2997dcf07d8443a382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFe</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a02b3e3d931ba6b1748f441878c0c2f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRi</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ab2a9539feee4e2c83616a6d87b1650b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0200</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa2da0dadba4f887cb4eb8a53f304e8cd</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0204</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a23372979ed42fc25dc21fc61f1218de9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x1015</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa282c4d7a1575f6a909557fc381463fb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0201</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a0ea897be304a83295dded2bb8573d0a8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0209</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a4ff35aee60f19a4b72c9257842491bd8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printEq0x0301</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a883d1a483beb4c970aa48a25404c72ca</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCs0x0301</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ae0393cbb429bfd5f0c856c461c1d9418</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x050f</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>af62d1c2ac76d5ada5fbef808be9d3232</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0527</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a97bec9dbe4fe9966c2f20fda22d72da3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0529</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a0b6fa2f10f9741e6a0966c2e525741ad</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x1209</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>a67f520b41dd3ab0518675bd1fe79cf13</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0305</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>ad0f3789715de37a329b664957854f7fc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0308</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>abed43cff874a6dba0c53ddb8cc80eb9b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printGeneric</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMakerNote.html</anchorfile>
      <anchor>aa39350b5157c46fa011e7bf0657f3544</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OlympusMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1OlympusMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a81f75d7da53dcefc2996b98025239b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>afb8c83fde79ab265c53b3088db1c41fc</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a04e597763c23b13ab07484a59dfc0a76</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a63654379d14478c1f818121e7853da53</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>ae6ab31b7f3e5e8ff0f3480118c8b22fe</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a55ebb20298ac2f777211d1ed311dace9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a13f262203deaa5ffc30d79198d3570ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a81f75d7da53dcefc2996b98025239b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OlympusMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>afb8c83fde79ab265c53b3088db1c41fc</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OlympusMnHeader.html</anchorfile>
      <anchor>a04e597763c23b13ab07484a59dfc0a76</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::OrfHeader</name>
    <filename>classExiv2_1_1Internal_1_1OrfHeader.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>ad09dae004bec4f724931cad73c405dd8</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>add427609895e8b2584428e95f67d1551</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>a46d792c4573e526dc0c250056c757d00</anchor>
      <arglist>(const byte *pData, uint32_t size) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>ae9da48f3018ea1a28979aef8616a040f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>ad09dae004bec4f724931cad73c405dd8</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrfHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>add427609895e8b2584428e95f67d1551</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1OrfHeader.html</anchorfile>
      <anchor>a46d792c4573e526dc0c250056c757d00</anchor>
      <arglist>(const byte *pData, uint32_t size) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::OrfImage</name>
    <filename>classExiv2_1_1OrfImage.html</filename>
    <base>Exiv2::TiffImage</base>
    <member kind="function">
      <type></type>
      <name>OrfImage</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a7ea410149dd974a2b7555ebb030cde25</anchor>
      <arglist>(const OrfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>OrfImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a27cbd9fe8f53e75effe2dfa6613c908f</anchor>
      <arglist>(const OrfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrfImage</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a41a21589795770a0fab5e5f3821c3729</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a37d5e284cc1a3ebf0f6a851c4bb6b9e5</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a5f36fa9b5c1429dcb48e67de0fd83561</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>adbf9776e31614090adb81212eb19f9a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>abf241b3d8211f2eb3c30287eff1da1c8</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a631282d18681d0f03f2aa696a4ba79bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a0605d1886e4f173cb2e469e12045fede</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>ab481f020ca15cb0ef7e24587a123dbb9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrfImage</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a7ea410149dd974a2b7555ebb030cde25</anchor>
      <arglist>(const OrfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>OrfImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a27cbd9fe8f53e75effe2dfa6613c908f</anchor>
      <arglist>(const OrfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrfImage</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a41a21589795770a0fab5e5f3821c3729</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a37d5e284cc1a3ebf0f6a851c4bb6b9e5</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a5f36fa9b5c1429dcb48e67de0fd83561</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>adbf9776e31614090adb81212eb19f9a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>abf241b3d8211f2eb3c30287eff1da1c8</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a631282d18681d0f03f2aa696a4ba79bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>a0605d1886e4f173cb2e469e12045fede</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1OrfImage.html</anchorfile>
      <anchor>ab481f020ca15cb0ef7e24587a123dbb9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::OrfParser</name>
    <filename>classExiv2_1_1OrfParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1OrfParser.html</anchorfile>
      <anchor>a12abbc35fbb4744386fdca23c4c3ac24</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1OrfParser.html</anchorfile>
      <anchor>a65695cea60bcd31f6136419ed72b9cfe</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PanasonicMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a4d8679a88a7c585df3f02d11ac4dee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListRaw</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a45ec9a40014238fa5fffd39175adee3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x000f</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a97970b8c766528396736b2d66c78590a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0023</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a0b24bfa8dfff107bc48a4556d40f8055</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0029</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>ae39922a472f98a9622ad0fb4648855fb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0033</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a2fd760148c9635d796ff8f6ac15cb1bc</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0036</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a6b528be479bdf00ae9b882466546209b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x003c</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a760945ec6708e994e38c53bdbc3bdb2e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPressure</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a9409d2d7427dd01c4d98e14c99c2538e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPanasonicText</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>aea047239489051a90ef8e47b2ca9f150</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printAccelerometer</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>aacd135095ea8a6352c07483b5c3bd260</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printRollAngle</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>ae8a19d1083b2a4ddcf314cb0a7ff549f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printPitchAngle</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMakerNote.html</anchorfile>
      <anchor>a664d13d37458fec736ab9c2ec5d71039</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PanasonicMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a591effcf519fb72ccedccc9acff95efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a919cda8c50538e21f12384736856fedb</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a20573ab01364a77ed3c28a6f0bd96edf</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a3cdde6ab66773e846bcfa62dbe6c8809</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a9063f12d08e78569e98a100e48b2df8a</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a559e3a8fc7f43438e9cfa8d9c736ed8a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>af6e0a64bcab79b50002eba10695e8b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a591effcf519fb72ccedccc9acff95efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PanasonicMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a919cda8c50538e21f12384736856fedb</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PanasonicMnHeader.html</anchorfile>
      <anchor>a20573ab01364a77ed3c28a6f0bd96edf</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Params</name>
    <filename>classParams.html</filename>
    <class kind="struct">Params::YodAdjust</class>
    <member kind="enumeration">
      <type></type>
      <name>PrintMode</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac490e98ae38d6ee481c4b3826ddbaceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PrintItem</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac0129528bce4e090cfebdd1e3025d733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CommonTarget</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa92bcffc432ebf5f3db4b302b11e9db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileExistsPolicy</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6904db5cbd6b193b2c1e981f984ba7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Yod</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2bd54605371c167586b533e490bc2281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CmdFiles</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a53f3ffad823368b5371ba6a6425f2b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CmdLines</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a71d775c99ba9040dcf9053f563f7a236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Files</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a2371f1b5d505c4d7a71fe1836fa6d6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; int &gt;</type>
      <name>PreviewNumbers</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ab773f26f22e5aaa14108c715736713a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Keys</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a24e473bf04ba0461251cee4edee7dce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Params</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac624a1cca73c6620f0bc2ecc9cceaf7b</anchor>
      <arglist>(const Params &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Params &amp;</type>
      <name>instance</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ae7e2ea302e1af9a646a57046850a6fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanup</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a9482455c09621321d8227bb8c26be28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>help_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>af0c857dcd39182bef8922169a41a9672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>version_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1f2b048e91a9290b0de832461ad17bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3780008fd167a26f450f86a3d245d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>force_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a38830685f4165d9bf59e04b63e14f8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>binary_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>af0e20ffd358c9871b48b64911a7bae6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>unknown_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a6bee2b60bff0fd80302f88bebbe92d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>preserve_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a10b02f6993a205d55e371af9c99ec446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>timestamp_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a9fbb7b41344ee1bd376858c31a498a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>timestampOnly_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac6d6478fc3f9d1257d74981d039f1b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FileExistsPolicy</type>
      <name>fileExistsPolicy_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a976d918d69ed48713e078516c72195ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>adjust_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ad8ff1a0c3297b1660e9efc03ef397dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintMode</type>
      <name>printMode_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a315817bd4a95fae7e0ce51cbc59d0b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>printItems_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a74076cfc604a52d6aa6ae72005171439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>printTags_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a5f4a5243c5c344d6b700f65155b8c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>target_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1b0727408a23ae79073ed23899422497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>adjustment_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a65fb87995fc95760133cc5c438f134ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YodAdjust</type>
      <name>yodAdjust_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>adad79422f55ee662b3d4dc6c2775eb18</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>format_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3291726d2fef924dbe75b9f590e2560c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>formatSet_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a57f44672ef8aa311c8645c003dd50a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CmdFiles</type>
      <name>cmdFiles_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a31a9c0fea1eb0f185fdd561bd6bde6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CmdLines</type>
      <name>cmdLines_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a75af62f6f0e1107e75a1aff721361f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModifyCmds</type>
      <name>modifyCmds_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ac5dd29cd9646b79992fa6c3ce5038262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jpegComment_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a397459c7ed242ef7151d2a3652dda452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>directory_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a58f1ad0d7dc7f0d43867016694d0ba8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>suffix_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ab3ff04d4edef4e725866f6ca031f7a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Files</type>
      <name>files_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>ae35b7af0ea7e9df2245c706783b7329e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PreviewNumbers</type>
      <name>previewNumbers_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3276c4224b059c6d0f11e6111b760516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::regex &gt;</type>
      <name>greps_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3971cb9d99955cf0e75209a5328747fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keys</type>
      <name>keys_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aebdfcb7e2f17d4fd8c93951a9a82b73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>charset_</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a04824ae0926eaa88f0b10ac52ebf24c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Exiv2::DataBuf</type>
      <name>stdinBuf</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a97e71a26eef913ef2c615437c83724aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>version</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aa311932cddf036b870bed5e923f846f2</anchor>
      <arglist>(bool verbose=false, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>printTarget</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1e48447e43af2435e5eb768d778acf32</anchor>
      <arglist>(const std::string &amp;before, int target, bool bPrint=false, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getopt</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a3ba82915162067d66a83b54bca05e241</anchor>
      <arglist>(int argc, char *const argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>option</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>aaf786856e1f5ba8390db0f51903e1c90</anchor>
      <arglist>(int opt, const std::string &amp;optarg, int optopt) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nonoption</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a490b3b6dfafbb18ae5f462fd91795048</anchor>
      <arglist>(const std::string &amp;argv) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usage</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a010b48b7ab264c3da11130995afa7b98</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>help</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a1522c5562bf71927e2507da08b17e505</anchor>
      <arglist>(std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStdin</name>
      <anchorfile>classParams.html</anchorfile>
      <anchor>a82a172d20a40bdc337d71b0b819ee3a7</anchor>
      <arglist>(Exiv2::DataBuf &amp;buf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxDngMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a23ccc6b3739523ebd160c1562e05e148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a8ab703353ba8faf41ecc366d58c71a70</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a3a7fa0789041bbff9310635a5f2a1981</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>afec34f7369a244cd2e67962f8883451a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a5e398abfe5a0a22f667bf40eb5e70033</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a69e0d7887f74a763ffa3bef3f04bb1ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a57a0afe31bc7539057e2e0550e4ce3d7</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>ade2af64d6d374f09c0627544733fc04d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a23ccc6b3739523ebd160c1562e05e148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PentaxDngMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a8ab703353ba8faf41ecc366d58c71a70</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxDngMnHeader.html</anchorfile>
      <anchor>a3a7fa0789041bbff9310635a5f2a1981</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1PentaxMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>ad70e23e3d3ba06f3d4164f7a2db013ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printVersion</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a0145277e3ae12766500a02c3d65a0efe</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printResolution</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a1f0f8715e3ec0db978632c1e96b09d18</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printDate</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a4f43565f13228c3536c15e749dcae27b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printTime</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>af89c9dab3f91bbc98a1b60c3ca8818f5</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printExposure</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a57d17e7eb9c414838ced8f81018c2b88</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a5ff04b3f7d405277de1a53b1daa5f724</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFocalLength</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a2c418035f1d2e3930d5071a8795a4809</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCompensation</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a84b3a786deab066625f01803c461af1a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printTemperature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a756a915e5e2261e587b6eafd899d4f96</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printFlashCompensation</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>ad05a316d89782285f47c3a25623ce5f2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printBracketing</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a9e9c8316ab015f77b5451902d7c36a6b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printShutterCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMakerNote.html</anchorfile>
      <anchor>a37d8e7e506bacbbbb8fb4b006be3c93d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PentaxMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1PentaxMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>af1f3136e3ff0c28e24beffab085886eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a535a18b5bf66b893151a396614024323</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a72b6cffebdae6fa3f6d11531c58135d2</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a4f885c19642ee6c7c5bfd1c1d73f4830</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a78a8b062f70b86897a57fedc093330af</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a145c34916d4c9fae56a3533c0cfb4f02</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a20792067ebf95b2059079cb38b9ff786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>af1f3136e3ff0c28e24beffab085886eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PentaxMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a535a18b5bf66b893151a396614024323</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1PentaxMnHeader.html</anchorfile>
      <anchor>a72b6cffebdae6fa3f6d11531c58135d2</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PgfImage</name>
    <filename>classExiv2_1_1PgfImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PgfImage</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>ac406cb2623f1e4d1059218a21e0ed63b</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a65f0071b43475d849cf82f781127d95d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a7359f219b8dd0a0ad631e6a9a3884b91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a313b972af6fe170f3ca4b1ca13e9e5bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PgfImage</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a75e068f7efa3850670bac83d536f4922</anchor>
      <arglist>(const PgfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>PgfImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>ad264088d6cccf04a14de961cd613934f</anchor>
      <arglist>(const PgfImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PgfImage</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>ac406cb2623f1e4d1059218a21e0ed63b</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a65f0071b43475d849cf82f781127d95d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a7359f219b8dd0a0ad631e6a9a3884b91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PgfImage.html</anchorfile>
      <anchor>a313b972af6fe170f3ca4b1ca13e9e5bb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Photoshop</name>
    <filename>structExiv2_1_1Photoshop.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a9d27ff53500548ec78953a40e743b287</anchor>
      <arglist>(const byte *pPsData, long sizePsData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a2e7bcd67a6ff6a47b628d813ae8cf437</anchor>
      <arglist>(const byte *pPsData, long sizePsData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a31fe5a20fe69912e2bb2f87b40c116c6</anchor>
      <arglist>(const byte *pPsData, long sizePsData, uint16_t psTag, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locateIptcIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ac34205eee36512a0626bddbb462a0620</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>locatePreviewIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a98e277e6b49a095bf931952a6cecf16f</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const byte **record, uint32_t *const sizeHdr, uint32_t *const sizeData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>setIptcIrb</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a21b12dcbcd05f3c32b49c2121b77068e</anchor>
      <arglist>(const byte *pPsData, long sizePsData, const IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>ps3Id_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>a1897769b89f681b29936ca02147a8bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::array&lt; const char *, 4 &gt;</type>
      <name>irbId_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ab87b2da253f842e796ae31d914fb4dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>bimId_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ab1b0444d34313d542d11dca340b720fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>iptc_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>ad9e6b7b57010859ed5a411c082a4fb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>preview_</name>
      <anchorfile>structExiv2_1_1Photoshop.html</anchorfile>
      <anchor>acc127acc39977b3e4be0eeb07ca0a347</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::PngChunk</name>
    <filename>classExiv2_1_1Internal_1_1PngChunk.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>TxtChunkType</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a9a05f1f7d1b88f8e869813f6b318fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decodeIHDRChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a925fea946a68197f16e1cc8225fcfb8f</anchor>
      <arglist>(const DataBuf &amp;data, int *outWidth, int *outHeight)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decodeTXTChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>ab0df6c0422f2d0444b0908025a74e012</anchor>
      <arglist>(Image *pImage, const DataBuf &amp;data, TxtChunkType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>decodeTXTChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a29c52ba57f66bfcb1b169b4afd3cb865</anchor>
      <arglist>(const DataBuf &amp;data, TxtChunkType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataBuf</type>
      <name>keyTXTChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>a98eec5722607d7906aed3389af5de467</anchor>
      <arglist>(const DataBuf &amp;data, bool stripHeader=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>makeMetadataChunk</name>
      <anchorfile>classExiv2_1_1Internal_1_1PngChunk.html</anchorfile>
      <anchor>aba85035dffed7bea98f90d21f61e8119</anchor>
      <arglist>(const std::string &amp;metadata, MetadataId type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PngImage</name>
    <filename>classExiv2_1_1PngImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PngImage</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a2002dc19d42f774094d582fca8e57c02</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>ab71e078f253c93570987374051f53c0b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>aae35ff4191676dc77551702d743562fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a234190326f40337c139279d665a609ef</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a4d5c0688eb75b6e8c3c17f1eeaffac65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PngImage</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>aa54794403b4557dd4916f84b0a7c3a18</anchor>
      <arglist>(const PngImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>PngImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a3898e06c392d809f44d09e5fb211e2fa</anchor>
      <arglist>(const PngImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PngImage</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a2002dc19d42f774094d582fca8e57c02</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>ab71e078f253c93570987374051f53c0b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>aae35ff4191676dc77551702d743562fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a234190326f40337c139279d665a609ef</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PngImage.html</anchorfile>
      <anchor>a4d5c0688eb75b6e8c3c17f1eeaffac65</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo::Prefix</name>
    <filename>structExiv2_1_1XmpNsInfo_1_1Prefix.html</filename>
    <member kind="function">
      <type></type>
      <name>Prefix</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Prefix.html</anchorfile>
      <anchor>aeed0873a8afe8b66ca22a3d2f21391a0</anchor>
      <arglist>(std::string prefix)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>prefix_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo_1_1Prefix.html</anchorfile>
      <anchor>a3aab2fdb7069a5655e19ea37320e3808</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PreviewImage</name>
    <filename>classExiv2_1_1PreviewImage.html</filename>
    <member kind="function">
      <type></type>
      <name>PreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ae4f6c4e04848cd2c6c8c0a620f5d2e0a</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PreviewImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a5703cae6a354bce921a015951876eed5</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a9b24225f88796876e237953455bbd186</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a8ff2dc42f2c01cb3d22840c933fb790c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a44579e53a2de2be627b5499c8b144f3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>writeFile</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a98da848a2c6744032e850f2cdda1f137</anchor>
      <arglist>(const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>abbaa983607053a777d011dd52add8536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extension</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ad5e0e7c7cad1a328da66dbb0b0022a2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>width</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a9032c7fb6c6d9adc59544684756bd88b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>height</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a7c3928b9bc0a457bdd03ae7a05fc00ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PreviewId</type>
      <name>id</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ad18a4e8f8fe091bce58b176eb81f6ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>ae4f6c4e04848cd2c6c8c0a620f5d2e0a</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PreviewImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PreviewImage.html</anchorfile>
      <anchor>a5703cae6a354bce921a015951876eed5</anchor>
      <arglist>(const PreviewImage &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PreviewManager</name>
    <filename>classExiv2_1_1PreviewManager.html</filename>
    <member kind="function">
      <type></type>
      <name>PreviewManager</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a0edb9d34d5cc76037151dcaab7317e1b</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>PreviewPropertiesList</type>
      <name>getPreviewProperties</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a63153d86a8565bf07796fa0b38e55e79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PreviewImage</type>
      <name>getPreviewImage</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>aa16166ec332f445655bb8308bf69658d</anchor>
      <arglist>(const PreviewProperties &amp;properties) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreviewManager</name>
      <anchorfile>classExiv2_1_1PreviewManager.html</anchorfile>
      <anchor>a0edb9d34d5cc76037151dcaab7317e1b</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::PreviewProperties</name>
    <filename>structExiv2_1_1PreviewProperties.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>mimeType_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>ab32f9721c47d556fd7f91113d72f7796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>extension_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a23ec6b06fe598f94899bd2d9e563b61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a19b26f29bbb63bd917b9fa64a9881069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>width_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a592860d7a998f25ac9714c9b6e37a73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>height_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a411d95bac020e1023831b201353c4579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PreviewId</type>
      <name>id_</name>
      <anchorfile>structExiv2_1_1PreviewProperties.html</anchorfile>
      <anchor>a62c48b5507740d5dda73bf4c0a534da0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::PsdImage</name>
    <filename>classExiv2_1_1PsdImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>PsdImage</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a080bd3a5660e6b5a1a9262efa0749d7f</anchor>
      <arglist>(const PsdImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>PsdImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a0b29f7db9303176eae070b9d4e12af4a</anchor>
      <arglist>(const PsdImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsdImage</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>ab5b214162b03835d46dada87010ea530</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsdImage</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a080bd3a5660e6b5a1a9262efa0749d7f</anchor>
      <arglist>(const PsdImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>PsdImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a0b29f7db9303176eae070b9d4e12af4a</anchor>
      <arglist>(const PsdImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PsdImage</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>ab5b214162b03835d46dada87010ea530</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>aff644926cc689a54b51e796f725882e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a2fe37f16ec942b28453388920cbeaae9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>aa3347cd9d2acaa829165ba5b98f94da0</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1PsdImage.html</anchorfile>
      <anchor>a614dd317dbed3b002ab1b4810a124355</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::PtrSliceStorage</name>
    <filename>structExiv2_1_1Internal_1_1PtrSliceStorage.html</filename>
    <templarg>typename storage_type</templarg>
    <member kind="function">
      <type></type>
      <name>PtrSliceStorage</name>
      <anchorfile>structExiv2_1_1Internal_1_1PtrSliceStorage.html</anchorfile>
      <anchor>a5d5a12af2bf8996c4ea222bc42540e53</anchor>
      <arglist>(storage_type ptr, size_t, size_t)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>unsafeAt</name>
      <anchorfile>structExiv2_1_1Internal_1_1PtrSliceStorage.html</anchorfile>
      <anchor>ab58287fa5f36a2fd3e40f4c0ccf42a29</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>unsafeGetIteratorAt</name>
      <anchorfile>structExiv2_1_1Internal_1_1PtrSliceStorage.html</anchorfile>
      <anchor>aba4d82e016df90670839fa7d42b7d734</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RafImage</name>
    <filename>classExiv2_1_1RafImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>RafImage</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a9525d311a09c68ad33bea12a77e65c30</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a0073284f1d00a896f0e3d9fccb7b8872</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a61fce7f3cabec82b969bfbd66fd33461</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a23f7da45da321b438c23adee73bcb095</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>acc2395cfe70a960ade779487e61d274e</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a843eb0de250413ec6792a0508fc13a07</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>ae83d92e53e8046be6e5d188b480108b2</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>adc2bad93f25b39ffe985dc96d27473a7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a35a36dbcf84e12ce0affb96e8e471bdd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a45f09d809cbbe3f1e00b2020a4596cfd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RafImage</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a1fe36fd860d3baa8d540669e15cea862</anchor>
      <arglist>(const RafImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>RafImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a2af0114dfbae5bd7c492611c9fe66eba</anchor>
      <arglist>(const RafImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RafImage</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a9525d311a09c68ad33bea12a77e65c30</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a0073284f1d00a896f0e3d9fccb7b8872</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a61fce7f3cabec82b969bfbd66fd33461</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a23f7da45da321b438c23adee73bcb095</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>acc2395cfe70a960ade779487e61d274e</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a843eb0de250413ec6792a0508fc13a07</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>ae83d92e53e8046be6e5d188b480108b2</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>adc2bad93f25b39ffe985dc96d27473a7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a35a36dbcf84e12ce0affb96e8e471bdd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a45f09d809cbbe3f1e00b2020a4596cfd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RafImage</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a1fe36fd860d3baa8d540669e15cea862</anchor>
      <arglist>(const RafImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>RafImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1RafImage.html</anchorfile>
      <anchor>a2af0114dfbae5bd7c492611c9fe66eba</anchor>
      <arglist>(const RafImage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::RecordInfo</name>
    <filename>structExiv2_1_1RecordInfo.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>recordId_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>a71fd4b561cf49a78bf8bf7f1f9b0031c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>a47f007869517298a0286198f7b71bccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1RecordInfo.html</anchorfile>
      <anchor>ac429789d68ad77b2364ee13d943da26a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::RemoteIo</name>
    <filename>classExiv2_1_1RemoteIo.html</filename>
    <base>Exiv2::BasicIo</base>
    <class kind="class">Exiv2::RemoteIo::Impl</class>
    <member kind="function">
      <type></type>
      <name>~RemoteIo</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a0ddf8a3ca680ad6211f40a56ed11a2cc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a63aca5e16f7dc695bc8bf359bb68bec4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a2561a8b481e8e9708a871e95e6b82e9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a33b8b843252df0821a57060cfb877ee9</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aa9a30e9f32c9cbc980b457ab6e876faa</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ad0e1e6a387a98ff785f6934693c42707</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aac3eb6d5609c7f8efef8fe9ad726aab4</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a78f986b40832b105440a137a442c538c</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>af900e521502facb4a90e683331f660ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ae859b90862dc4d100e8c976a03e3a2fb</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a210aa6fd2d2613cb2734d63bb94f1e81</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a71f8b024d6584d4bf2fdabfa5ee70cba</anchor>
      <arglist>(bool=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ab367d0d82aaf8f043eeefe1ac9d5a0dc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Impl *</type>
      <name>p_</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a2b8a068c616c8c0e238e38bcd5266fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>tell</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ae53f48c4a3da00204d74aa81a0731d48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a5315db873769ff21ce82aaa89d1785b4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isopen</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ae62d254e089d4c3d650dc6080df51689</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>error</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a37ff4fb67157e839b074326bf7f1888e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aa77ebc634c484ecca486601c5e9b56da</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a506be9323d717f25b397c068da1bd2db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populateFakeData</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a68abdaa7562a27f0f52be05cae5938fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a63aca5e16f7dc695bc8bf359bb68bec4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>close</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a2561a8b481e8e9708a871e95e6b82e9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a33b8b843252df0821a57060cfb877ee9</anchor>
      <arglist>(const byte *data, long wcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aa9a30e9f32c9cbc980b457ab6e876faa</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ad0e1e6a387a98ff785f6934693c42707</anchor>
      <arglist>(byte data) override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>aac3eb6d5609c7f8efef8fe9ad726aab4</anchor>
      <arglist>(long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a78f986b40832b105440a137a442c538c</anchor>
      <arglist>(byte *buf, long rcount) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getb</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>af900e521502facb4a90e683331f660ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ae859b90862dc4d100e8c976a03e3a2fb</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seek</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a210aa6fd2d2613cb2734d63bb94f1e81</anchor>
      <arglist>(long offset, Position pos) override</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>mmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>a71f8b024d6584d4bf2fdabfa5ee70cba</anchor>
      <arglist>(bool=false) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>munmap</name>
      <anchorfile>classExiv2_1_1RemoteIo.html</anchorfile>
      <anchor>ab367d0d82aaf8f043eeefe1ac9d5a0dc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_const</name>
    <filename>structExiv2_1_1Internal_1_1remove__const.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_const&lt; const T &gt;</name>
    <filename>structExiv2_1_1Internal_1_1remove__const_3_01const_01T_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_cv</name>
    <filename>structExiv2_1_1Internal_1_1remove__cv.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_pointer</name>
    <filename>structExiv2_1_1Internal_1_1remove__pointer.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_pointer&lt; T * &gt;</name>
    <filename>structExiv2_1_1Internal_1_1remove__pointer_3_01T_01_5_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_pointer&lt; T *const &gt;</name>
    <filename>structExiv2_1_1Internal_1_1remove__pointer_3_01T_01_5const_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_volatile</name>
    <filename>structExiv2_1_1Internal_1_1remove__volatile.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::remove_volatile&lt; volatile T &gt;</name>
    <filename>structExiv2_1_1Internal_1_1remove__volatile_3_01volatile_01T_01_4.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Rw2Header</name>
    <filename>classExiv2_1_1Internal_1_1Rw2Header.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>ac40a81a8968e35bc1eed614aa4ed513b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>aad7382f74efbd70ae66cfb45b26739ec</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>a40756ef8fa663577a3cb5ff419f14037</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>ac40a81a8968e35bc1eed614aa4ed513b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rw2Header</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>aad7382f74efbd70ae66cfb45b26739ec</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1Rw2Header.html</anchorfile>
      <anchor>a40756ef8fa663577a3cb5ff419f14037</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Rw2Image</name>
    <filename>classExiv2_1_1Rw2Image.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>Rw2Image</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ac0306725d3b2265aac72c13fa2de3470</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a1fcb1f1895b716e01c6cb3382c96ced6</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ab98039abe05c311016f0ae7d8ec90b6e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a3f244b304325b4e8b956919931dee02f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ad587f6a05b67a415ced21ec40eb8a2fc</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a3e0d03cb70884b4b9d08715063e44c38</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a49b54c1b86f9bb11166bfb64627f8a05</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>afa567908daccec6d508503a80b73a4fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ac046944697afee931e974444f97537c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a46ea4a753c86588f411c085cbb336b86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rw2Image</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a06cf4b88505e805d7fafb4b3d7f5a848</anchor>
      <arglist>(const Rw2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Rw2Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a42dcb0917371f94963738bdb5687d5d5</anchor>
      <arglist>(const Rw2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rw2Image</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ac0306725d3b2265aac72c13fa2de3470</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a1fcb1f1895b716e01c6cb3382c96ced6</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ab98039abe05c311016f0ae7d8ec90b6e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a3f244b304325b4e8b956919931dee02f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ad587f6a05b67a415ced21ec40eb8a2fc</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a3e0d03cb70884b4b9d08715063e44c38</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a49b54c1b86f9bb11166bfb64627f8a05</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>afa567908daccec6d508503a80b73a4fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>ac046944697afee931e974444f97537c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a46ea4a753c86588f411c085cbb336b86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rw2Image</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a06cf4b88505e805d7fafb4b3d7f5a848</anchor>
      <arglist>(const Rw2Image &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>Rw2Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Rw2Image.html</anchorfile>
      <anchor>a42dcb0917371f94963738bdb5687d5d5</anchor>
      <arglist>(const Rw2Image &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Rw2Parser</name>
    <filename>classExiv2_1_1Rw2Parser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Rw2Parser.html</anchorfile>
      <anchor>a374b0e0b9d6b0713ac472164e9473ee2</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::Samsung2MakerNote</name>
    <filename>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</anchorfile>
      <anchor>af65fcdab3f3257c893de9da8be9db8fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListPw</name>
      <anchorfile>classExiv2_1_1Internal_1_1Samsung2MakerNote.html</anchorfile>
      <anchor>acd8c20f8ba51f1613f02fd921b5bc789</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SamsungMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SamsungMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SamsungMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a06a0a641aed24a6251d001713e37d99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>ac3de9c53d1f66190024a2f448ff24f95</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a6305d4d6d8ff87c47d3c0ef8a2c385d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>ae0310405079177d3a0b6f7f6339b250b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a0f5f0af6c279eafffd196d0cb64f92c4</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamsungMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a06a0a641aed24a6251d001713e37d99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>ac3de9c53d1f66190024a2f448ff24f95</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a6305d4d6d8ff87c47d3c0ef8a2c385d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>ae0310405079177d3a0b6f7f6339b250b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SamsungMnHeader.html</anchorfile>
      <anchor>a0f5f0af6c279eafffd196d0cb64f92c4</anchor>
      <arglist>(uint32_t mnOffset) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::SectionInfo</name>
    <filename>structExiv2_1_1Internal_1_1SectionInfo.html</filename>
    <member kind="variable">
      <type>SectionId</type>
      <name>sectionId_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>aa06733950dd5dcd3d391ffb2e472d1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>a44c5f0fa92f1075b36e35f2b8ebcae30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SectionInfo.html</anchorfile>
      <anchor>abe87f6b64f66d1959a067b80c1dc37f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SigmaMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1SigmaMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>a979b001c0c27d8186f683e01adb0ccb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printStripLabel</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>af9d597dfb029f5567b1d4dec4b995670</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0008</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>a3aa00e02413d8f3e751a23eb0f1b1027</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0x0009</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMakerNote.html</anchorfile>
      <anchor>ab6d8642d4e2b50e94a92967de5ab31ee</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SigmaMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SigmaMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>abe6ea09d00b3260f8111bba0769ea30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>acfc636414a7e2e11b73a9e0ea69a3ad1</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a6d0e0feb970a2a8400c6c14a3c6bb825</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a4b6d411684a55e563d5b7f006de54aea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a8211e12bfe8a715ea2c4e337236981d0</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>ad7456eac963491d236005a9f84b3cca0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a9dbe8396993f453fb06bfee92ca19493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>abe6ea09d00b3260f8111bba0769ea30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SigmaMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>acfc636414a7e2e11b73a9e0ea69a3ad1</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SigmaMnHeader.html</anchorfile>
      <anchor>a6d0e0feb970a2a8400c6c14a3c6bb825</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Slice</name>
    <filename>structExiv2_1_1Slice.html</filename>
    <templarg>typename container</templarg>
    <base>MutableSliceBase&lt; Internal::ContainerStorage, container &gt;</base>
    <member kind="function">
      <type></type>
      <name>Slice</name>
      <anchorfile>structExiv2_1_1Slice.html</anchorfile>
      <anchor>a4d30a189f99d523da17b078a2ad09cce</anchor>
      <arglist>(container &amp;cont, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>Slice</type>
      <name>subSlice</name>
      <anchorfile>structExiv2_1_1Slice.html</anchorfile>
      <anchor>a3a837cc0faf8dd67b88f2bd38932fb25</anchor>
      <arglist>(size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; const container &gt;</type>
      <name>subSlice</name>
      <anchorfile>structExiv2_1_1Slice.html</anchorfile>
      <anchor>a8c8582e7a4d1a79a203afc2b7e157ac5</anchor>
      <arglist>(size_t begin, size_t end) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Slice&lt; const container &gt;</name>
    <filename>structExiv2_1_1Slice_3_01const_01container_01_4.html</filename>
    <templarg>typename container</templarg>
    <base>ConstSliceBase&lt; Internal::ContainerStorage, const container &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Slice&lt; const T * &gt;</name>
    <filename>structExiv2_1_1Slice_3_01const_01T_01_5_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>ConstSliceBase&lt; Internal::PtrSliceStorage, const T * &gt;</base>
    <member kind="function">
      <type></type>
      <name>Slice</name>
      <anchorfile>structExiv2_1_1Slice_3_01const_01T_01_5_01_4.html</anchorfile>
      <anchor>a9b57d0cf5ee9eee529a130580b60b022</anchor>
      <arglist>(const T *ptr, size_t begin, size_t end)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Slice&lt; T * &gt;</name>
    <filename>structExiv2_1_1Slice_3_01T_01_5_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>MutableSliceBase&lt; Internal::PtrSliceStorage, T * &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::SliceBase</name>
    <filename>structExiv2_1_1Internal_1_1SliceBase.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structExiv2_1_1Internal_1_1SliceBase.html</anchorfile>
      <anchor>a720342ddba83da25127231e6e8a052d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rangeCheck</name>
      <anchorfile>structExiv2_1_1Internal_1_1SliceBase.html</anchorfile>
      <anchor>aee4deafe8085562d6a4889063421f720</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const size_t</type>
      <name>begin_</name>
      <anchorfile>structExiv2_1_1Internal_1_1SliceBase.html</anchorfile>
      <anchor>aa3385c250725aba1076a6ae203e089c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SonyMakerNote</name>
    <filename>classExiv2_1_1Internal_1_1SonyMakerNote.html</filename>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a67104c1ffd06c6bccf29e07f1f4c81e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a62e5997564d3ce36ecc6aaf5aede3065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListCs2</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ae661749988e8f255c80c8c1fce9478a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListFp</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a5526fcb9d518a3a28132611d798b7dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSonyMisc1</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>abdacd30030d46dd0c8c3d5abeba9036e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSonyMisc2b</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a9afc38011340ce504c6bacbd550759bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSonyMisc3c</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ae9a96849980c1bd3c7ef86d45ead5750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagListSonySInfo1</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a209b5f7b3d49ec019b4bb7d81cabe89a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TagInfo *</type>
      <name>tagList2010e</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a0f28a7a39b0d1c7c0a0200762359d2bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc1CameraTemperature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>aebb0731006974cd79e080545a4ba67a1</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSony2FpFocusMode</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a807f6c18e73273b30a3f67b04ebd8233</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSony2FpFocusPosition2</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a2422797049b2821a059ed86929229c90</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSony2FpAmbientTemperature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a932c2d8738e055e58a09c9052273de7a</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc2bLensZoomPosition</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ade29692cd92706c63e30ee3feee3e278</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc2bFocusPosition2</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a0034314e6cc9ec90202c53637b6c79da</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc3cShotNumberSincePowerUp</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>aa5bf796f1b53e88ab8e2ca7c74727024</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc3cSequenceNumber</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a6b09e351667b74317f5d5018cc3622e9</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc3cSonyImageHeight</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a331d14915bda8780128ef84f0b5dd320</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc3cModelReleaseYear</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>afd411a90a281dfab80a23a82dc1ecd52</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printSonyMisc3cQuality2</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>af7fd5f66881ec52e1d630682884758ab</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>print0xb000</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>ab87f1665cf27045c3f9dc82a6c4a55ba</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printImageSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMakerNote.html</anchorfile>
      <anchor>a9e5f5373ec18b941d732aa912ab67fad</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::SonyMnHeader</name>
    <filename>classExiv2_1_1Internal_1_1SonyMnHeader.html</filename>
    <base>Exiv2::Internal::MnHeader</base>
    <member kind="function">
      <type></type>
      <name>SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a054f57e798221d80cc0bfd0c4c645428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a21db76471664adfd85d40d5df430a922</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a6cd75ab34acdc526473b2f0705a888db</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a97c45b36162f3286b29bb3a41cb14dc2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>add1a43e649073d12178a5a160dbf8e8a</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a95257e65f006b09981e1fe0e2b0d4a3d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>sizeOfSignature</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a28a7b4a8065aedb86f0c06bdcf9da00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a054f57e798221d80cc0bfd0c4c645428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SonyMnHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a21db76471664adfd85d40d5df430a922</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1SonyMnHeader.html</anchorfile>
      <anchor>a6cd75ab34acdc526473b2f0705a888db</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::StringValue</name>
    <filename>classExiv2_1_1StringValue.html</filename>
    <base>Exiv2::StringValueBase</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StringValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a9619eb0b490d90f9a984cc63e53b8776</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>ac9c7091aad2def3f845d5a2aa5ee9509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a78c21b549e4ddb9b8bbbf62f54cc287f</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>aeaa0d124f6fba9c567f3182e52bf96ab</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>ac9c7091aad2def3f845d5a2aa5ee9509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>a78c21b549e4ddb9b8bbbf62f54cc287f</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringValue</name>
      <anchorfile>classExiv2_1_1StringValue.html</anchorfile>
      <anchor>aeaa0d124f6fba9c567f3182e52bf96ab</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::StringValueBase</name>
    <filename>classExiv2_1_1StringValueBase.html</filename>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StringValueBase &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a3efb58b82decfc06e715ba6517acf417</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a5787c8e04b3cec1870b3abd95d15ea6b</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a837785dfc0f3561c939c2a9b4224ceb0</anchor>
      <arglist>(TypeId typeId, const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad618961fa4baa6df1975bcdca16e901e</anchor>
      <arglist>(const StringValueBase &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>aeed0d298defaf63262678c1976f20bad</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a89cdcd23a22d5a824d2f6e4b1230ebc3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad3d4d55aa5b81780df984de05f804bd4</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a64379351d8550e054f871067e4fecfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad674bd6861e9a3951909b4df28a7fc38</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ae40b72fc31ff42e55665e93a2db7320d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a285e0b36eeb427f1af9e6282b5239ca9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a5f3e146456501ddf64fd719b8b4fb017</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>aab282a45dd41ef74e9052d4a3065238e</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a3769b66fa8791617024965f88d52cb7e</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>acbe1d9dc5ebb0f663e226673b040c062</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StringValueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a63dbdd58d31e39e7803445931f18d701</anchor>
      <arglist>(const StringValueBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>StringValueBase *</type>
      <name>clone_</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a0c751aa96775970844585ad5f0b57fc7</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a5787c8e04b3cec1870b3abd95d15ea6b</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a837785dfc0f3561c939c2a9b4224ceb0</anchor>
      <arglist>(TypeId typeId, const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad618961fa4baa6df1975bcdca16e901e</anchor>
      <arglist>(const StringValueBase &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringValueBase</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>aeed0d298defaf63262678c1976f20bad</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>a89cdcd23a22d5a824d2f6e4b1230ebc3</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1StringValueBase.html</anchorfile>
      <anchor>ad3d4d55aa5b81780df984de05f804bd4</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::FileIo::Impl::StructStat</name>
    <filename>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</filename>
    <member kind="variable">
      <type>mode_t</type>
      <name>st_mode</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a1961a2c26a57c8c9848022c20f7ff725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>off_t</type>
      <name>st_size</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a4d16a0ac65419c462580893efb1a6ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nlink_t</type>
      <name>st_nlink</name>
      <anchorfile>structExiv2_1_1FileIo_1_1Impl_1_1StructStat.html</anchorfile>
      <anchor>a11db88a8966a9bece649989065f5ba42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagDetails</name>
    <filename>structExiv2_1_1Internal_1_1TagDetails.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>ab47037162b09a9fe51bde0ab649fc8df</anchor>
      <arglist>(long key) const</arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>val_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>aa8fab67458afa3c98ee306936942e9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetails.html</anchorfile>
      <anchor>a329a8dc06b52b3ac67359c51d65d76dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagDetailsBitmask</name>
    <filename>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mask_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</anchorfile>
      <anchor>a7e77d36a2f5d1cbd51a914854a06416a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagDetailsBitmask.html</anchorfile>
      <anchor>a8a03ad485e4eb535ea89a77bd96833ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::TagInfo</name>
    <filename>structExiv2_1_1TagInfo.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a291383d59e6a7f82e4a877f3e386cfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>af821ebc91a9fd1d8c2eced26af005f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>abfa8eeca7df313f229fab2d95ecf7fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>abccdbeda3069c3bd046c8cb40eaa338d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ifdId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>ab2e85247276b0422e6f62d3581b160fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sectionId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a6820c97793afabfe503a1d72c41c576e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>typeId_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>aa0358a82b290c8a5a351a646e39f3b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>count_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>a97d02a1591e052d5d6f094eea0d71c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PrintFct</type>
      <name>printFct_</name>
      <anchorfile>structExiv2_1_1TagInfo.html</anchorfile>
      <anchor>adfaabfd557743ec3129d2667f1edf3c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TagVocabulary</name>
    <filename>structExiv2_1_1Internal_1_1TagVocabulary.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a9cb0c24412db429a4b998811479ea697</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>voc_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a16d7fa9b6c9bf976008fd9c5c8b66e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>label_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TagVocabulary.html</anchorfile>
      <anchor>a970dbaf26667e1cc7627ba3586f26e65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TgaImage</name>
    <filename>classExiv2_1_1TgaImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>TgaImage</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a743de04d73a1e3e0e96a24d6f26d6fff</anchor>
      <arglist>(const TgaImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>TgaImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a5aa1e537299d5fd8588bfc3138eef92d</anchor>
      <arglist>(const TgaImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TgaImage</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>aa8eb234f72d479a7b4548d9c49004c4d</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a1f24aca15352a5278b6b98bf6e6fa3dd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a07c2d599d99fd900ba216d64fc3ef5de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>af3d83275265604579e4da79d94c08d5b</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>ac02362613b7d8d6a60c488ef4e09e838</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>adcad422051444ed05029cc11f34d5a2e</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>aba5ead4c3f8585b89c1cf5eb298274a6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TgaImage</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a743de04d73a1e3e0e96a24d6f26d6fff</anchor>
      <arglist>(const TgaImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>TgaImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a5aa1e537299d5fd8588bfc3138eef92d</anchor>
      <arglist>(const TgaImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TgaImage</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>aa8eb234f72d479a7b4548d9c49004c4d</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a1f24aca15352a5278b6b98bf6e6fa3dd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>a07c2d599d99fd900ba216d64fc3ef5de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExifData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>af3d83275265604579e4da79d94c08d5b</anchor>
      <arglist>(const ExifData &amp;exifData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>ac02362613b7d8d6a60c488ef4e09e838</anchor>
      <arglist>(const IptcData &amp;iptcData) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>adcad422051444ed05029cc11f34d5a2e</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1TgaImage.html</anchorfile>
      <anchor>aba5ead4c3f8585b89c1cf5eb298274a6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffBinaryArray</name>
    <filename>classExiv2_1_1Internal_1_1TiffBinaryArray.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af4190ceecbb69b8ac64ba70715253b80</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArrayCfg *arrayCfg, const ArrayDef *arrayDef, int defSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af524c960095437ff0051509d395b1c07</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArraySet *arraySet, int setSize, CfgSelFct cfgSelFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a7efd27725641655a8145abf05f458a12</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>addElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ac8240d4cc33515c463d5edc99e358100</anchor>
      <arglist>(uint32_t idx, const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3553703cabd53249611e445e00186bd8</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a967b9f71d33fcf3cbdd42b2d980de7b1</anchor>
      <arglist>(TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iniOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a8c02e3e6547f9d3dd5f0c13a40e54df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a64de17c00126b9bf6748590e013195c7</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3823ad5f78af167150a9f21d9960fbc5</anchor>
      <arglist>(bool decoded)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayCfg *</type>
      <name>cfg</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a24a25f6e55e4c1b86a1f13de99c56a0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>def</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ab979c7f11cec304cbdfc5899ca785882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>aba0808888037306320b3df0dc765c62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a5f7c4709268244f7e131881d07a01673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ab0a0d6f72e52b4fce1f762256780a5c0</anchor>
      <arglist>(const TiffBinaryArray &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a174cbaeb775f8c99c13d6966ae9a2c7a</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ac1b143629a43b756adc5d72bb45bb201</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a6235d92dae8e1748429c4d82f109c664</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a500b892e40d1018168214272ef5df661</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a5271abb795d3dcc13d7cedf0922b13ad</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffBinaryArray *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a314f72a1423fa65f417d2c77e450d030</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a803be3e7ad2f6b7729ca2a9ef1dab7d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a2abd956497f91852a559f8846238d0ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af4190ceecbb69b8ac64ba70715253b80</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArrayCfg *arrayCfg, const ArrayDef *arrayDef, int defSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>af524c960095437ff0051509d395b1c07</anchor>
      <arglist>(uint16_t tag, IfdId group, const ArraySet *arraySet, int setSize, CfgSelFct cfgSelFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a7efd27725641655a8145abf05f458a12</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>addElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ac8240d4cc33515c463d5edc99e358100</anchor>
      <arglist>(uint32_t idx, const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3553703cabd53249611e445e00186bd8</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a967b9f71d33fcf3cbdd42b2d980de7b1</anchor>
      <arglist>(TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iniOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a8c02e3e6547f9d3dd5f0c13a40e54df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updOrigDataBuf</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a64de17c00126b9bf6748590e013195c7</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a3823ad5f78af167150a9f21d9960fbc5</anchor>
      <arglist>(bool decoded)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayCfg *</type>
      <name>cfg</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a24a25f6e55e4c1b86a1f13de99c56a0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>def</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ab979c7f11cec304cbdfc5899ca785882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>aba0808888037306320b3df0dc765c62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decoded</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a5f7c4709268244f7e131881d07a01673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ab0a0d6f72e52b4fce1f762256780a5c0</anchor>
      <arglist>(const TiffBinaryArray &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a174cbaeb775f8c99c13d6966ae9a2c7a</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>ac1b143629a43b756adc5d72bb45bb201</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a6235d92dae8e1748429c4d82f109c664</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a500b892e40d1018168214272ef5df661</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a5271abb795d3dcc13d7cedf0922b13ad</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffBinaryArray *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a314f72a1423fa65f417d2c77e450d030</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a803be3e7ad2f6b7729ca2a9ef1dab7d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryArray.html</anchorfile>
      <anchor>a2abd956497f91852a559f8846238d0ca</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffBinaryElement</name>
    <filename>classExiv2_1_1Internal_1_1TiffBinaryElement.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a2c3dfe8362b2ab712c105369c8450cb1</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>af07aa2d531410623c4754104be10265b</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a47a1d69ebc7dc1031700e889f33bfe6d</anchor>
      <arglist>(const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab8ccf609952eeebc04b51a41bf58aa7c</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>elDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab69a4438d917c8e8a29df0fe1bc830b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>elByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>aedd8f48023c12e9a6e87d2002cdc45ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a855f9ca7960f36446fc6415a7c94265f</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a5c12f279e5cfef25bc47390e659789f6</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a296be91213f8ba11e58452cad37e9456</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffBinaryElement *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>afd0a17ca5350a8bb15f606278e408766</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a2df20e61c6d4fe054c70452d9ee5b830</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a69604f4f5819546491fc482697cf4545</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a2c3dfe8362b2ab712c105369c8450cb1</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>af07aa2d531410623c4754104be10265b</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a47a1d69ebc7dc1031700e889f33bfe6d</anchor>
      <arglist>(const ArrayDef &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab8ccf609952eeebc04b51a41bf58aa7c</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayDef *</type>
      <name>elDef</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>ab69a4438d917c8e8a29df0fe1bc830b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>elByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>aedd8f48023c12e9a6e87d2002cdc45ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a855f9ca7960f36446fc6415a7c94265f</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a5c12f279e5cfef25bc47390e659789f6</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffBinaryElement.html</anchorfile>
      <anchor>a296be91213f8ba11e58452cad37e9456</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffComponent</name>
    <filename>classExiv2_1_1Internal_1_1TiffComponent.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TiffComponent &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aa7c872b8b137bf1bdde6b4eed13ac534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TiffComponent * &gt;</type>
      <name>Components</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a3e0455cc36ec3d13e7c05e74a96d67a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae2e1ca8ba933828ea3913d6e742b67a9</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a818efaf0ef501ca67d7f304a3daffb79</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>adb9f4f01260d86b7934f41b4aebb9830</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, UniquePtr object=UniquePtr(nullptr))</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a62601a9f8b378c08e7d00ee79f445c31</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ac5f87dac39ea05f4c7c66b960c36c261</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae76a57686b20b3f0db99dd43162e6aef</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a58fd0f28208c10d250413636dc760012</anchor>
      <arglist>(const byte *pStart)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1b0e6489abcb3eab4f47c80f02311194</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a376088e27801f6a93f46f404019c0acb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>group</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>abdb4edf35b7125b563dbae85ecce435f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>start</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a185ee361ca7b919eb105b2fa24af9621</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniquePtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1a17c54da171eb3d922ed5ebf1adfe3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aac8336ca7a6aff1eb1dcf53b517407c3</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1dd22da97c6cdcdfa29859f890836008</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a2076ccf276c97c84e30b07df16c47213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a47aec870a7bb7115f334d0d1ac8010b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>af24b58e951525f3b8ad81d6b044f18a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1176216f979ccb018803d8799f00fc26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a8c9c692c2e09fb51f60d35f0ddf54947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1251c1e9edd6f6f4999e2cd39b830ff2</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7c4c4351d1059da8df7f32dc65b63e1f</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ac866d1c789ce1cea3e3ec5d4c0258257</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a82b7887062080957e73100840ad6f4ff</anchor>
      <arglist>(TiffVisitor &amp;visitor)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ad9cbce19baecb7979188542330158d03</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TiffComponent *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a0e9f342ccabe5a355441933f58a10a12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a0f9dd2de27d0451519fe8873b0c68772</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a2956f0d98ceba9cc3d52c89fa89251dd</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7f550c5ab52eb1b12b5b1521fdf0f757</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aeb547ffe6a8f14dddf761464af077f00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a534e05a5ee70714ec4d29da33db3dee6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ab9eb2ed551e3ca3813bf56bc2c674451</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae2e1ca8ba933828ea3913d6e742b67a9</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a818efaf0ef501ca67d7f304a3daffb79</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>adb9f4f01260d86b7934f41b4aebb9830</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, UniquePtr object=UniquePtr(nullptr))</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a62601a9f8b378c08e7d00ee79f445c31</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>addNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ac5f87dac39ea05f4c7c66b960c36c261</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ae76a57686b20b3f0db99dd43162e6aef</anchor>
      <arglist>(TiffVisitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a58fd0f28208c10d250413636dc760012</anchor>
      <arglist>(const byte *pStart)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1b0e6489abcb3eab4f47c80f02311194</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a376088e27801f6a93f46f404019c0acb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>group</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>abdb4edf35b7125b563dbae85ecce435f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>byte *</type>
      <name>start</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a185ee361ca7b919eb105b2fa24af9621</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniquePtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1a17c54da171eb3d922ed5ebf1adfe3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>aac8336ca7a6aff1eb1dcf53b517407c3</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1dd22da97c6cdcdfa29859f890836008</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a2076ccf276c97c84e30b07df16c47213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a47aec870a7bb7115f334d0d1ac8010b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>af24b58e951525f3b8ad81d6b044f18a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1176216f979ccb018803d8799f00fc26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a8c9c692c2e09fb51f60d35f0ddf54947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a1251c1e9edd6f6f4999e2cd39b830ff2</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a7c4c4351d1059da8df7f32dc65b63e1f</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ac866d1c789ce1cea3e3ec5d4c0258257</anchor>
      <arglist>(UniquePtr tiffComponent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>a82b7887062080957e73100840ad6f4ff</anchor>
      <arglist>(TiffVisitor &amp;visitor)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffComponent.html</anchorfile>
      <anchor>ad9cbce19baecb7979188542330158d03</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffCopier</name>
    <filename>classExiv2_1_1Internal_1_1TiffCopier.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ac432131d70fdb78c7e84d8b7b457b9e2</anchor>
      <arglist>(TiffComponent *pRoot, uint32_t root, const TiffHeaderBase *pHeader, const PrimaryGroups *pPrimaryGroups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a3ccbbbbee2da8b12f0bb87841274cc06</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a6d2310ad9531f35a95b4ef2f7a8cdb6c</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a4630b99f1a892893bf53061101bcd421</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a4d0326344481a0f6e290324133e13a70</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a7253d1aff0259a830615160f8f408757</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a581dd6054d3e4dcf16e372f4903971f3</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ac357274cf26af8ad41e58fa9e7c24090</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a4483aaf1e9591b8b117856061128ac61</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a5ab69a3081252f52d42fd1fe023c7054</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a9042aeca3d4c640b2b62e30198be7056</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a6f6905b7aac9772e7d2cf1cbf16aa001</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyObject</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ad93c6b4502bc4b150d18b456f83c253e</anchor>
      <arglist>(TiffComponent *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>ac432131d70fdb78c7e84d8b7b457b9e2</anchor>
      <arglist>(TiffComponent *pRoot, uint32_t root, const TiffHeaderBase *pHeader, const PrimaryGroups *pPrimaryGroups)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffCopier</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCopier.html</anchorfile>
      <anchor>a3ccbbbbee2da8b12f0bb87841274cc06</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffCreator</name>
    <filename>classExiv2_1_1Internal_1_1TiffCreator.html</filename>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; TiffComponent &gt;</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCreator.html</anchorfile>
      <anchor>aef8f160062bf6dee68953c271458f132</anchor>
      <arglist>(uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffCreator.html</anchorfile>
      <anchor>a47e495da6bbd360c753372890192139c</anchor>
      <arglist>(TiffPath &amp;tiffPath, uint32_t extendedTag, IfdId group, uint32_t root)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDataEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffDataEntry.html</filename>
    <base>Exiv2::Internal::TiffDataEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a9599fd771303451d38baea1446ea2f2e</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ab85c25079b9332dff65e7272253b8d92</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a51becd8d92bcbe6933f5ca6d62b36619</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a6b4fc3cb93c9562492b34537344c32b0</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ade3cfb653cac270458faf216ac664b1a</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ae6e8f374397e631b109e800da0995c02</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffDataEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>af9ab990bdd2e19d73644e19bebbb3eef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>abf649eea7492f47cf770b41bf09cdfba</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>aed38692e964acb4632a1d4295eecc661</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a9599fd771303451d38baea1446ea2f2e</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ab85c25079b9332dff65e7272253b8d92</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a51becd8d92bcbe6933f5ca6d62b36619</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>a6b4fc3cb93c9562492b34537344c32b0</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ade3cfb653cac270458faf216ac664b1a</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntry.html</anchorfile>
      <anchor>ae6e8f374397e631b109e800da0995c02</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDataEntryBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a75720f07ddae6f598b0c83644076936c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>aff15659b000712710054234349587d2e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a5e9e26731e696cffd810ab1ebe4a2a85</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset)=0</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>szTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>adb5bfd9fec4a8e9a988a7767ec252a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>szGroup</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a2b99eccc7ef626fe1eb6360a9bcb21fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a75720f07ddae6f598b0c83644076936c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>aff15659b000712710054234349587d2e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDataEntryBase.html</anchorfile>
      <anchor>a5e9e26731e696cffd810ab1ebe4a2a85</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDecoder</name>
    <filename>classExiv2_1_1Internal_1_1TiffDecoder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a1507de48fdedec53c7fbd381a03ba4a6</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, TiffComponent *const pRoot, FindDecoderFct findDecoderFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a83003a25704274551c3168173e37790a</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>acc7c6c3c63fced490c5676a7cad9031e</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a30798648e9cf3505e74056d119754fb0</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a0740cac6aece41ff04e4645f57eef15c</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>aa280505e9f2ae90cf9c7dbc92d26bcef</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>aeef098828b630fed217cf79eeae77da5</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a34fc3df443dfbdad49588d1bd0d8b07f</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a03e85eecdd61edcb85e33481e127b442</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a68e8249a603aa8eb8f9a744409847f6e</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a2e00992c9bfa6644f735a44f20ca610b</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ab260e03b2d29cac4ad9a406df27fa276</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>aa8add8599e73ceafd8c892515e8e1d37</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeStdTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a3dd97ca1a8d80586a24ed6d7c04fe2c4</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeIptc</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a57c90a966b1a575594590d9e6fc2e0dc</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeXmp</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>ae5504e0c2926277b0d6587bf182984c7</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decodeCanonAFInfo</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a5bb1090b1cab13e59006cf2c6d134e0e</anchor>
      <arglist>(const TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a1507de48fdedec53c7fbd381a03ba4a6</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, TiffComponent *const pRoot, FindDecoderFct findDecoderFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDecoder.html</anchorfile>
      <anchor>a83003a25704274551c3168173e37790a</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffDirectory</name>
    <filename>classExiv2_1_1Internal_1_1TiffDirectory.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a01b5039d6a7a353832d9b2014b765c98</anchor>
      <arglist>(uint16_t tag, IfdId group, bool hasNext=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ae0867b20dcf7cf578531ad84e041d4e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7d18175c76cd4af6d9086a02bf8d4324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7b4a36a14d33a89032c115dcf2c3c0d7</anchor>
      <arglist>(const TiffDirectory &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a891e81f7d918052f79dbdc79951de8ad</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a07e4717e16286a46a593f939086dbd17</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>af02757a174180432f14869d2d19ede92</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a334182de8c43c125051ac7a2db1817a6</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a5d2641f51aae8b339a5ad71d57e95180</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffDirectory *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ae71f12d45d254748116a3446be802cfa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ab83aba02871d4bbea5f9e3bcd4142f0b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a0aa884144fbade1ac691b7b7e179e4ff</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a65866a55adc03be6baad92d8a2567a3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a52945a02df266266e59c679975d01128</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a67fc89e0c724fef4cd4957fee8789957</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>aa1c616b14c5cd41854203fc0a24ce294</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a01b5039d6a7a353832d9b2014b765c98</anchor>
      <arglist>(uint16_t tag, IfdId group, bool hasNext=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ae0867b20dcf7cf578531ad84e041d4e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7d18175c76cd4af6d9086a02bf8d4324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a7b4a36a14d33a89032c115dcf2c3c0d7</anchor>
      <arglist>(const TiffDirectory &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a891e81f7d918052f79dbdc79951de8ad</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a07e4717e16286a46a593f939086dbd17</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>af02757a174180432f14869d2d19ede92</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a334182de8c43c125051ac7a2db1817a6</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a5d2641f51aae8b339a5ad71d57e95180</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffDirectory *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ae71f12d45d254748116a3446be802cfa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>ab83aba02871d4bbea5f9e3bcd4142f0b</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a0aa884144fbade1ac691b7b7e179e4ff</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a65866a55adc03be6baad92d8a2567a3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a52945a02df266266e59c679975d01128</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>a67fc89e0c724fef4cd4957fee8789957</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffDirectory.html</anchorfile>
      <anchor>aa1c616b14c5cd41854203fc0a24ce294</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEncoder</name>
    <filename>classExiv2_1_1Internal_1_1TiffEncoder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5c353024ed21cd4faa169ab5d7505b35</anchor>
      <arglist>(ExifData exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData, TiffComponent *pRoot, const bool isNewImage, const PrimaryGroups *pPrimaryGroups, const TiffHeaderBase *pHeader, FindEncoderFct findEncoderFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a46dfc7d6742f971ea663d05f09a66c28</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>af662924a5f782a5e1e502db4b739c105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9edb0b5a11fa93c8df42ac5d924e12ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WriteMethod</type>
      <name>writeMethod</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>af85e03264af4b5b0dbe6245793efae9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5c353024ed21cd4faa169ab5d7505b35</anchor>
      <arglist>(ExifData exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData, TiffComponent *pRoot, const bool isNewImage, const PrimaryGroups *pPrimaryGroups, const TiffHeaderBase *pHeader, FindEncoderFct findEncoderFct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a46dfc7d6742f971ea663d05f09a66c28</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ade01293381d386119dfdf5eb3fc33500</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ae223d735528fcf69934cfa2426199b2e</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9c20797a97b666c6b6379cf4cf2d874b</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a158406941a68c17736c896bf724ff987</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a3ab9645e34605a0ca8eb0f8b3bb6d397</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectoryNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a6f64df0c2c121f1c13242ce58db79d50</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>af16f63eb7399ad7481093e6dd0619603</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a4b59e44aa0888486bfe7b5fab8fbd1b8</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a80588216a4a99934198b65b416cc5534</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a409277a9baf9fa78d06b44f7cfeadaa6</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9bc3d39320d71239eeacec4037f2b141</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArrayEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ae26cc88e2fbde8329fce15cfcfd4daa3</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aeece0b1ac8a82ad905d5e806cc71cabb</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffComponent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a6337b077ea2901f35e8fa5654b563f2d</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9e34574779fa30bafe92bd55487323c5</anchor>
      <arglist>(TiffBinaryElement *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a951ccd77eee85396174abde0e2a3ecb3</anchor>
      <arglist>(TiffBinaryArray *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ac2abfd0b9aedff5d4428bee951cb19af</anchor>
      <arglist>(TiffDataEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a94567744627f7f507cc4f1fa16506647</anchor>
      <arglist>(TiffEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5e3c0f3f3875c5536f83246ba1935bbf</anchor>
      <arglist>(TiffImageEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a2a407a1199102a5865650fafe2a35caf</anchor>
      <arglist>(TiffMnEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>ac49cea13b2c733bb6eb1c9964fc33c26</anchor>
      <arglist>(TiffSizeEntry *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a2a813e9d67f22839131e26087bef6caf</anchor>
      <arglist>(TiffSubIfd *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeTiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a4f7eb1a12c41743206eb186732b916db</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeOffsetEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a99c2f3243b36054e23ed4d0d0acb92f4</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encodeIptc</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a9bb14099d61c48278daa4fe76f484a6e</anchor>
      <arglist>(TiffEntryBase *object, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>aa7f980841679a63fd86e895c64b9268d</anchor>
      <arglist>(TiffComponent *pRootDir, TiffComponent *pSourceDir, uint32_t root)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirty</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEncoder.html</anchorfile>
      <anchor>a5a42879df429239e393283f280019d70</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a9fb8509a4c368ab14db8ea55adb6fe5a</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a8dce035360c9d43f00e016a9709e68f2</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a0d6594c071735ee26ec1ea062d386243</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>aa9680320ba45fd9827b734a3bfadc140</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a12e5b4158dbb6bf9df1c0ba2d9795f4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a9fb8509a4c368ab14db8ea55adb6fe5a</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a8dce035360c9d43f00e016a9709e68f2</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a0d6594c071735ee26ec1ea062d386243</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>aa9680320ba45fd9827b734a3bfadc140</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntry.html</anchorfile>
      <anchor>a12e5b4158dbb6bf9df1c0ba2d9795f4e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffEntryBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffEntryBase.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d2b266cc3f69cf4ed5fbb9dfdd98b93</anchor>
      <arglist>(uint16_t tag, IfdId group, TiffType tiffType=ttUndefined)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a5ecb08fe339f75c541a0efcf733460a1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a120f4553c20edd9a3bedb5bfb2b70627</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a2492ad8b99d7eae18994ebb0e143249f</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a294adfcd18857f59fd43050b69f0cfd9</anchor>
      <arglist>(byte *pData, int32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a9b548e190453de6f89cafea2931b2546</anchor>
      <arglist>(DataBuf buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a096a4471ba37701976dd1210b62df419</anchor>
      <arglist>(Value::UniquePtr value, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>af2438413bf86320dacfd641c8ec970c4</anchor>
      <arglist>(Value::UniquePtr value)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>tiffType</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a3d362e6444e56d72c03f98f595896032</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a93f2505380fe21a213c8e7a00974c401</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a8e33c7e25b58731af61856f4b2f720fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a3594f7b2d4eef0d22e51684d79e38545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value *</type>
      <name>pValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a6c52f17477c53c045255930666e2f383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a93cfd65ac320c9b9846673dd8b6813d0</anchor>
      <arglist>(const TiffEntryBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a897202c050120e1215ca3425380ab7e7</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>ab4966572c77cb1d76d6e98c0dbed4e86</anchor>
      <arglist>(uint32_t count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d207af0c6746b4dc88c2ba5769e5dac</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>aa0b9c6b488144ef93ee5619f4cbf3e75</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d2b266cc3f69cf4ed5fbb9dfdd98b93</anchor>
      <arglist>(uint16_t tag, IfdId group, TiffType tiffType=ttUndefined)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a5ecb08fe339f75c541a0efcf733460a1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a120f4553c20edd9a3bedb5bfb2b70627</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a2492ad8b99d7eae18994ebb0e143249f</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a294adfcd18857f59fd43050b69f0cfd9</anchor>
      <arglist>(byte *pData, int32_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a9b548e190453de6f89cafea2931b2546</anchor>
      <arglist>(DataBuf buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a096a4471ba37701976dd1210b62df419</anchor>
      <arglist>(Value::UniquePtr value, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>af2438413bf86320dacfd641c8ec970c4</anchor>
      <arglist>(Value::UniquePtr value)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>tiffType</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a3d362e6444e56d72c03f98f595896032</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a93f2505380fe21a213c8e7a00974c401</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a8e33c7e25b58731af61856f4b2f720fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const byte *</type>
      <name>pData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a3594f7b2d4eef0d22e51684d79e38545</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value *</type>
      <name>pValue</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a6c52f17477c53c045255930666e2f383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a93cfd65ac320c9b9846673dd8b6813d0</anchor>
      <arglist>(const TiffEntryBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a897202c050120e1215ca3425380ab7e7</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>ab4966572c77cb1d76d6e98c0dbed4e86</anchor>
      <arglist>(uint32_t count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a1d207af0c6746b4dc88c2ba5769e5dac</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>aa0b9c6b488144ef93ee5619f4cbf3e75</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>aa8dfeebfe38997a819822a1900506156</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a833e39fb9f12e705208c42f675033f2f</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a7895ccbba156d92aaa8bba9f5f881f22</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a184cbe1282f06bb90709393f020d9f5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a4639a3ace2ce5025db2748952cc315f6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>ac887ccffcb50fc092e7836ce20cdb4b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint32_t</type>
      <name>writeOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffEntryBase.html</anchorfile>
      <anchor>a45ea0d30421096b90fffda654eafcd83</anchor>
      <arglist>(byte *buf, int32_t offset, TiffType tiffType, ByteOrder byteOrder)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffFinder</name>
    <filename>classExiv2_1_1Internal_1_1TiffFinder.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afce0929db4ef88546a4fb852f324ca5e</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a64b0d5e597b32c364a633d6225a5585e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a24a46dd1dd6c793eefcb70ef24e0cb22</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a748b9518db693cd3a14f9ceaa3fdc476</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ad75d06942f93bf7d3b40cede953ba3d7</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a384cbf93e320c385cff068aa300eba88</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a9ba421353a7a9fe4a501de24081ce71c</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a385e9673eee77fb2405fd9b3a7a91809</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ab16fbf1ac6646e9cfb8fe1a08fe33ecc</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a0d690a867447a035c95149e58a18bb00</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a61c6d4f46e18d2b907bbc4e628701d74</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>aed50f469b97f1c2706b58ce34291fb48</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findObject</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afe0f826f4c5c707916234de7094aa64e</anchor>
      <arglist>(TiffComponent *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ae304660df9b523cbc3bb317aa6514a4c</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>result</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ab64f4d9d170ff8be5db4ceb8cbf33261</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afce0929db4ef88546a4fb852f324ca5e</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffFinder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a64b0d5e597b32c364a633d6225a5585e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a24a46dd1dd6c793eefcb70ef24e0cb22</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a748b9518db693cd3a14f9ceaa3fdc476</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ad75d06942f93bf7d3b40cede953ba3d7</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a384cbf93e320c385cff068aa300eba88</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a9ba421353a7a9fe4a501de24081ce71c</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a385e9673eee77fb2405fd9b3a7a91809</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ab16fbf1ac6646e9cfb8fe1a08fe33ecc</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a0d690a867447a035c95149e58a18bb00</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>a61c6d4f46e18d2b907bbc4e628701d74</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>aed50f469b97f1c2706b58ce34291fb48</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findObject</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>afe0f826f4c5c707916234de7094aa64e</anchor>
      <arglist>(TiffComponent *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffFinder.html</anchorfile>
      <anchor>ae304660df9b523cbc3bb317aa6514a4c</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffGroupStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffGroupStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a4b804f6f6e4fc66d7861395b313bda85</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a64cad03e33b5190430435b344bd5caf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>extendedTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a211c3f8b9aed29b3b7844c4cabd55071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>a03d9ffc3800f49b09b7836e7b89f5b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewTiffCompFct</type>
      <name>newTiffCompFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffGroupStruct.html</anchorfile>
      <anchor>ad24b4536890ac475773d4a1358a4d416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffHeader</name>
    <filename>classExiv2_1_1Internal_1_1TiffHeader.html</filename>
    <base>Exiv2::Internal::TiffHeaderBase</base>
    <member kind="function">
      <type></type>
      <name>TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>a578d4f78f22592940e8f9f93877cd589</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian, uint32_t offset=0x00000008, bool hasImageTags=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>aef9e7879574f3be799b57735ce2829e3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>ac2fc48d5285874b6bbc2a2cd46f22fea</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>a578d4f78f22592940e8f9f93877cd589</anchor>
      <arglist>(ByteOrder byteOrder=littleEndian, uint32_t offset=0x00000008, bool hasImageTags=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeader.html</anchorfile>
      <anchor>aef9e7879574f3be799b57735ce2829e3</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffHeaderBase</name>
    <filename>classExiv2_1_1Internal_1_1TiffHeaderBase.html</filename>
    <member kind="function">
      <type></type>
      <name>TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a7f0305c7aec03206ea8963be88d71f87</anchor>
      <arglist>(uint16_t tag, uint32_t size, ByteOrder byteOrder, uint32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a10261055b664589f19d33344526b85b5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ac6c2b995f17db153877d7a49ad80eaf6</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a398480391f75407ba95f80634e244f48</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ae166b455995299494c6015700752c181</anchor>
      <arglist>(uint32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a49ebeca1f90905053fb2a0c1721c2866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>abd40cf41f6c03fc24c5bacdd8fb3fd62</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ac44a315d1c519aec9d41f0560fc9ab3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>offset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>afe7d18369b17b861722c0adbf1132a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a1cdfac8429928189744e8ca0a948a67a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a0f973ac6789ac838aa7d5b6ac8dde921</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImageTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a0e868f3fa56a6f78e469995091008373</anchor>
      <arglist>(uint16_t tag, IfdId group, const PrimaryGroups *pPrimaryGroups) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a7f0305c7aec03206ea8963be88d71f87</anchor>
      <arglist>(uint16_t tag, uint32_t size, ByteOrder byteOrder, uint32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffHeaderBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a10261055b664589f19d33344526b85b5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ac6c2b995f17db153877d7a49ad80eaf6</anchor>
      <arglist>(const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>a398480391f75407ba95f80634e244f48</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffHeaderBase.html</anchorfile>
      <anchor>ae166b455995299494c6015700752c181</anchor>
      <arglist>(uint32_t offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffIfdMakernote</name>
    <filename>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</filename>
    <base>Exiv2::Internal::TiffComponent</base>
    <member kind="function">
      <type></type>
      <name>TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adb044a76bf663904946027f52c309374</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, MnHeader *pHeader, bool hasNext=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a84aeffddb33cc8cc2f536dde7030feb8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a509ac44715f29e9c56486bc15d6fa282</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a20548b0d390dd53f9192326853715759</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aad6227d7129f265443a6c6ff2ba8b2bd</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a5fbcc41f892f0bd4f2c33c2c2b4a6085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aedd90e897397f49e94e5a5920e3b3952</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>mnOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ada4cfcd498be71ebfd413ac301a6e44d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ac223cb6c6faeada71037af6660068f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ac9ff2d925b6caf48b1b78826f016d51b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>imageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a841d1d531abdd30dc326d7e4342ee02b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>abbfe2c5a8d25b0b12e577a8af0e62c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9eed5f22d176e764e33d1f5e1364ad4e</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>af346bd39a9bab81f74a2f9043ca36a8b</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a0ffafa015cf3d4d0198fbba0af452c83</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a7f3e2b71e5e7b01bd41edc5ff8c3823d</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a107f30709d3b3fcd0dd65263d43c7b59</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffIfdMakernote *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9e24f31c6fb9139f98a00874f1c21bdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a574d3f831cee27bc5c8f1933500a9981</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9b6fef854e6d0db7b921c3e535cab5d9</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a34721be1d8f369c55ef4263c6ba3ef79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ab49a712b37d94e77fe684fa9ec93ba0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a367e793413aec50121365e06efba6e7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a4defe2373be0c12cb9013b7f4fee70d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>adb044a76bf663904946027f52c309374</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, MnHeader *pHeader, bool hasNext=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a84aeffddb33cc8cc2f536dde7030feb8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a509ac44715f29e9c56486bc15d6fa282</anchor>
      <arglist>(const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a20548b0d390dd53f9192326853715759</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aad6227d7129f265443a6c6ff2ba8b2bd</anchor>
      <arglist>(ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sizeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a5fbcc41f892f0bd4f2c33c2c2b4a6085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>writeHeader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>aedd90e897397f49e94e5a5920e3b3952</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>mnOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ada4cfcd498be71ebfd413ac301a6e44d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ifdOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ac223cb6c6faeada71037af6660068f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ac9ff2d925b6caf48b1b78826f016d51b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>imageByteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a841d1d531abdd30dc326d7e4342ee02b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>abbfe2c5a8d25b0b12e577a8af0e62c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9eed5f22d176e764e33d1f5e1364ad4e</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>af346bd39a9bab81f74a2f9043ca36a8b</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a0ffafa015cf3d4d0198fbba0af452c83</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a7f3e2b71e5e7b01bd41edc5ff8c3823d</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a107f30709d3b3fcd0dd65263d43c7b59</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffIfdMakernote *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9e24f31c6fb9139f98a00874f1c21bdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a574d3f831cee27bc5c8f1933500a9981</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a9b6fef854e6d0db7b921c3e535cab5d9</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a34721be1d8f369c55ef4263c6ba3ef79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>ab49a712b37d94e77fe684fa9ec93ba0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a367e793413aec50121365e06efba6e7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffIfdMakernote.html</anchorfile>
      <anchor>a4defe2373be0c12cb9013b7f4fee70d7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TiffImage</name>
    <filename>classExiv2_1_1TiffImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>TiffImage</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a481d7ffd4bb36e622822ab449aed095e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a0e5e8cb50aba7643a2c0cf9b7189408f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a2c0f9058c55db72bf06f46f676bdcd9a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a6d945c3f32afdcb8a7833bf7f59e6b17</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth=0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ade0859dfecef16a32c80b918a6dd9e3d</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffImage</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a721f3d56ba67423d4b3eecdd4f8768c1</anchor>
      <arglist>(const TiffImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>TiffImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a913b42a5345c598c507faf1e3dc553f3</anchor>
      <arglist>(const TiffImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a536ecfc6a106e6a4f96c9166e4d60e63</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelWidth</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a40919f3bc91c58546e5c61349268f106</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pixelHeight</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>acd18a331ee99728c9742b33319cb4580</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffImage</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a481d7ffd4bb36e622822ab449aed095e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a0e5e8cb50aba7643a2c0cf9b7189408f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a2c0f9058c55db72bf06f46f676bdcd9a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a6d945c3f32afdcb8a7833bf7f59e6b17</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth=0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>ade0859dfecef16a32c80b918a6dd9e3d</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffImage</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a721f3d56ba67423d4b3eecdd4f8768c1</anchor>
      <arglist>(const TiffImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>TiffImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1TiffImage.html</anchorfile>
      <anchor>a913b42a5345c598c507faf1e3dc553f3</anchor>
      <arglist>(const TiffImage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffImageEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffImageEntry.html</filename>
    <base>Exiv2::Internal::TiffDataEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aa5e4c9cc96d3a6f85fb33ede94aeda3c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a4be3af0d2e57a9a55ba3472b5beefb35</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ae3c61c9d6acd9ac3ae75b7b9662b1135</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a14fc98e52efa0c90cd8601b57318651f</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a014ebb4907aa42cc7a528494e1e572f8</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ac72229cc40ed5e95633b7322160a54a0</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffImageEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a7b2e33bb61bdd50cbbd7f32cad1cbac5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>adc2eb9a78b245396000eaeaf76d79d39</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a8dbde6f811e1bf66e71b15245fd9b661</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aa69916ae8125575cd504b3cbb437a99b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a1a5a4c71ee7c7a6b959a2f32f8d2a73b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a096678e6aa911ba035afe35af434c081</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>aa5e4c9cc96d3a6f85fb33ede94aeda3c</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t szTag, IfdId szGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a4be3af0d2e57a9a55ba3472b5beefb35</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrips</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ae3c61c9d6acd9ac3ae75b7b9662b1135</anchor>
      <arglist>(const Value *pSize, const byte *pData, uint32_t sizeData, uint32_t baseOffset) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a14fc98e52efa0c90cd8601b57318651f</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>a014ebb4907aa42cc7a528494e1e572f8</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffImageEntry.html</anchorfile>
      <anchor>ac72229cc40ed5e95633b7322160a54a0</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffImgTagStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a301d5d0cb67c56187b0f1611ff21d798</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>tag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a5dd4345fa1fadf39f28197cc77e2dce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffImgTagStruct.html</anchorfile>
      <anchor>a3a7694948ee2d27aa62a3c8c67ac975c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMapping</name>
    <filename>classExiv2_1_1Internal_1_1TiffMapping.html</filename>
    <member kind="function" static="yes">
      <type>static DecoderFct</type>
      <name>findDecoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMapping.html</anchorfile>
      <anchor>a03f4d94b3e5dcad752ce88e228bb5c2d</anchor>
      <arglist>(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EncoderFct</type>
      <name>findEncoder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMapping.html</anchorfile>
      <anchor>af1929701af5886a4768883d577e96a1c</anchor>
      <arglist>(const std::string &amp;make, uint32_t extendedTag, IfdId group)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMappingInfo</name>
    <filename>structExiv2_1_1Internal_1_1TiffMappingInfo.html</filename>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>aab944d197bb86c9c41f880fbb43785d5</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a9aa0add099ded02f7937503182b81a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>make_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a5201e70fead4789a4969483b097bedb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>extendedTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>ae0d7bb896e528f306919dee8595d9cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>a21b161ea8e0b852a87bd84ee2d3b4fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DecoderFct</type>
      <name>decoderFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>ae6acc40e13d18b9727e4e89da3e0d241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EncoderFct</type>
      <name>encoderFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMappingInfo.html</anchorfile>
      <anchor>affe24e6d1e86125c78cbee1006d22ad8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMnCreator</name>
    <filename>classExiv2_1_1Internal_1_1TiffMnCreator.html</filename>
    <member kind="function" static="yes">
      <type>static TiffComponent *</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a1320c47f78af761d8851a4d3607bbbe1</anchor>
      <arglist>(uint16_t tag, IfdId group, const std::string &amp;make, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TiffComponent *</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a915e49d948c7dec21fdc11d860583197</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TiffMnCreator</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnCreator.html</anchorfile>
      <anchor>a0a452592361c5ae821a6e0da616012ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffMnEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffMnEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a3b8e2c44f34b63ab0741b2c873e07adc</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>acf7cdfa6c33e2f305e595d7cd3ec4e1b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>aca0ce07c7c497333e24a910d8272a909</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a71c4e826fec99f6d861e6448e1bc85ec</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a2f197188289ef30c83a44c8cad2dc098</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a5ca6b4b65f396b1fa860820a42eae95e</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a622c1ce705e3e0d66f0e434257d9dd09</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>ac4a828feb6994566a373456b8b67d986</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffMnEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a49ec4ad8ea0325cae87b60c66e0c4ce1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>af66a3e65ed140fd700d0cf33191ca1e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a15b45afd148e87cd1a67e97e94e3af81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a3b8e2c44f34b63ab0741b2c873e07adc</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>acf7cdfa6c33e2f305e595d7cd3ec4e1b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>aca0ce07c7c497333e24a910d8272a909</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a71c4e826fec99f6d861e6448e1bc85ec</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a2f197188289ef30c83a44c8cad2dc098</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a5ca6b4b65f396b1fa860820a42eae95e</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a622c1ce705e3e0d66f0e434257d9dd09</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>ac4a828feb6994566a373456b8b67d986</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffMnEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a49ec4ad8ea0325cae87b60c66e0c4ce1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doCount</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>af66a3e65ed140fd700d0cf33191ca1e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffMnEntry.html</anchorfile>
      <anchor>a15b45afd148e87cd1a67e97e94e3af81</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffMnRegistry</name>
    <filename>structExiv2_1_1Internal_1_1TiffMnRegistry.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a07cd6cab9f598dbc48225468cf10bce7</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>aef7a89d9e87716230f32aa87d7d1f9ed</anchor>
      <arglist>(IfdId key) const</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>make_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>ad0149fb2e2d044796a34a0c50fa0e5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>mnGroup_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a31e3506887912409274cc2f33fcf8c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewMnFct</type>
      <name>newMnFct_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a4dd24f06766c40d5ed78c4e79f379c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NewMnFct2</type>
      <name>newMnFct2_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffMnRegistry.html</anchorfile>
      <anchor>a248f96cdb6b4f0cdc72a0b9180c7f323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TiffParser</name>
    <filename>classExiv2_1_1TiffParser.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1TiffParser.html</anchorfile>
      <anchor>ab0ec8b956507f84e8bda0125d02e5069</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1TiffParser.html</anchorfile>
      <anchor>a97f2e818b8f6cf41fb9236b9385e1064</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, ByteOrder byteOrder, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffParserWorker</name>
    <filename>classExiv2_1_1Internal_1_1TiffParserWorker.html</filename>
    <member kind="function" static="yes">
      <type>static ByteOrder</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffParserWorker.html</anchorfile>
      <anchor>a942f09d50e57072672cee2fd4bc29a11</anchor>
      <arglist>(ExifData &amp;exifData, IptcData &amp;iptcData, XmpData &amp;xmpData, const byte *pData, uint32_t size, uint32_t root, FindDecoderFct findDecoderFct, TiffHeaderBase *pHeader=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriteMethod</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffParserWorker.html</anchorfile>
      <anchor>a997834afb3498e2abd298921fc14dee7</anchor>
      <arglist>(BasicIo &amp;io, const byte *pData, uint32_t size, const ExifData &amp;exifData, const IptcData &amp;iptcData, const XmpData &amp;xmpData, uint32_t root, FindEncoderFct findEncoderFct, TiffHeaderBase *pHeader, OffsetWriter *pOffsetWriter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffPathItem</name>
    <filename>classExiv2_1_1Internal_1_1TiffPathItem.html</filename>
    <member kind="function">
      <type></type>
      <name>TiffPathItem</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a9300c3e691a49cb6855ad0b40d568997</anchor>
      <arglist>(uint32_t extendedTag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a7f9eb1ebf9ab73e8f91a86c52be2c218</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>extendedTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>ab37530dfa0e5e88e667c9a276c3fbaeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>group</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a20fb9d4ee3e3da5b0452c32d4cf3ab97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffPathItem</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffPathItem.html</anchorfile>
      <anchor>a9300c3e691a49cb6855ad0b40d568997</anchor>
      <arglist>(uint32_t extendedTag, IfdId group)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffReader</name>
    <filename>classExiv2_1_1Internal_1_1TiffReader.html</filename>
    <base>Exiv2::Internal::TiffVisitor</base>
    <member kind="function">
      <type></type>
      <name>TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a9107ef041a0382db2f84378f6d90b5ad</anchor>
      <arglist>(const byte *pData, uint32_t size, TiffComponent *pRoot, TiffRwState state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a7a4ae141414a8d829e86493f671cd280</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a062263f6c34eda56cd51aa73b63735f4</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5dba04c2796a42366e43457764974fb6</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a6ccc4497c0e39a7fca6b2c73475a4b8f</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a9120b2132c17c5ad1d2eb5bf725f04f4</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a39af8f226da52779409b936275c34432</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a556b71b6705a71bb059011620dadc5fa</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aa88b80af645ea291ea4789c2a0d1e923</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ad1ff97198d8ef19f8de69d4dbcec06cd</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a1ccc5fbfb124099022227796e79f0e67</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ada5a74ff1ce8ad00b634059229f8e203</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a96136acff031e2c49f6efc3f52cd0923</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a69624656368e5905c64e70b6d46b278d</anchor>
      <arglist>(TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a22414a0e61d0f5d7c130dbb3b10fe961</anchor>
      <arglist>(TiffDataEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMnState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a50aecbacf665b711055bdf96ca3471b9</anchor>
      <arglist>(const TiffRwState *state=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a89b48011186cc4a286ef6979c4042d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>circularReference</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a92d3c537e43e5dec338c0f6054aab86e</anchor>
      <arglist>(const byte *start, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5b5ad63d2375049fd6e32098aecd7388</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postProcess</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ade2df556b57153234e608801f907df1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a3c18a8b357d42382b17301a8a78af71f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a8f6fc712eef42008efca3b1fdbeeab29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a9107ef041a0382db2f84378f6d90b5ad</anchor>
      <arglist>(const byte *pData, uint32_t size, TiffComponent *pRoot, TiffRwState state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffReader</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a7a4ae141414a8d829e86493f671cd280</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a062263f6c34eda56cd51aa73b63735f4</anchor>
      <arglist>(TiffEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5dba04c2796a42366e43457764974fb6</anchor>
      <arglist>(TiffDataEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a6ccc4497c0e39a7fca6b2c73475a4b8f</anchor>
      <arglist>(TiffImageEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a9120b2132c17c5ad1d2eb5bf725f04f4</anchor>
      <arglist>(TiffSizeEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a39af8f226da52779409b936275c34432</anchor>
      <arglist>(TiffDirectory *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a556b71b6705a71bb059011620dadc5fa</anchor>
      <arglist>(TiffSubIfd *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>aa88b80af645ea291ea4789c2a0d1e923</anchor>
      <arglist>(TiffMnEntry *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ad1ff97198d8ef19f8de69d4dbcec06cd</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a1ccc5fbfb124099022227796e79f0e67</anchor>
      <arglist>(TiffIfdMakernote *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ada5a74ff1ce8ad00b634059229f8e203</anchor>
      <arglist>(TiffBinaryArray *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a96136acff031e2c49f6efc3f52cd0923</anchor>
      <arglist>(TiffBinaryElement *object) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readTiffEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a69624656368e5905c64e70b6d46b278d</anchor>
      <arglist>(TiffEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataEntryBase</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a22414a0e61d0f5d7c130dbb3b10fe961</anchor>
      <arglist>(TiffDataEntryBase *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMnState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a50aecbacf665b711055bdf96ca3471b9</anchor>
      <arglist>(const TiffRwState *state=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a89b48011186cc4a286ef6979c4042d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>circularReference</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a92d3c537e43e5dec338c0f6054aab86e</anchor>
      <arglist>(const byte *start, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextIdx</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>a5b5ad63d2375049fd6e32098aecd7388</anchor>
      <arglist>(IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postProcess</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffReader.html</anchorfile>
      <anchor>ade2df556b57153234e608801f907df1d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffRwState</name>
    <filename>classExiv2_1_1Internal_1_1TiffRwState.html</filename>
    <member kind="function">
      <type></type>
      <name>TiffRwState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>a69b9da8b23ebd14d986a4a9ae29fb6b3</anchor>
      <arglist>(ByteOrder byteOrder, uint32_t baseOffset)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>byteOrder</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>a324457e4632264f879950e157412e734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>baseOffset</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>abd3d3674fef0ba846e78be4c4e14d84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffRwState</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffRwState.html</anchorfile>
      <anchor>a69b9da8b23ebd14d986a4a9ae29fb6b3</anchor>
      <arglist>(ByteOrder byteOrder, uint32_t baseOffset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffSizeEntry</name>
    <filename>classExiv2_1_1Internal_1_1TiffSizeEntry.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a5131b7636e00e008fe80ea6b39bccc6f</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t dtTag, IfdId dtGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>af9f8351b48fdfd26e193b973c9e367ab</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>dtTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ab0a40522aa0e7dc7be4be6c9d5472afa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>dtGroup</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a1f723602fed808d00d44a9aee69ebc57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ac6badfc790777d8376a1a5145d196d06</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>af77bb7d4d338e1951c9d8d7401207366</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffSizeEntry *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>abfbb791bff0cb7248c9323c765407f9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a5131b7636e00e008fe80ea6b39bccc6f</anchor>
      <arglist>(uint16_t tag, IfdId group, uint16_t dtTag, IfdId dtGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>af9f8351b48fdfd26e193b973c9e367ab</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>dtTag</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ab0a40522aa0e7dc7be4be6c9d5472afa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>dtGroup</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>a1f723602fed808d00d44a9aee69ebc57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>ac6badfc790777d8376a1a5145d196d06</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSizeEntry.html</anchorfile>
      <anchor>af77bb7d4d338e1951c9d8d7401207366</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffSubIfd</name>
    <filename>classExiv2_1_1Internal_1_1TiffSubIfd.html</filename>
    <base>Exiv2::Internal::TiffEntryBase</base>
    <member kind="function">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7e3358438c3c1b01ce1267e95f173314</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId newGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a4bb0d6e92b71ea3d9fd34339c2e0c053</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ad37bec524fa5191125fef9295eb5c30b</anchor>
      <arglist>(const TiffSubIfd &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a576986adac0ae4ccf7ffef13d14eb759</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a81d88e489211131c7d2a967e4eb371c4</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac334a0359596098355f637816df17402</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a92783badc5a9e3f9779f0c45ab7c9f8d</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7624f759b4bbee961682f1d401373b63</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffSubIfd *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a29943284d22877020fdad762a427ecce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ab854f12a8762a3ddd65be416619dbc98</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ab2ef13defbbb37fb1e9e38beb84c78dc</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a0654c0e5d5b8128b946a614861e7fc32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac2434761a9c3127e51f8011a33d0c1c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a62923df1c6ca137ea8f8a3e9e3fb9293</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7e3358438c3c1b01ce1267e95f173314</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId newGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a4bb0d6e92b71ea3d9fd34339c2e0c053</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TiffSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ad37bec524fa5191125fef9295eb5c30b</anchor>
      <arglist>(const TiffSubIfd &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddPath</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a576986adac0ae4ccf7ffef13d14eb759</anchor>
      <arglist>(uint16_t tag, TiffPath &amp;tiffPath, TiffComponent *const pRoot, TiffComponent::UniquePtr object) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffComponent *</type>
      <name>doAddChild</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a81d88e489211131c7d2a967e4eb371c4</anchor>
      <arglist>(TiffComponent::UniquePtr tiffComponent) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doAccept</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac334a0359596098355f637816df17402</anchor>
      <arglist>(TiffVisitor &amp;visitor) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEncode</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a92783badc5a9e3f9779f0c45ab7c9f8d</anchor>
      <arglist>(TiffEncoder &amp;encoder, const Exifdatum *datum) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWrite</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a7624f759b4bbee961682f1d401373b63</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t valueIdx, uint32_t dataIdx, uint32_t &amp;imageIdx) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TiffSubIfd *</type>
      <name>doClone</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a29943284d22877020fdad762a427ecce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ab854f12a8762a3ddd65be416619dbc98</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder, int32_t offset, uint32_t dataIdx, uint32_t &amp;imageIdx) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doWriteImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ab2ef13defbbb37fb1e9e38beb84c78dc</anchor>
      <arglist>(IoWrapper &amp;ioWrapper, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSize</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a0654c0e5d5b8128b946a614861e7fc32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeData</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>ac2434761a9c3127e51f8011a33d0c1c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>doSizeImage</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffSubIfd.html</anchorfile>
      <anchor>a62923df1c6ca137ea8f8a3e9e3fb9293</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::Internal::TiffTreeStruct</name>
    <filename>structExiv2_1_1Internal_1_1TiffTreeStruct.html</filename>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct::Key</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a9e4d28075c13f7fe3ab240b256cb2b92</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>root_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>ae19ddbc9bbc53a1b47c55b2c39916cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>group_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a9a0e03e84d512b123a3140b1fbc44683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IfdId</type>
      <name>parentGroup_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>af4fd8bcf3a082c82c5740370b6fb6821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>parentExtTag_</name>
      <anchorfile>structExiv2_1_1Internal_1_1TiffTreeStruct.html</anchorfile>
      <anchor>a9f138eb1a82db09d6d6571ab952497dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Internal::TiffVisitor</name>
    <filename>classExiv2_1_1Internal_1_1TiffVisitor.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>GoEvent</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geTraverse</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa143ea958e4dc68dc636fad5fea2c9180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geKnownMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa4c3cf947f58363d79cdf275c09357b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geTraverse</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa143ea958e4dc68dc636fad5fea2c9180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geKnownMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a576a540c43077dd03d768261ebfcec8aa4c3cf947f58363d79cdf275c09357b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a253cb67361289149b84f08811065d1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>acb7febe8177db70285bbe885ad73a49f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGo</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ae5ba2a8d7d67f632470d585752a098b3</anchor>
      <arglist>(GoEvent event, bool go)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>af004fb7a5e7c72caebdf729b3362b412</anchor>
      <arglist>(TiffEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a09a605d7c2e112ccebee4c55366467e3</anchor>
      <arglist>(TiffDataEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>aab5927f89109dc8cfcbcb3ccfbe2fb5b</anchor>
      <arglist>(TiffImageEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ade6e6eead57ccb78ebc0844402bf3529</anchor>
      <arglist>(TiffSizeEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9f17fc91eaf54d71663d5d8258f940c3</anchor>
      <arglist>(TiffDirectory *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a351bbd9f685e8fda073ad080cbdaf0fc</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afe692b051c5e1bf0b8023a00b3e4af4f</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9ee375a20d3387b94f4c719472e7f196</anchor>
      <arglist>(TiffSubIfd *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>abaee0a5b57d41b46d1266c1aeae7f553</anchor>
      <arglist>(TiffMnEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ac16398cc0d44e5aa759c9492b002461d</anchor>
      <arglist>(TiffIfdMakernote *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afc8f05466b176ead31fdb8a07e122880</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5a58e763e52cf17e3766c967065c0fbc</anchor>
      <arglist>(TiffBinaryArray *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArrayEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a3de094a0126aa6913f80eda90d7b1027</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5281ac9c370de3e05f0874acdfc5da6b</anchor>
      <arglist>(TiffBinaryElement *object)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>go</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a128c5c0e48aa9450bf36c5d0a5755abc</anchor>
      <arglist>(GoEvent event) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a253cb67361289149b84f08811065d1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TiffVisitor</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>acb7febe8177db70285bbe885ad73a49f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGo</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ae5ba2a8d7d67f632470d585752a098b3</anchor>
      <arglist>(GoEvent event, bool go)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>af004fb7a5e7c72caebdf729b3362b412</anchor>
      <arglist>(TiffEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDataEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a09a605d7c2e112ccebee4c55366467e3</anchor>
      <arglist>(TiffDataEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitImageEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>aab5927f89109dc8cfcbcb3ccfbe2fb5b</anchor>
      <arglist>(TiffImageEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSizeEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ade6e6eead57ccb78ebc0844402bf3529</anchor>
      <arglist>(TiffSizeEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitDirectory</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9f17fc91eaf54d71663d5d8258f940c3</anchor>
      <arglist>(TiffDirectory *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryNext</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a351bbd9f685e8fda073ad080cbdaf0fc</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitDirectoryEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afe692b051c5e1bf0b8023a00b3e4af4f</anchor>
      <arglist>(TiffDirectory *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitSubIfd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a9ee375a20d3387b94f4c719472e7f196</anchor>
      <arglist>(TiffSubIfd *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitMnEntry</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>abaee0a5b57d41b46d1266c1aeae7f553</anchor>
      <arglist>(TiffMnEntry *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitIfdMakernote</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>ac16398cc0d44e5aa759c9492b002461d</anchor>
      <arglist>(TiffIfdMakernote *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitIfdMakernoteEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>afc8f05466b176ead31fdb8a07e122880</anchor>
      <arglist>(TiffIfdMakernote *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryArray</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5a58e763e52cf17e3766c967065c0fbc</anchor>
      <arglist>(TiffBinaryArray *object)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>visitBinaryArrayEnd</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a3de094a0126aa6913f80eda90d7b1027</anchor>
      <arglist>(TiffBinaryArray *object)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visitBinaryElement</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a5281ac9c370de3e05f0874acdfc5da6b</anchor>
      <arglist>(TiffBinaryElement *object)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>go</name>
      <anchorfile>classExiv2_1_1Internal_1_1TiffVisitor.html</anchorfile>
      <anchor>a128c5c0e48aa9450bf36c5d0a5755abc</anchor>
      <arglist>(GoEvent event) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::TimeValue::Time</name>
    <filename>structExiv2_1_1TimeValue_1_1Time.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>hour</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a80487f4ac17dbffdd1ea3906d2029ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minute</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a547e3eecf0cc16048ee0fbe35dcd50f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>second</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>a7c306e9e553573ab50358205b3cc4ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tzHour</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>adb120971d558865b750fdba73cc25734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tzMinute</name>
      <anchorfile>structExiv2_1_1TimeValue_1_1Time.html</anchorfile>
      <anchor>aee6b75534a63f9a88f77246628658547</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TimeValue</name>
    <filename>classExiv2_1_1TimeValue.html</filename>
    <base>Exiv2::Value</base>
    <class kind="struct">Exiv2::TimeValue::Time</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TimeValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>ae72579db9f7bb232d0b128d4e9e19f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>acd668c3a1f1448a660de9711fda583f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a42e19776bf304b8deb415389355d9b29</anchor>
      <arglist>(int hour, int minute, int second=0, int tzHour=0, int tzMinute=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a44f4178eac9ab2dba256ddc577d09122</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a80d506e29656c520ecfd1475db82ed4f</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Time &amp;</type>
      <name>getTime</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a97b6ed55ca8026f94ba8cb063aa4f32b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a657f7cfaaa8a6ce264dd1e564be91638</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a21dd0148477a21977a16a72488193dfd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>aee1aea2db77e48ca8b2194bdaaf8a4fe</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a21836397204e0830c6048f956ea89526</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>ac60a5638925d7ec5c22b0fbe8250a270</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>af721979219bcffaa8320e22dfec77390</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>acd668c3a1f1448a660de9711fda583f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a42e19776bf304b8deb415389355d9b29</anchor>
      <arglist>(int hour, int minute, int second=0, int tzHour=0, int tzMinute=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeValue</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a44f4178eac9ab2dba256ddc577d09122</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a2dcbeee8c2d30c08051947c56bd563cf</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a0af14f15616d8db41eb272167156fb5e</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classExiv2_1_1TimeValue.html</anchorfile>
      <anchor>a67dac1417b5ec818d90229e7f0a38058</anchor>
      <arglist>(const Time &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::TypeInfo</name>
    <filename>classExiv2_1_1TypeInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>aef9c447441a31ee67d77b88e65d19a9c</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>ad77dd1740960deab77d86c9f18593702</anchor>
      <arglist>(const TypeInfo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>a6f42397b928ef6592ec603ae08112c6f</anchor>
      <arglist>(const TypeInfo &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>a774ccbf72e5a93ff104d27cf9969b095</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>a01bebc7e74dbe0de31301f9335f03f00</anchor>
      <arglist>(const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1TypeInfo.html</anchorfile>
      <anchor>abda613af50ccdddcad9a7bb75fcb2338</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Uri</name>
    <filename>classExiv2_1_1Uri.html</filename>
    <member kind="function" static="yes">
      <type>static Uri EXIV2API</type>
      <name>Parse</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a778db3feda60785b24ce50a405cb487c</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void EXIV2API</type>
      <name>Decode</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a0529996febeac1d934c6731b5f48da83</anchor>
      <arglist>(Uri &amp;uri)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>QueryString</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>ae01cdbe22405f069585fe67075852bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Path</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a97bd39f477f5c95a5220554b81cce4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Protocol</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>ad2d4e0767e5e2b5b7175352c5eac3838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Host</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a02c23518cceae2789134148e60470007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Port</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a230b1308d6879b737a533f1ce41fe46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Username</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>ab7524b043a2747f81f63d17efd79ba89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Password</name>
      <anchorfile>classExiv2_1_1Uri.html</anchorfile>
      <anchor>a2c2841ab112ff996a24d3af0dc62c1b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Value</name>
    <filename>classExiv2_1_1Value.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Value &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a54deb54b7b7906b844d6c61548787ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ab475b1680c6fa36a092c4584f70a8027</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a083556f756c79c4a4d3014fb0bfb45f7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>acc8870f802ebcdf9d4e081816ad8956e</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2864378d7572310aa5f4cf4127365862</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a6e8f3c20bf5d09f34371660a6cf50af3</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ok_</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a4dc3a689b4bc1819290525cac491c1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a06a65925d8c11766ded7f7ecb00507c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniquePtr</type>
      <name>clone</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>af05227aecb88b01fcd332d4d1db4dd40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a3bf4f9c2eda4f7850a390de98668ce15</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ae046b0b081c2be1cf160db595c66fe6d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2929f67840fb0565b868993b140ed0ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a0fb589f72a3e15d047b49e62f6fd117e</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a6c4e67718590984cb441fcebc3d088ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ac4fb73714a85e19a07cad8868709d85c</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a4530a3fc3e2305cf994de5476f46f953</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a22d257caa6c1ffe6416ce02de7bd8c1c</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a595a4cb549bec8c19d290ca3e95a2678</anchor>
      <arglist>(long n=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a72aff67edc2eb0e28458cf3600769247</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ae6ee88331624077b86ef7ed28c958e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a533f3a5b8363e2b1be3524d2b6b89658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UniquePtr</type>
      <name>create</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a8e0abebe200c17d2d8e5121e7bb482aa</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ad8f58f5350de4c726f8312827c03d8d7</anchor>
      <arglist>(const Value &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>ab475b1680c6fa36a092c4584f70a8027</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a083556f756c79c4a4d3014fb0bfb45f7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>acc8870f802ebcdf9d4e081816ad8956e</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a2864378d7572310aa5f4cf4127365862</anchor>
      <arglist>(const std::string &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1Value.html</anchorfile>
      <anchor>a6e8f3c20bf5d09f34371660a6cf50af3</anchor>
      <arglist>(const byte *buf, long len)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::ValueType</name>
    <filename>classExiv2_1_1ValueType.html</filename>
    <templarg>typename T</templarg>
    <base>Exiv2::Value</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ValueType&lt; T &gt; &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>afb01661f4f04e10d353a1995b1aea355</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a2b7ed62bc1c436eb564807559452a6e8</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ada8efe2277a95bf41b7c2cabd3b1d081</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a4302aa0e8dee770c7265ed8e1fccb07c</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>afb8127ff26531236ff5a75232dcc0d84</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ac68f4ac5e10a14ca84bbc9bef0f07cbf</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a097236490b3429142afc60b6f636f144</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a006d9f9f1ce12f26e14c19dd3ecb3f1f</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a856a6e80a914e0bbd82dcbdc3f82d24b</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a3cda24c66df26830450fb7dad15f6c1a</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a3ddf28f52786fbc03d0689af36183ddd</anchor>
      <arglist>(long n) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a8c61467a7dd9a7ecf79a72e26e329ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a6710435c5371f8bb650a0d563992c78a</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a191f1d8f864f169d40202e32dd59a0f2</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a168b70cf24a0d7839174d65a8046f0b7</anchor>
      <arglist>(const T &amp;val, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a70608f4c0740f6b8413f684a5dd256b6</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a906b493de0b5d0b6ff060febe5272bca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ValueType&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a0bd0a1b7695e49e7ea4fd8fe449be2bf</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a3bac299d697693b690b496036ce0e847</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>abdd931b1eaa4913588b815733a9b26ca</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ac2870c128000015582d922983e1d6434</anchor>
      <arglist>(const byte *buf, long len) override</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>ValueList</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a88ed5f3e8f59a9cf00eee8c6027e9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a38d2c3d37e48bd5b3c00f3693e493ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ab13bcf1ea775648daac65bc13817235d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueList</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ae5daa362d42b7b728cf795258650a35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>adaeb27e55e8430f99120997fb450481a</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a239dec0b2aec95165c902a0167208a7a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a0148f3de0a5d02c2bff8a209474b9ef7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ae62b16cb088b78ffeded166f7c17ba6f</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a857566e9ce12bac6e7e2f80d08c9ca11</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a1e00e176fef216d2a5dacf7aa10410fa</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a18327c631084e28e9ddcb3e7e5ea6724</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a51b51159fbab0064ee886e2d791e5b54</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>sizeDataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a34de5cd9acc0c0c374031a1130692e3c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>dataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a44afe7f41984c593bf5b78fe8d6aa235</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a8c61467a7dd9a7ecf79a72e26e329ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a6710435c5371f8bb650a0d563992c78a</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a191f1d8f864f169d40202e32dd59a0f2</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a168b70cf24a0d7839174d65a8046f0b7</anchor>
      <arglist>(const T &amp;val, TypeId typeId=getType&lt; T &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a70608f4c0740f6b8413f684a5dd256b6</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueType</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a906b493de0b5d0b6ff060febe5272bca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ValueType&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a0bd0a1b7695e49e7ea4fd8fe449be2bf</anchor>
      <arglist>(const ValueType&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>a3bac299d697693b690b496036ce0e847</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>abdd931b1eaa4913588b815733a9b26ca</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDataArea</name>
      <anchorfile>classExiv2_1_1ValueType.html</anchorfile>
      <anchor>ac2870c128000015582d922983e1d6434</anchor>
      <arglist>(const byte *buf, long len) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::WebPImage</name>
    <filename>classExiv2_1_1WebPImage.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>WebPImage</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>aaa6969888e4e927fc2611aa869f1e60c</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a97d113f1f39a17915b2671213b6293f4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a59ed262be75e71fac20f901f3f0a334b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>ad75a7217f4abf64d329b24413c4c2aa6</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a8fff494d3c20757f68f2c83a2cb948ca</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>ad8d96712e4e8bf64398155dc37edf1ae</anchor>
      <arglist>(const IptcData &amp;) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WebPImage</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>aaa6969888e4e927fc2611aa869f1e60c</anchor>
      <arglist>(BasicIo::UniquePtr io)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a97d113f1f39a17915b2671213b6293f4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a59ed262be75e71fac20f901f3f0a334b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStructure</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>ad75a7217f4abf64d329b24413c4c2aa6</anchor>
      <arglist>(std::ostream &amp;out, PrintStructureOption option, int depth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a8fff494d3c20757f68f2c83a2cb948ca</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIptcData</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>ad8d96712e4e8bf64398155dc37edf1ae</anchor>
      <arglist>(const IptcData &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a4ef9fc2861c7f09149485ea55de62d82</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WebPImage</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a44d96e74409314619b897d25e2e16a10</anchor>
      <arglist>(const WebPImage &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>WebPImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1WebPImage.html</anchorfile>
      <anchor>a3d646a57dca0c215f60cceebe3892fb4</anchor>
      <arglist>(const WebPImage &amp;rhs)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpArrayValue</name>
    <filename>classExiv2_1_1XmpArrayValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; XmpArrayValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a70a7346a64fcbde1773900b72415ae25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpArrayValue</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a0cf60defd39cf0801569c8351e02f4a7</anchor>
      <arglist>(TypeId typeId=xmpBag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>ad016eedc97877b0c25ad9dbd108ba2b2</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a832b3be05c2793b82e61db4bd86e14f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>abd0b05f76a0196dc320024d58ed108fb</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a8199bb42e88cf47528b9212821145d09</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>aeeae61afd8e1b4d1674e16ff426be474</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a29b5a43eb8d7a4b6c6525f4b0de545f4</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>abb706ae362bd17af9a782367a7946a86</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpArrayValue</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a0cf60defd39cf0801569c8351e02f4a7</anchor>
      <arglist>(TypeId typeId=xmpBag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>ad016eedc97877b0c25ad9dbd108ba2b2</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpArrayValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpData</name>
    <filename>classExiv2_1_1XmpData.html</filename>
    <member kind="typedef">
      <type>XmpMetadata::iterator</type>
      <name>iterator</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a6ad054efbea675843895e3f74c3c1923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>XmpMetadata::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a9c0a6575296f3da8bfc200091da40f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpData</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a5b959294321cd5504ee4c9b7b3b110a6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aea04017bc03a315d2c8045f889233d54</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a8ce28ae5c68a30b8e646c7ddfed75843</anchor>
      <arglist>(const XmpKey &amp;key, const Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a23383a89960ba5b9c6c753b4b0b83198</anchor>
      <arglist>(const Xmpdatum &amp;xmpdatum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseFamily</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a8221722467154146f8dbcf04760eda87</anchor>
      <arglist>(XmpData::iterator &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab7e69abc3ee547aacb45893aa8d83051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aafa3be4e1c7056450d6448a9b5240e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab79f31eb811252976d01f2e69fa063a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a232b8897f5d90a6bc087d7d010e80b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a91864d348037f21fedb7c0591180b37d</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a10164f28aea7a9ba5479745e36dcc939</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a9a98313365123f7a4c00e592d26a7223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a51003f56f24fa88f6a1fb1f99d96263e</anchor>
      <arglist>(const XmpKey &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a0da7be118ef1e92ebcf3db8762353342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a46d5ca226c2095a85965a6b0d4bc374f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usePacket</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab07d6ed094d113517424694b5a28aae2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usePacket</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a897996b4f3fb249571224e9cc2593005</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacket</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ad97d4efd2252141b85ece79e6af277f0</anchor>
      <arglist>(const std::string &amp;xmpPacket)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator[]</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aea04017bc03a315d2c8045f889233d54</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a8ce28ae5c68a30b8e646c7ddfed75843</anchor>
      <arglist>(const XmpKey &amp;key, const Value *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a23383a89960ba5b9c6c753b4b0b83198</anchor>
      <arglist>(const Xmpdatum &amp;xmpdatum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseFamily</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a8221722467154146f8dbcf04760eda87</anchor>
      <arglist>(XmpData::iterator &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab7e69abc3ee547aacb45893aa8d83051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortByKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>aafa3be4e1c7056450d6448a9b5240e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>ab79f31eb811252976d01f2e69fa063a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a232b8897f5d90a6bc087d7d010e80b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findKey</name>
      <anchorfile>classExiv2_1_1XmpData.html</anchorfile>
      <anchor>a91864d348037f21fedb7c0591180b37d</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::Xmpdatum</name>
    <filename>classExiv2_1_1Xmpdatum.html</filename>
    <base>Exiv2::Metadatum</base>
    <class kind="struct">Exiv2::Xmpdatum::Impl</class>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af12eb1d529247e261ac6491b54cf9364</anchor>
      <arglist>(const XmpKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab66bc7df5fd4cc769562fe30661c94db</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a227075159167de336e610559bf82c713</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a534ca3b3750c9824960c53a53d2fd29c</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab8f567325bc1c681cb80bbb53bc98bb7</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a2651103ef9d64a7172b59307a4d2a7c0</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a7ff7d6540c3e857222b1a8d3c8abd31c</anchor>
      <arglist>(const bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a60e6b17f5acaedf322533e3509c5e51b</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af08f7f56cedbf1f1db8f4bb3c99372ae</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aba105411f8ec4e8ea767de017a7a3eee</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>adb60cf5d5ebb82ea1e24722e2eef6700</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a843ccc006c5566c6b125203a938f2e79</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a10a5d13ad5c182a6f3c6603c89b75b93</anchor>
      <arglist>(std::ostream &amp;os, const ExifData *pMetadata=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a30e52278f6a21f6a8c86a8a8d29281e4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ae6dc2d176a843df7c62b1eaa2a96cd87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a69011cbaf0cf7f4bfc11bc83d115d265</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aa6c51094e8acc26eff84162ffc90e034</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a8130ad93d622624ab219406d373ac1e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a7e5ad6219f7b3b163b7013f41d735e90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>typeId</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a4f523d7dae45886ffdff20f645479450</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aaba48b97a7737b0f82a97d06757a11e3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>typeSize</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a8f3d10ca3b5f54be0e9d99fb28912a67</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a8cbfbcdc28b4152a740de1f2936efd8e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ac7dd6fb9c09db4017467dc41165f43c0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>abec052ab53de8630f1a6f82f498bb709</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a19a8abda2efb862aab0239148f38948d</anchor>
      <arglist>(long n) const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a9706db7ec405b82170ce6893f385e5c0</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>afd1b4c8f44734aa6093266513a04ae6a</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a1f409f5d2355995109d0b4e5eed3bf95</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Value::UniquePtr</type>
      <name>getValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a9f64e90e8f8165fb3b507bfd5c12be59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a40ea0c065be4412c77c5029418d7e7b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af12eb1d529247e261ac6491b54cf9364</anchor>
      <arglist>(const XmpKey &amp;key, const Value *pValue=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab66bc7df5fd4cc769562fe30661c94db</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Xmpdatum</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a227075159167de336e610559bf82c713</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a534ca3b3750c9824960c53a53d2fd29c</anchor>
      <arglist>(const Xmpdatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>ab8f567325bc1c681cb80bbb53bc98bb7</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a2651103ef9d64a7172b59307a4d2a7c0</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a7ff7d6540c3e857222b1a8d3c8abd31c</anchor>
      <arglist>(const bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>a60e6b17f5acaedf322533e3509c5e51b</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Xmpdatum &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>af08f7f56cedbf1f1db8f4bb3c99372ae</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>aba105411f8ec4e8ea767de017a7a3eee</anchor>
      <arglist>(const Value *pValue) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setValue</name>
      <anchorfile>classExiv2_1_1Xmpdatum.html</anchorfile>
      <anchor>adb60cf5d5ebb82ea1e24722e2eef6700</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpKey</name>
    <filename>classExiv2_1_1XmpKey.html</filename>
    <base>Exiv2::Key</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; XmpKey &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a32b5859f24b5306b999d6266afe8cbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ac4bd973f85090565e0f1d7328ad4fbbc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ad744de9a95d3adfeeb8134f9492ff9f7</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a47466bceb7f5c7f02661b4ec29408ec7</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>af3325d52995624f0b397b03d98d82e5b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>XmpKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ab1f2654141f42259632027d34a5c8f15</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a786a2f173d22c195c556c4d424db01b0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>familyName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ac232d53c5cfec3da0c088d8ae93d0828</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>groupName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a1ebcebeae79692513e56c4af4551c44b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagName</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a40a6dc3269d0e97a7e4c9c69ce5a3fc4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tagLabel</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a8779e7fe6f4044c9396dc80ca964e2ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tag</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a294e1dd505ada1b6ddd8989fc32ecfbb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ns</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a8a351bd108b46493ea94d222f303927a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ac4bd973f85090565e0f1d7328ad4fbbc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ad744de9a95d3adfeeb8134f9492ff9f7</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;property)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>a47466bceb7f5c7f02661b4ec29408ec7</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmpKey</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>af3325d52995624f0b397b03d98d82e5b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>XmpKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classExiv2_1_1XmpKey.html</anchorfile>
      <anchor>ab1f2654141f42259632027d34a5c8f15</anchor>
      <arglist>(const XmpKey &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpNsInfo</name>
    <filename>structExiv2_1_1XmpNsInfo.html</filename>
    <class kind="struct">Exiv2::XmpNsInfo::Ns</class>
    <class kind="struct">Exiv2::XmpNsInfo::Prefix</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>abdd150cf7135a253dd1d6bf6b9bb1eb7</anchor>
      <arglist>(const Ns &amp;ns) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a5793366b63dcd3f304b41580da789a27</anchor>
      <arglist>(const Prefix &amp;prefix) const</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>ns_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>aa33883d7e619d9031ec4ffb8fa131684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>prefix_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>aa10b74c591fbaf4d94245c2906b49fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const XmpPropertyInfo *</type>
      <name>xmpPropertyInfo_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a4c97da9c5d14545904736de8b0e914c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1XmpNsInfo.html</anchorfile>
      <anchor>a904a242a6bbd52506ec68d2a5b62eba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpParser</name>
    <filename>classExiv2_1_1XmpParser.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>XmpFormatFlags</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>omitPacketWrapper</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da6a8855eddec8e25389a823040a5d2898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnlyPacket</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da7b51cd5b22e4cabd4eac877547e16c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useCompactFormat</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dad1d601f10197dfbb8d3c3ed6a340f9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>includeThumbnailPad</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac2a833c27e0ab665c40063331f00b14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exactPacketLength</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac515307dd36921ff42e07a079a33f582</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>writeAliasComments</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da4a0fa937b6711ee5d158a58a20a713c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>omitAllFormatting</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da42e71c96b16e0ba40f193e2e5724da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>XmpLockFct</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>af6d0864f7237d99a1227b4b73cbaed91</anchor>
      <arglist>)(void *pLockData, bool lockUnlock)</arglist>
    </member>
    <member kind="enumvalue">
      <name>omitPacketWrapper</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da6a8855eddec8e25389a823040a5d2898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>readOnlyPacket</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da7b51cd5b22e4cabd4eac877547e16c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useCompactFormat</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dad1d601f10197dfbb8d3c3ed6a340f9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>includeThumbnailPad</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac2a833c27e0ab665c40063331f00b14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exactPacketLength</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330dac515307dd36921ff42e07a079a33f582</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>writeAliasComments</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da4a0fa937b6711ee5d158a58a20a713c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>omitAllFormatting</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae372d5a006f3fc79ffae5a324c38330da42e71c96b16e0ba40f193e2e5724da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>decode</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a53995152072367fba238ceadfacbaff0</anchor>
      <arglist>(XmpData &amp;xmpData, const std::string &amp;xmpPacket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>encode</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a39ca42868bff6886b42cf322fb40e7c8</anchor>
      <arglist>(std::string &amp;xmpPacket, const XmpData &amp;xmpData, uint16_t formatFlags=useCompactFormat, uint32_t padding=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>initialize</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>a68b3686f99e86eb54e70b20dc3a9f936</anchor>
      <arglist>(XmpParser::XmpLockFct xmpLockFct=nullptr, void *pLockData=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>terminate</name>
      <anchorfile>classExiv2_1_1XmpParser.html</anchorfile>
      <anchor>ae6c0f4a9eeef2aed456346a206981b4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpProperties</name>
    <filename>classExiv2_1_1XmpProperties.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, XmpNsInfo &gt;</type>
      <name>NsRegistry</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ac1ee044e04366db5028c3baa02c511be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>propertyTitle</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ab62a4f587f26fce219151fb833cbcea8</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>propertyDesc</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a2b4ab604e980a741d0a42397873ba124</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>propertyType</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a1afe108a735f91f0f1afb5e0baffc06f</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpPropertyInfo *</type>
      <name>propertyInfo</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a85609c4bb86caaff2be6f4d0e6f17dd4</anchor>
      <arglist>(const XmpKey &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ns</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a6b558be19460be890e68d93faa77fac1</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nsDesc</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a03de8e29d13fe21417fd5e7f91f874f5</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpPropertyInfo *</type>
      <name>propertyList</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a977959cfabb8d4ed34949846028cbc5c</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpNsInfo *</type>
      <name>nsInfo</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>af27994268919d6b81549846170c44625</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>prefix</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a9242436f9f9475216b21ea0c4643c357</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printProperties</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a9b7e72de6863587e9c18157f7ea527e4</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printProperty</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ab135fa030aa83016a893ed079a367d29</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;key, const Value &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>ae58ee081625b7924563e93a1ba184fec</anchor>
      <arglist>(const std::string &amp;ns, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregisterNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a82d620dbdbc671a635c7b4d8a11c694f</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregisterNs</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a6758ab102c4b9d1330c184971fe56962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const XmpNsInfo *</type>
      <name>lookupNsRegistry</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a588c95cc6da687050a5efb8594daa98d</anchor>
      <arglist>(const XmpNsInfo::Prefix &amp;prefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registeredNamespaces</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>aafb4d492218c9e87292f3d7cf7a21d65</anchor>
      <arglist>(Exiv2::Dictionary &amp;nsDict)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a37201e8e5230b1879dd50eab159fb886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NsRegistry</type>
      <name>nsRegistry_</name>
      <anchorfile>classExiv2_1_1XmpProperties.html</anchorfile>
      <anchor>a5184fa01ff867af9a3d65848b95b1994</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Exiv2::XmpPropertyInfo</name>
    <filename>structExiv2_1_1XmpPropertyInfo.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a74b8d949756e6acd4d0fcf5ad21ccee8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a0517e72a3bbeb94e13f7abcf75a90d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>title_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a354f9269b7d5a0426c687b0eadcfca97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>xmpValueType_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>ac780029912d0496e1d44ec73a9474244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeId</type>
      <name>typeId_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>ae2b77c54dc7fa216247871ffc28f85c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmpCategory</type>
      <name>xmpCategory_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>aa70ca984710b60dcc91708649b4f065e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>desc_</name>
      <anchorfile>structExiv2_1_1XmpPropertyInfo.html</anchorfile>
      <anchor>a21bcc233145be39b394eca6d0105abe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpSidecar</name>
    <filename>classExiv2_1_1XmpSidecar.html</filename>
    <base>Exiv2::Image</base>
    <member kind="function">
      <type></type>
      <name>XmpSidecar</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>aaf1ccb6e25d0ba5a85fe585cfed855da</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>adb44423d4bd0bc1067a1f2d7d5f31a42</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a858fc4da1bed2e8859de97d89216a9f1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a4675de212d5411bd369b8764249f220b</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>af688990922fc30e1615b7335ceafafcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpSidecar</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>aaf1ccb6e25d0ba5a85fe585cfed855da</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>adb44423d4bd0bc1067a1f2d7d5f31a42</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMetadata</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a858fc4da1bed2e8859de97d89216a9f1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComment</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>a4675de212d5411bd369b8764249f220b</anchor>
      <arglist>(const std::string &amp;comment) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>mimeType</name>
      <anchorfile>classExiv2_1_1XmpSidecar.html</anchorfile>
      <anchor>af688990922fc30e1615b7335ceafafcb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpTextValue</name>
    <filename>classExiv2_1_1XmpTextValue.html</filename>
    <base>Exiv2::XmpValue</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; XmpTextValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a2dd754cb3bcccde32bf41b1defddadef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a52258246de480683ba8c26331729cb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ab3fad8cf98fdf1f898d60f81be8419e1</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a76b89fa94c21125aab121046df855474</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value_</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>adeadb1227704c657d32183af5da010a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>aeeb910c16260af14f9603bd98c933d5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a7dc71064ed3133a5ff560eead65a926e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toLong</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a9c571bdcd8cebcaab420407142503b76</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toFloat</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a40e8b669a901c1f936777fc1fbf33b04</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>Rational</type>
      <name>toRational</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a3d975bf012f24fe899b677218b581f31</anchor>
      <arglist>(long n=0) const override</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a7cf000c2c77328a8e612927dcd1661b0</anchor>
      <arglist>(std::ostream &amp;os) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a52258246de480683ba8c26331729cb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmpTextValue</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ab3fad8cf98fdf1f898d60f81be8419e1</anchor>
      <arglist>(const std::string &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a76b89fa94c21125aab121046df855474</anchor>
      <arglist>(const std::string &amp;buf) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpTextValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XmpValue</name>
    <filename>classExiv2_1_1XmpValue.html</filename>
    <base>Exiv2::Value</base>
    <member kind="enumeration">
      <type></type>
      <name>XmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>adcef489707e5b72735cccb7bee57cf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>XmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a417c4392d9251b143df126fa9e9d1025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; XmpValue &gt;</type>
      <name>UniquePtr</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a65d27f38b71e1ac4a15038143791b40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>XmpArrayType</type>
      <name>xmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>aa86429a7b2d0ab3a971159d0a275056b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>XmpStruct</type>
      <name>xmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a44e6f36f8953e76dac2f0112810a2da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a5b08ecc84490e60ee08e5e4c7158a6fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a8d1a6388b75fad30ba9caf6d5a67fa6b</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>af9ca857d5c130ac36996d6a0519369df</anchor>
      <arglist>(XmpArrayType xmpArrayType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>ac3b98fc15a65051d546ff5d1f73487ed</anchor>
      <arglist>(XmpStruct xmpStruct=xsStruct)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>ac75d51580072586d4718b7ab36eb0c25</anchor>
      <arglist>(const byte *buf, long len, ByteOrder byteOrder=invalidByteOrder) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>int</type>
      <name>read</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a31d3fca18fc686bbe6d7a52c0cb3bcee</anchor>
      <arglist>(const std::string &amp;buf) override=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmpArrayType</type>
      <name>xmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a1388aadb7adca555160c9deb7961d666</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type>XmpArrayType</type>
      <name>xmpArrayType</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>aa86429a7b2d0ab3a971159d0a275056b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>XmpStruct</type>
      <name>xmpStruct</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a44e6f36f8953e76dac2f0112810a2da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>size</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a5b08ecc84490e60ee08e5e4c7158a6fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>copy</name>
      <anchorfile>classExiv2_1_1XmpValue.html</anchorfile>
      <anchor>a8d1a6388b75fad30ba9caf6d5a67fa6b</anchor>
      <arglist>(byte *buf, ByteOrder byteOrder=invalidByteOrder) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Exiv2::XPathIo</name>
    <filename>classExiv2_1_1XPathIo.html</filename>
    <base>Exiv2::FileIo</base>
    <member kind="function">
      <type></type>
      <name>XPathIo</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a97f05d781fed57ff7d50c1b09908e1bc</anchor>
      <arglist>(const std::string &amp;orgPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XPathIo</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>ab533d4e470d337bb1a8496c46ee35d38</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a15f3d40b01cb72ae2d2dc07b656b30f4</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TEMP_FILE_EXT</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a39ef1c6a7f398643d76e1d055f9d878c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>GEN_FILE_EXT</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a3dda54b3148040a0eef5f46c19239606</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>writeDataToFile</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>aa8652e392221c531d29c1332041c303c</anchor>
      <arglist>(const std::string &amp;orgPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XPathIo</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a97f05d781fed57ff7d50c1b09908e1bc</anchor>
      <arglist>(const std::string &amp;orgPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XPathIo</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>ab533d4e470d337bb1a8496c46ee35d38</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transfer</name>
      <anchorfile>classExiv2_1_1XPathIo.html</anchorfile>
      <anchor>a15f3d40b01cb72ae2d2dc07b656b30f4</anchor>
      <arglist>(BasicIo &amp;src) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Params::YodAdjust</name>
    <filename>structParams_1_1YodAdjust.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>flag_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>abb1c56f2beb6ce58b6acc144960dd6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>option_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>a518153c045666829d4d6c48a812c9927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>adjustment_</name>
      <anchorfile>structParams_1_1YodAdjust.html</anchorfile>
      <anchor>a0077a961b108ad40b25a4904553816d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2</name>
    <filename>namespaceExiv2.html</filename>
    <namespace>Exiv2::ImageType</namespace>
    <namespace>Exiv2::Internal</namespace>
    <class kind="class">Exiv2::AnyError</class>
    <class kind="class">Exiv2::AsciiValue</class>
    <class kind="class">Exiv2::BasicError</class>
    <class kind="class">Exiv2::BasicIo</class>
    <class kind="class">Exiv2::BlockMap</class>
    <class kind="class">Exiv2::BmffImage</class>
    <class kind="class">Exiv2::BmpImage</class>
    <class kind="class">Exiv2::CommentValue</class>
    <class kind="class">Exiv2::Converter</class>
    <class kind="class">Exiv2::Cr2Image</class>
    <class kind="class">Exiv2::Cr2Parser</class>
    <class kind="class">Exiv2::CrwImage</class>
    <class kind="class">Exiv2::CrwParser</class>
    <class kind="struct">Exiv2::DataBuf</class>
    <class kind="struct">Exiv2::DataSet</class>
    <class kind="class">Exiv2::DataValue</class>
    <class kind="class">Exiv2::DateValue</class>
    <class kind="class">Exiv2::EpsImage</class>
    <class kind="class">Exiv2::ExifData</class>
    <class kind="class">Exiv2::Exifdatum</class>
    <class kind="class">Exiv2::ExifKey</class>
    <class kind="class">Exiv2::ExifParser</class>
    <class kind="class">Exiv2::ExifTags</class>
    <class kind="class">Exiv2::ExifThumb</class>
    <class kind="class">Exiv2::ExifThumbC</class>
    <class kind="class">Exiv2::ExvImage</class>
    <class kind="class">Exiv2::FileIo</class>
    <class kind="class">Exiv2::GifImage</class>
    <class kind="struct">Exiv2::GroupInfo</class>
    <class kind="class">Exiv2::HttpIo</class>
    <class kind="struct">Exiv2::Iloc</class>
    <class kind="class">Exiv2::Image</class>
    <class kind="class">Exiv2::ImageFactory</class>
    <class kind="class">Exiv2::INIReader</class>
    <class kind="class">Exiv2::IoCloser</class>
    <class kind="class">Exiv2::IptcData</class>
    <class kind="class">Exiv2::IptcDataSets</class>
    <class kind="class">Exiv2::Iptcdatum</class>
    <class kind="class">Exiv2::IptcKey</class>
    <class kind="class">Exiv2::IptcParser</class>
    <class kind="class">Exiv2::Jp2Image</class>
    <class kind="class">Exiv2::JpegBase</class>
    <class kind="class">Exiv2::JpegImage</class>
    <class kind="class">Exiv2::Key</class>
    <class kind="class">Exiv2::LangAltValue</class>
    <class kind="struct">Exiv2::LangAltValueComparator</class>
    <class kind="class">Exiv2::LogMsg</class>
    <class kind="class">Exiv2::MemIo</class>
    <class kind="class">Exiv2::Metadatum</class>
    <class kind="struct">Exiv2::MimeTypeList</class>
    <class kind="class">Exiv2::MrwImage</class>
    <class kind="struct">Exiv2::NativePreview</class>
    <class kind="class">Exiv2::OrfImage</class>
    <class kind="class">Exiv2::OrfParser</class>
    <class kind="class">Exiv2::PgfImage</class>
    <class kind="struct">Exiv2::Photoshop</class>
    <class kind="class">Exiv2::PngImage</class>
    <class kind="class">Exiv2::PreviewImage</class>
    <class kind="class">Exiv2::PreviewManager</class>
    <class kind="struct">Exiv2::PreviewProperties</class>
    <class kind="class">Exiv2::PsdImage</class>
    <class kind="class">Exiv2::RafImage</class>
    <class kind="struct">Exiv2::RecordInfo</class>
    <class kind="class">Exiv2::RemoteIo</class>
    <class kind="class">Exiv2::Rw2Image</class>
    <class kind="class">Exiv2::Rw2Parser</class>
    <class kind="struct">Exiv2::Slice</class>
    <class kind="struct">Exiv2::Slice&lt; const container &gt;</class>
    <class kind="struct">Exiv2::Slice&lt; const T * &gt;</class>
    <class kind="struct">Exiv2::Slice&lt; T * &gt;</class>
    <class kind="class">Exiv2::StringValue</class>
    <class kind="class">Exiv2::StringValueBase</class>
    <class kind="struct">Exiv2::TagInfo</class>
    <class kind="class">Exiv2::TgaImage</class>
    <class kind="class">Exiv2::TiffImage</class>
    <class kind="class">Exiv2::TiffParser</class>
    <class kind="class">Exiv2::TimeValue</class>
    <class kind="class">Exiv2::TypeInfo</class>
    <class kind="class">Exiv2::Uri</class>
    <class kind="class">Exiv2::Value</class>
    <class kind="class">Exiv2::ValueType</class>
    <class kind="class">Exiv2::WebPImage</class>
    <class kind="class">Exiv2::XmpArrayValue</class>
    <class kind="class">Exiv2::XmpData</class>
    <class kind="class">Exiv2::Xmpdatum</class>
    <class kind="class">Exiv2::XmpKey</class>
    <class kind="struct">Exiv2::XmpNsInfo</class>
    <class kind="class">Exiv2::XmpParser</class>
    <class kind="class">Exiv2::XmpProperties</class>
    <class kind="struct">Exiv2::XmpPropertyInfo</class>
    <class kind="class">Exiv2::XmpSidecar</class>
    <class kind="class">Exiv2::XmpTextValue</class>
    <class kind="class">Exiv2::XmpValue</class>
    <class kind="class">Exiv2::XPathIo</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>Dictionary</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afae71d05c1e275acf159c2b9324974e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasicError&lt; char &gt;</type>
      <name>Error</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>accd3e49cafe9db52c1e0e6f648753cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Exifdatum &gt;</type>
      <name>ExifMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a93a10b1ca722d594efdf5472464c8ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NativePreview &gt;</type>
      <name>NativePreviewList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af72182be3e51f30ef8cb55a86dfa8e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::UniquePtr(*</type>
      <name>NewInstanceFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaabaa374a195b14c6eb9cdc78801c4bd</anchor>
      <arglist>)(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>IsThisTypeFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aafd83ca9221779c4f95dc17261966b22</anchor>
      <arglist>)(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>ini_handler</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a35bf081c63f6036c8a151e80eeeaea19</anchor>
      <arglist>)(void *user, const char *section, const char *name, const char *value)</arglist>
    </member>
    <member kind="typedef">
      <type>char *(*</type>
      <name>ini_reader</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad54178bba416c07112ab2e1500d671ac</anchor>
      <arglist>)(char *str, int num, void *stream)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Iptcdatum &gt;</type>
      <name>IptcMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5caa9cbded318bf7d22a2d219c3d45f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>PreviewId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7cf3033d88acbcf7a808946868f0b239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PreviewProperties &gt;</type>
      <name>PreviewPropertiesList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad46a7838fd620360c753a64922b0d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream &amp;(*</type>
      <name>PrintFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e77e3dd183fadf48c235d15cac8964e</anchor>
      <arglist>)(std::ostream &amp;, const Value &amp;, const ExifData *pExifData)</arglist>
    </member>
    <member kind="typedef">
      <type>const TagInfo *(*</type>
      <name>TagListFct</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ba57e563a37438f18a0c1d7a9a767bc</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>byte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f60a5bd4207fe155f6cf93a15efa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; uint32_t, uint32_t &gt;</type>
      <name>URational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aedcaa9af0563cbd00a19b040d5aa7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int32_t, int32_t &gt;</type>
      <name>Rational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95756f3f7fa19103f83addf5fa088a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; byte &gt;</type>
      <name>Blob</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e7b9a2ef47caec919b15f1ae6ff4872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; uint16_t &gt;</type>
      <name>UShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3f00bf58d6021c8c297f070d4a761651</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; uint32_t &gt;</type>
      <name>ULongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab25aa284d2da55e64eba4e8ed0692149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; URational &gt;</type>
      <name>URationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a16f4de646ee869927f6246645b142626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int16_t &gt;</type>
      <name>ShortValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a67665147cbe2c7bd22af5aed7b7478ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; int32_t &gt;</type>
      <name>LongValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a47f8d64316779977c1869da776c26b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; Rational &gt;</type>
      <name>RationalValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab2a69ae1200f28233d89237bcefe952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; float &gt;</type>
      <name>FloatValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9260b475b138fdc65e6cba9c8c7b02a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType&lt; double &gt;</type>
      <name>DoubleValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afc09286d7a62c49ef04cb66c0427518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Xmpdatum &gt;</type>
      <name>XmpMetadata</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aef92d6c930cf939c01291a526e128677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorCode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kerValueTooLarge</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340ba5d37fc6fe341311a3cc5d752fd222fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kerDataAreaValueTooLarge</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2f8222633119f427c209fe2ae0bc340bace2b02c4983f44c3584b85de7a861c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EnVar</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5dea113f005c36569d07fa669efcd782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Protocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a26b6aada6dabfccfc0e99559feb91887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PrintStructureOption</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0e75ea64b8d502bf50e75ce1bb8c1ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>XmpCategory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa280a04d28597f8259460e3d322a9489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94c225faf6d6c611a3828fae1c28efa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WriteMethod</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aabfd4f86ce5d686323498c42cfd6cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MetadataId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acca494c8cf80f3ac8a804e1b54afffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccessMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af5f0ea6c944c786f7c4c4841fa22b16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca6abd8e6e48dddae9bac03019ae907795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asciiString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca773cf6dde5caaabb3dcf9fb161fa7dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0329efdda8becff3ecf89bfbc816f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca3b506c0729276e4de3a0ab4d9b2226bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae450f64413c928b527cfdd73129d6606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedByte</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca717f7d50dd484167359361d2c560f83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>undefined</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa044ece6f004f519dce91f57319bb6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca4a46f8aa5e64d33468602515f6255b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca501fdf1b61472bff3b4da19b956eabda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0d777a3a2542fbff07ed29563167b3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cabcc0eb22efc41f32ba573c18731b4928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca9b4d2fa208df5c86d24f7d7c41bd09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffIfd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cae9896f64a72a68e176f02c1880b19681</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsignedLongLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca339b2ab81879289dfc4042ffcd5084f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signedLongLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca4bcac66f83baf5fb167e9ecbac24bf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tiffIfd8</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca158c377708819e085a95ce5306b47e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>string</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca2d79fb07c9ec891f281968dad43c1e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>date</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca0c347d8ddbbad9440f9bb6db8a06fa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>time</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca8526caf002a100bd730312d45808f1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>comment</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca98944819f3c9921109af5f0a39fcfa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directory</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc7cbf89ae7c64de808dc3611b2a880f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpText</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca77cea60f60ef2c6f0f986137c5404c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca627dda12626324231bb87883d8efc5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpBag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450caa5e7700549d4b079db70605d945447af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmpSeq</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca969c20e44455272599e3a273471546e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>langAlt</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca52dce1d022dd8927bc651d2e51dc1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450cafc75de7290b703a810102c8a003fc25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lastTypeId</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5153319711f35fe81cbc13f4b852450ca1d087498b678aa18f77ab6b5c1812921</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EXIV2API DataBuf</type>
      <name>readFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7a0cf82083985b5e1a9d7ae80c3e7145</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>writeFile</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a64fa7a04f73d3b651d374ab77b8489ce</anchor>
      <arglist>(const DataBuf &amp;buf, const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>ReplaceStringInPlace</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1a45b4005139572ef7b5fe525794c661</anchor>
      <arglist>(std::string subject, const std::string &amp;search, const std::string &amp;replace)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newBmffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a46af3635693156077a758dcb1ded91c7</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isBmffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aca1aa87697c612cffdea7121c8b16964</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newBmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aad75761195f857e8e6a24e9ef5aeb39e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isBmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f0081d729256cd77157f91420a84aa3</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8922d8b9a1d540ec6bd055d3b0ce297c</anchor>
      <arglist>(const ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveExifToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7bfba0876173080d9c6debe93566cff0</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7339dca89b4cd7f9993e73fb7e0ddca3</anchor>
      <arglist>(const XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveXmpToExif</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa154f40deeaae67e03c22c2dfdf77ab2</anchor>
      <arglist>(XmpData &amp;xmpData, ExifData &amp;exifData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>syncExifWithXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a70dfdeb48373b7ef189a35a46ac08ea3</anchor>
      <arglist>(ExifData &amp;exifData, XmpData &amp;xmpData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af8fceacf7bd7b8a797d9634929fd46cf</anchor>
      <arglist>(const IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveIptcToXmp</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a510060c4661508f8eddab05dcd19c863</anchor>
      <arglist>(IptcData &amp;iptcData, XmpData &amp;xmpData, const char *iptcCharset=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>copyXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a424ae46a7e24000f60316b11772bc019</anchor>
      <arglist>(const XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>moveXmpToIptc</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a167e7c4468cd5547ff324e8812ef2d5e</anchor>
      <arglist>(XmpData &amp;xmpData, IptcData &amp;iptcData)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>convertStringCharset</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4f890fc38384862cb4f1c0d2907170e6</anchor>
      <arglist>(std::string &amp;str, const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newCr2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e3e2ec3b766535c9d25cefbeaefee75</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isCr2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae3cb4b472f79902f63582c873014c272</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newCrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7d67de645edf9383e29e91e4121a2467</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isCrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aac6b303ad007fe7091e8dbed01d18fc1</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a057c36e3e63277d6d658fffb70958a60</anchor>
      <arglist>(std::ostream &amp;os, const DataSet &amp;dataSet)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>orientation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3c3db1cc5d043aa7d02c5bdf6ab032ee</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>isoSpeed</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4cf1c6f85a6ca6ce92e0005f99181f0a</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>dateTimeOriginal</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af693946ad7c4c70d42c36c5b1201986c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flashBias</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0b6314f768381554e6782fbd08cf1a07</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22719630afe2dc0b0d369b8a492b1aac</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sceneMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7a71bc8df8c2aad2a9557f001659cbed</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>macroMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9b5edeb9ef06ce854bee96dc5c96bdf1</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>imageQuality</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afaf5122eb0ae8c9df40220280edf9140</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>whiteBalance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4bce3f4afc7169280f937fc86a410f6b</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>lensName</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad032c255e7a9c18706051b3cd1e4ec04</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>saturation</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a12d945f378758b2fa93f17643e83dead</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sharpness</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aed82fe886b91139fce2d8a1848ee5dfa</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>contrast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a149e3b6368dc269c5cbd6534ea3352ce</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sceneCaptureType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afe3ec88d5fca478d91f3cffc89951936</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>meteringMode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae7f69adcca1b80e5ff46d84398eb1628</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>make</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7e1c74bba7c1a3346043be3c10d1cf98</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>model</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9f0a8d607739ceff3b4022beb279c934</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa597e3479245f9007713a40cf35e6ca0</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>fNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7dab70c071e89bc0ac8e12ede1c2ae83</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>shutterSpeedValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae3884075a7281f7239e42603779a7b63</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>apertureValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a64d3d0f7a95d6d51a2fc373b83e7aedf</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>brightnessValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8df6cb744109030b31f5ad1d221bbea4</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureBiasValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa24b50a995c223e75acee83e991d14cb</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>maxApertureValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac42453d4d9fab1c2dadebff472cad22a</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>subjectDistance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6c3e40c8c6696bdf6a28148f2bb8065c</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>lightSource</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a196bda962e3befbc32bd6a9eea811b31</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flash</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0eeccf09d0d1a2317ab03065685ca519</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>serialNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aea5cb5e3d068b0f05f65d84767777dbf</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>focalLength</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a30b712fad259eeccbc1e06077f64ffd6</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>subjectArea</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aec77300a3b74c4530fbda653e539cd09</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>flashEnergy</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af557d9510b43c08fe6eae296550bcced</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>exposureIndex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6d31ee8c1a6d7e8ac9d49f0f505e495</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>sensingMethod</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aef2d9ef9f2b1e93653bccc9472d81662</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API ExifData::const_iterator</type>
      <name>afPoint</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa2b7bc246ea19f62e14a4620d82a7d41</anchor>
      <arglist>(const ExifData &amp;ed)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newEpsInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a757c50f07507acf4265bd3c3f5065bcd</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isEpsType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afecfd2180c2824313ed3567714ca4db0</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; charT &gt;</type>
      <name>toBasicString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a336b0900420d9e691be0cb9d03d29922</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7278aaca730b5b5378961aea4fc522eb</anchor>
      <arglist>(std::ostream &amp;os, const AnyError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errMsg</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a69fb303117f0eadea1e7e6f201fc5620</anchor>
      <arglist>(int code)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>getEnv</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8dd981a66e151cce4635e97651d74558</anchor>
      <arglist>(int env_var)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>urlencode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a027366af7a25dea755008a24157df36a</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API char *</type>
      <name>urldecode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a998a71f5b2433c47d62e8fd5fe398e60</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>urldecode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab4d3eb4c41f61ab793a2637194dcd23a</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int</type>
      <name>base64encode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa1fc556d21ae586b4c3b066c58be55b3</anchor>
      <arglist>(const void *data_buf, size_t dataLength, char *result, size_t resultSize)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>base64decode</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7afeddc2b9668836c0eebf605201392b</anchor>
      <arglist>(const char *in, char *out, size_t out_size)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Protocol</type>
      <name>fileProtocol</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac88f1976a1e57192caa1731fba512b64</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>fileExists</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a92165bab2b983f5bf89aaef0b92e952a</anchor>
      <arglist>(const std::string &amp;path, bool ct=false)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>pathOfFileUrl</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab521f434ff6c0c82cb427afd578128da</anchor>
      <arglist>(const std::string &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>strError</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad73943ff4a2d19fcaca85419dadff51c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>getProcessPath</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad0235cc5df7a8ac75c9bb372610a25dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newGifInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac1aa47b4f7ecb88482c7d6a202180129</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isGifType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a808cb643e2dfd753f427e40ca298f96a</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int</type>
      <name>http</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a68ec8ce9c2e683d9fa7f44c012b47562</anchor>
      <arglist>(Exiv2::Dictionary &amp;request, Exiv2::Dictionary &amp;response, std::string &amp;errors)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>append</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a717a4bb844932a834dd109ce2554a2a4</anchor>
      <arglist>(Exiv2::Blob &amp;blob, const byte *buf, uint32_t len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ini_parse</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5d04e6a2091da5bc59e1c1304face5de</anchor>
      <arglist>(const char *filename, ini_handler handler, void *user)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ini_parse_file</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5ce23723a8d0aabf1ff9bb8044ffd02d</anchor>
      <arglist>(FILE *file, ini_handler handler, void *user)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ini_parse_stream</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a38f03d860983549f84158789c0d1de38</anchor>
      <arglist>(ini_reader reader, void *stream, ini_handler handler, void *user)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newJp2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6ee442c3e444d60e805744ef5005a74f</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isJp2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0b83cb814254dce1e07a4d1d91b920a8</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newJpegInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a39125c6c91cbbf084d0dbec1c369c42d</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isJpegType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aab31fb629d1322475db4daf5e57ddd14</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newExvInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a7b6b69bd8ff34e71840b9feeda71c41a</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isExvType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1a53f9bb84413de9c86f64ac4be03d2b</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a79d994f685503d9f1fdc83374ed40237</anchor>
      <arglist>(std::ostream &amp;os, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6e2d7cde2d05f80fb5a4687c0c0490dd</anchor>
      <arglist>(std::ostream &amp;os, const Metadatum &amp;md)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>cmpMetadataByTag</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2344927693224c0e6ba7f2860399a90a</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>cmpMetadataByKey</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad4cbb81074f260772bea7ebe9c5ebabe</anchor>
      <arglist>(const Metadatum &amp;lhs, const Metadatum &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newMrwInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aee610be6e42afec123ffec17c979d4ac</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isMrwType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a65ed1a0d86c0aff21eba6865ab55ef2f</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newOrfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aaff2137b3ba9216aabed54e6132cae9e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isOrfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a40a82912fe2bd4613ca767ecec7d932c</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newPgfInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aed95843efbbaa34a881a9244e6331920</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isPgfType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a29cf503876570ec49a2f92e248713818</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newPngInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a21d09b3c7e29c08b3be17ba423fd89f1</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isPngType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa8f35a1ff80fbea87aec202f8ddb69c7</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abacaa0596e9c197b99985ca68174a4c0</anchor>
      <arglist>(std::ostream &amp;os, const XmpPropertyInfo &amp;propertyInfo)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newPsdInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95943d8e240a020479cac628afdfb586</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isPsdType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a23c7f4fe4cf74c32cfc9c4abed105fe9</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newRafInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adff867411f7002dff97c6aee0f90679e</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isRafType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22d326e1e89f91a282d66965a310abd2</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newRw2Instance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8e0be03d5b8d2fb10c17964224ea6313</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isRw2Type</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a46f182bf1cbf22d41d4cf9f35d473fcf</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; T &gt;</type>
      <name>makeSlice</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a48f052d5faf09613f1f972f0d7beae3f</anchor>
      <arglist>(T &amp;cont, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; T * &gt;</type>
      <name>makeSlice</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a1b23d9fd3b394543db225289c322f174</anchor>
      <arglist>(T *ptr, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; container &gt;</type>
      <name>makeSlice</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a8148bd0d44257fd500251e6344e51b82</anchor>
      <arglist>(container &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; container &gt;</type>
      <name>makeSliceFrom</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab7c5bd0be24764dd58a655b1fff256d4</anchor>
      <arglist>(container &amp;cont, size_t begin)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; container &gt;</type>
      <name>makeSliceUntil</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa1dbab024061b0365811e0f924548d32</anchor>
      <arglist>(container &amp;cont, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>Slice&lt; T * &gt;</type>
      <name>makeSliceUntil</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3bfd3a5159cbd0a4c2e9d4aaa835accc</anchor>
      <arglist>(T *ptr, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ed94f1c2ddb38d6b07258c82cbd0c60</anchor>
      <arglist>(std::ostream &amp;os, const TagInfo &amp;ti)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newTgaInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad2cf2848166d16c158bc4891ad5bc312</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isTgaType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae9cb3daadac22153f6e100e2f8f8d610</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newTiffInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a04859ee6b8b3bf035441ef85e0f689d7</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isTiffType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a6407de824ae2ce762b7334110c6bac26</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Slice&lt; byte * &gt;</type>
      <name>makeSlice</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>acccbd32f727f4dbcba4720d4cc2b3eed</anchor>
      <arglist>(DataBuf &amp;buf, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Slice&lt; const byte * &gt;</type>
      <name>makeSlice</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0d0b8da56c785a95ed59725341cf8a41</anchor>
      <arglist>(const DataBuf &amp;buf, size_t begin, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API uint16_t</type>
      <name>getUShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5a30946063473cd475bb96c36d22b946</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getUShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9b1a0684becd9f467f5b1dabf612bca9</anchor>
      <arglist>(const Slice&lt; T &gt; &amp;buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API uint32_t</type>
      <name>getULong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a46271e2b9e058665e3fbba0d8b628118</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API uint64_t</type>
      <name>getULongLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa79e80fa1c30c579bdd37462d505cbfa</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API URational</type>
      <name>getURational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af4e7e47da013d52b3051f6f3275fd841</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int16_t</type>
      <name>getShort</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3c3c33f7c9c0de7c9e0fe676913483c6</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int32_t</type>
      <name>getLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad7358bb2d8113cea488fbe9b1e9396dd</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Rational</type>
      <name>getRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ab3a32ce01ae37e1a68df67871364b390</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API float</type>
      <name>getFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a191db5c36a8c371267297c4acf2bd828</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API double</type>
      <name>getDouble</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a07318321fc9bcc6afb5d45ee3437350f</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2cb3ff31157141b38638083c74d7c113</anchor>
      <arglist>(std::ostream &amp;os, const Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad622f6bda0e524cee2f2c234f18db16e</anchor>
      <arglist>(std::istream &amp;is, Rational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a918f7974ef0a25a4b3d74108b2bba342</anchor>
      <arglist>(std::ostream &amp;os, const URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aab9d674f027efa28f71af2500e8160f2</anchor>
      <arglist>(std::istream &amp;is, URational &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>us2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afde14a0740fb12cdf9f284ed27a330df</anchor>
      <arglist>(byte *buf, uint16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>ul2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4711481c63a67de72e1b4607cc11f5ac</anchor>
      <arglist>(byte *buf, uint32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>ull2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abed83742fc64c105c4dceae551e16d03</anchor>
      <arglist>(byte *buf, uint64_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>ur2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad1972bf59be834b8e163b46376ea79f1</anchor>
      <arglist>(byte *buf, URational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>s2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae94958c497b8380cc574fa2c75e66a5f</anchor>
      <arglist>(byte *buf, int16_t s, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>l2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a34f6d26c2d1cccbcda6e49f606675645</anchor>
      <arglist>(byte *buf, int32_t l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>r2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac0464649e6f53f20c42d986972a43d47</anchor>
      <arglist>(byte *buf, Rational l, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>f2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a116fd58ab9c043fec5759389d58ae212</anchor>
      <arglist>(byte *buf, float f, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>d2Data</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a134892bbd4e11d7513e3f85fcb088f09</anchor>
      <arglist>(byte *buf, double d, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>hexdump</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0dd0aabfe5c64537cbebe5c7a01e1bed</anchor>
      <arglist>(std::ostream &amp;os, const byte *buf, long len, long offset=0)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isHex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a261778b8785eb1d32f7336433d4099e2</anchor>
      <arglist>(const std::string &amp;str, size_t size=0, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int</type>
      <name>exifTime</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>afb57924947c38d0d3b5f25d28fa1cf38</anchor>
      <arglist>(const char *buf, struct tm *tm)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API const char *</type>
      <name>exvGettext</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3a7e893d96cbc8917caee92c55d9e1a3</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API long</type>
      <name>parseLong</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a18cc4eeb9930b307a4295c950ab51e2a</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API float</type>
      <name>parseFloat</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a254648c942c052b1bc3f468751ac5084</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Rational</type>
      <name>parseRational</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a689427850a5345b5165ae36fff6cd79f</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Rational</type>
      <name>floatToRationalCast</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2e05378007c2c8ae3ad6fbc880ee96af</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>find</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a130b1d28ffc46d64bef4663f2872cd91</anchor>
      <arglist>(T(&amp;src)[N], const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>char(&amp;</type>
      <name>sizer</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a911990ae8d2f4f47554fb493fcf31e25</anchor>
      <arglist>(T(&amp;)[N]))[N]</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aeb5a1b7e0a14e8671707d5be16cbda24</anchor>
      <arglist>(const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stringTo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a94f8949fc0e956f239c26489e87c7001</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stringTo&lt; bool &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a5584318f5a20a6e35420d04d99c60bc3</anchor>
      <arglist>(const std::string &amp;s, bool &amp;ok)</arglist>
    </member>
    <member kind="function">
      <type>IntType</type>
      <name>gcd</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a36dc44cabbd590c8083ed6eeab81c92d</anchor>
      <arglist>(IntType n, IntType m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2db04c03504f9601f3f4c4aa5d5c4d51</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af0b83a1433a7a18fcf0a09b082714f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a95d0279140f957f833817960b2ea5de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; uint32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4030bbc9f931a5bb0e0e2b89e1b84c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; URational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6b036b9adbec5f8ba12cd95802aa7e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int16_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a22bef63bc2a51373348b1d42b8259bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; int32_t &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0bb321a38aa3b97b8c0cba97109454b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; Rational &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>adbbc773aa4c41b1c6238f685ee68e115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; float &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aceb1098a652ad03ba7b5f3cf65e2fea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>getType&lt; double &gt;</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ade6101a28515811201e35333b3785029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4901857878dd5ae68afb2f6d075993fc</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae4e9a94996ef8406470309bb4cce9ac4</anchor>
      <arglist>(const byte *buf, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a59acfb133eebbee93865f1cc07106bca</anchor>
      <arglist>(byte *buf, T t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac70293ab419ea7ebc377c2d7d939f1e2</anchor>
      <arglist>(byte *buf, uint16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2ad3813e1f2ee3b581a0a243532d6525</anchor>
      <arglist>(byte *buf, uint32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a4ca265f73d131bb3172a5e57e5e676f4</anchor>
      <arglist>(byte *buf, URational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa5f4a2f6a321047f7c350be75f4d25f3</anchor>
      <arglist>(byte *buf, int16_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a0daeaacc9cd9455c4f86fd6df8f6c800</anchor>
      <arglist>(byte *buf, int32_t t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a782c3e4630f01b71d37f71faebef4f11</anchor>
      <arglist>(byte *buf, Rational t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a626f54e7ff31e31350cba021eced7833</anchor>
      <arglist>(byte *buf, float t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>toData</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a21cdfa085d78f41dcd91364c85fa0056</anchor>
      <arglist>(byte *buf, double t, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API int</type>
      <name>versionNumber</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a9aef6a2016a70e085501cb1206e6d7cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>versionString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a69e13a78f10629b3952a743b4f96d173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API std::string</type>
      <name>versionNumberHexString</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3d6b7265d3f9099e38a8d0bf9299dd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API const char *</type>
      <name>version</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2019ba1f82453a4f43d24d12fb63e3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>testVersion</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>aa1f09b63d8eff673247041e6fd44a78e</anchor>
      <arglist>(int major, int minor, int patch)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API void</type>
      <name>dumpLibraryInfo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a3233369d2110849c6957da3acb8f7c9f</anchor>
      <arglist>(std::ostream &amp;os, const std::vector&lt; std::regex &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newWebPInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af28dfe8f4eccf75e55ea6147ee84e9dc</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isWebPType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>abc38ab700592cda9c648e1cc74773e80</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API Image::UniquePtr</type>
      <name>newXmpInstance</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a2d2b4e60bff72e48a5f17951a8d0ed36</anchor>
      <arglist>(BasicIo::UniquePtr io, bool create)</arglist>
    </member>
    <member kind="function">
      <type>EXIV2API bool</type>
      <name>isXmpType</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac0b1393f260b615469be336129a5499b</anchor>
      <arglist>(BasicIo &amp;iIo, bool advance)</arglist>
    </member>
    <member kind="function">
      <type>Exiv2::Exifdatum &amp;</type>
      <name>setValue</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae5ac9e3acf6386d67a61629b06f4b354</anchor>
      <arglist>(Exiv2::Exifdatum &amp;exifDatum, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_hex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a19f2263b9ae35163fc31893275a8daf1</anchor>
      <arglist>(char code)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>from_hex</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>af2eb595e2b6a418ca1493300f6d4fc20</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpIptcdataByRecord</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a17b52d6f278c7d098731d0a1d7aa4296</anchor>
      <arglist>(const Iptcdatum &amp;lhs, const Iptcdatum &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::array&lt; const char *, 2 &gt;</type>
      <name>ENVARDEF</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>a543f354b0aae652069c75eaec0ab9e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::array&lt; const char *, 2 &gt;</type>
      <name>ENVARKEY</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ad2e649b235b5e8853e3605b921c66d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr SectionInfo</type>
      <name>sectionInfo</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ae93376b0b07b012ef80c78d41b3f8d0f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr MimeTypeList</type>
      <name>mimeTypeList</name>
      <anchorfile>namespaceExiv2.html</anchorfile>
      <anchor>ac6a00748bddcfd2f78e576e086949dfd</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::ImageType</name>
    <filename>namespaceExiv2_1_1ImageType.html</filename>
    <member kind="variable">
      <type>const int</type>
      <name>bmff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a6b7f47ae59c91bdde09b98a83e57ffde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae4d3fc0e08be16ccd0ddfb3c674b5481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a7956fc605d09bc10e126691f859f1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>crw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a308214d9c007e1c0f7a5900f4a8ce12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>eps</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aeb97f777e3c8bf8cfdb89e24ad6adb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>gif</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5a23950c2d3c8805cc7fc7bcd6d00e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0fa6a19fc7872d83957727f1c1dde0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jp2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2d98538b0a8e78b7e53ac19d09491a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>jpeg</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a937f63495908470ff8bf7c94e5ea1298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>exv</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a63dc8eee4aa178e786a81b2acbc4da0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>mrw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a161d087039e63656cff123f4e74071d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>orf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a69661560b65c410d9419ecce0277080f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pgf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aebdc24c77964e499108068a4a0618626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>png</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a97fe878fdc25367e8fe5b832211c9435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>psd</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd685b7d2282abf733c4469ddd00399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>raf</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a0d3c27b9ab28a40ef87994a05ffb946c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>rw2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a2bbdd4b7b9805eb3513917d33297ce7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tga</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>abd93d59659be97f034f8b8b6b5b3d2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tiff</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>ae334f0954e8dec6a0a6a27439dfa256f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>dng</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a5290f8d5984d9100bbafb87359eecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>nef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a331438c9d97350ab90ff5176ccc7c1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pef</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a28e4c07e3d00fc28b0cba330d8f6b15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>arw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>aa76ab2055b301995de17b452e8817087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>sr2</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a6b3114550168aecbff4e9a7f575881e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>srw</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a934af38458609f0ebe4d947da3c41f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>webp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a3fbc1e17896d521cf27f53e476678c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>xmp</name>
      <anchorfile>namespaceExiv2_1_1ImageType.html</anchorfile>
      <anchor>a04804ec8449a660a8014aa70b68098b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::Internal</name>
    <filename>namespaceExiv2_1_1Internal.html</filename>
    <namespace>Exiv2::Internal::Tag</namespace>
    <class kind="struct">Exiv2::Internal::ArrayCfg</class>
    <class kind="struct">Exiv2::Internal::ArrayDef</class>
    <class kind="struct">Exiv2::Internal::ArraySet</class>
    <class kind="struct">Exiv2::Internal::binaryToStringHelper</class>
    <class kind="class">Exiv2::Internal::CanonMakerNote</class>
    <class kind="class">Exiv2::Internal::Casio2MakerNote</class>
    <class kind="class">Exiv2::Internal::Casio2MnHeader</class>
    <class kind="class">Exiv2::Internal::CasioMakerNote</class>
    <class kind="class">Exiv2::Internal::CiffComponent</class>
    <class kind="class">Exiv2::Internal::CiffDirectory</class>
    <class kind="class">Exiv2::Internal::CiffEntry</class>
    <class kind="class">Exiv2::Internal::CiffHeader</class>
    <class kind="struct">Exiv2::Internal::ConstSliceBase</class>
    <class kind="struct">Exiv2::Internal::ContainerStorage</class>
    <class kind="class">Exiv2::Internal::Cr2Header</class>
    <class kind="class">Exiv2::Internal::CrwMap</class>
    <class kind="struct">Exiv2::Internal::CrwMapping</class>
    <class kind="struct">Exiv2::Internal::CrwSubDir</class>
    <class kind="class">Exiv2::Internal::FindExifdatum</class>
    <class kind="class">Exiv2::Internal::FujiMakerNote</class>
    <class kind="class">Exiv2::Internal::FujiMnHeader</class>
    <class kind="class">Exiv2::Internal::IoWrapper</class>
    <class kind="struct">Exiv2::Internal::LensIdFct</class>
    <class kind="class">Exiv2::Internal::LensInfoNotFound</class>
    <class kind="class">Exiv2::Internal::MinoltaMakerNote</class>
    <class kind="class">Exiv2::Internal::MnHeader</class>
    <class kind="struct">Exiv2::Internal::MutableSliceBase</class>
    <class kind="class">Exiv2::Internal::Nikon1MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon2MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon2MnHeader</class>
    <class kind="class">Exiv2::Internal::Nikon3MakerNote</class>
    <class kind="class">Exiv2::Internal::Nikon3MnHeader</class>
    <class kind="struct">Exiv2::Internal::NikonArrayIdx</class>
    <class kind="class">Exiv2::Internal::OffsetWriter</class>
    <class kind="class">Exiv2::Internal::Olympus2MnHeader</class>
    <class kind="class">Exiv2::Internal::OlympusMakerNote</class>
    <class kind="class">Exiv2::Internal::OlympusMnHeader</class>
    <class kind="class">Exiv2::Internal::OrfHeader</class>
    <class kind="class">Exiv2::Internal::PanasonicMakerNote</class>
    <class kind="class">Exiv2::Internal::PanasonicMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxDngMnHeader</class>
    <class kind="class">Exiv2::Internal::PentaxMakerNote</class>
    <class kind="class">Exiv2::Internal::PentaxMnHeader</class>
    <class kind="class">Exiv2::Internal::PngChunk</class>
    <class kind="struct">Exiv2::Internal::PtrSliceStorage</class>
    <class kind="struct">Exiv2::Internal::remove_const</class>
    <class kind="struct">Exiv2::Internal::remove_const&lt; const T &gt;</class>
    <class kind="struct">Exiv2::Internal::remove_cv</class>
    <class kind="struct">Exiv2::Internal::remove_pointer</class>
    <class kind="struct">Exiv2::Internal::remove_pointer&lt; T * &gt;</class>
    <class kind="struct">Exiv2::Internal::remove_pointer&lt; T *const &gt;</class>
    <class kind="struct">Exiv2::Internal::remove_volatile</class>
    <class kind="struct">Exiv2::Internal::remove_volatile&lt; volatile T &gt;</class>
    <class kind="class">Exiv2::Internal::Rw2Header</class>
    <class kind="class">Exiv2::Internal::Samsung2MakerNote</class>
    <class kind="class">Exiv2::Internal::SamsungMnHeader</class>
    <class kind="struct">Exiv2::Internal::SectionInfo</class>
    <class kind="class">Exiv2::Internal::SigmaMakerNote</class>
    <class kind="class">Exiv2::Internal::SigmaMnHeader</class>
    <class kind="struct">Exiv2::Internal::SliceBase</class>
    <class kind="class">Exiv2::Internal::SonyMakerNote</class>
    <class kind="class">Exiv2::Internal::SonyMnHeader</class>
    <class kind="struct">Exiv2::Internal::TagDetails</class>
    <class kind="struct">Exiv2::Internal::TagDetailsBitmask</class>
    <class kind="struct">Exiv2::Internal::TagVocabulary</class>
    <class kind="class">Exiv2::Internal::TiffBinaryArray</class>
    <class kind="class">Exiv2::Internal::TiffBinaryElement</class>
    <class kind="class">Exiv2::Internal::TiffComponent</class>
    <class kind="class">Exiv2::Internal::TiffCopier</class>
    <class kind="class">Exiv2::Internal::TiffCreator</class>
    <class kind="class">Exiv2::Internal::TiffDataEntry</class>
    <class kind="class">Exiv2::Internal::TiffDataEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffDecoder</class>
    <class kind="class">Exiv2::Internal::TiffDirectory</class>
    <class kind="class">Exiv2::Internal::TiffEncoder</class>
    <class kind="class">Exiv2::Internal::TiffEntry</class>
    <class kind="class">Exiv2::Internal::TiffEntryBase</class>
    <class kind="class">Exiv2::Internal::TiffFinder</class>
    <class kind="struct">Exiv2::Internal::TiffGroupStruct</class>
    <class kind="class">Exiv2::Internal::TiffHeader</class>
    <class kind="class">Exiv2::Internal::TiffHeaderBase</class>
    <class kind="class">Exiv2::Internal::TiffIfdMakernote</class>
    <class kind="class">Exiv2::Internal::TiffImageEntry</class>
    <class kind="struct">Exiv2::Internal::TiffImgTagStruct</class>
    <class kind="class">Exiv2::Internal::TiffMapping</class>
    <class kind="struct">Exiv2::Internal::TiffMappingInfo</class>
    <class kind="class">Exiv2::Internal::TiffMnCreator</class>
    <class kind="class">Exiv2::Internal::TiffMnEntry</class>
    <class kind="struct">Exiv2::Internal::TiffMnRegistry</class>
    <class kind="class">Exiv2::Internal::TiffParserWorker</class>
    <class kind="class">Exiv2::Internal::TiffPathItem</class>
    <class kind="class">Exiv2::Internal::TiffReader</class>
    <class kind="class">Exiv2::Internal::TiffRwState</class>
    <class kind="class">Exiv2::Internal::TiffSizeEntry</class>
    <class kind="class">Exiv2::Internal::TiffSubIfd</class>
    <class kind="struct">Exiv2::Internal::TiffTreeStruct</class>
    <class kind="class">Exiv2::Internal::TiffVisitor</class>
    <member kind="typedef">
      <type>void(*)(const CiffComponent &amp;, const CrwMapping *, Image &amp;, ByteOrder)</type>
      <name>CrwDecodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a858fadc81f885bf1f12a9e48494d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(const Image &amp;, const CrwMapping *, CiffHeader *)</type>
      <name>CrwEncodeFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4442035fbd0fcb6d4ee1644203dd64d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; CrwSubDir &gt;</type>
      <name>CrwDirs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5c8ea93fcef16c1c8b96f31014520d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TiffComponent *(*)(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</type>
      <name>NewMnFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4949a4ea48a30fc0f582eba4be8fa393</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TiffComponent *(*)(uint16_t tag, IfdId group, IfdId mnGroup)</type>
      <name>NewMnFct2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6f70df01c204d18b3e420930ad827353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>TiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad03178dad6b0e299807a7b95b39e0cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*)(uint16_t, const byte *, uint32_t, TiffComponent *const)</type>
      <name>CfgSelFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a62313cc05f6dbce89e6649d2294e0764</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DataBuf(*)(uint16_t, const byte *, uint32_t, TiffComponent *const)</type>
      <name>CryptFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaa4d8405e5b1919f8b888b014ab95333</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(TiffDecoder::*)(const TiffEntryBase *)</type>
      <name>DecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa38ff518da0ecf7db4a1d2bcf3d733d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(TiffEncoder::*)(TiffEntryBase *, const Exifdatum *)</type>
      <name>EncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4a35fddc2e143436a34afe3b3e0ff951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecoderFct(*)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</type>
      <name>FindDecoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7d8a3d2e9d1bdd51bd95367a40ceb520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EncoderFct(*)(const std::string &amp;make, uint32_t extendedTag, IfdId group)</type>
      <name>FindEncoderFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a14a2a8cfb33acdea33dc5fa732d48b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TiffComponent &gt;(*)(uint16_t tag, IfdId group)</type>
      <name>NewTiffCompFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae6a5b36c7675264af62c74a24cd48c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; TiffPathItem &gt;</type>
      <name>TiffPath</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a87a73aa68c7acd45bbdac2518705d10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IfdId &gt;</type>
      <name>PrimaryGroups</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f7836dbc5cdb414e079a1e8c96a5fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataLocId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e444d08b1880dabd0190afdacdb42a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab61a3dc9c8db85c29abf3f7443b25db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SectionId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a42c2915d6eb0c870b5c2b233c8076037</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCsLensFFFF</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7150fbe5b0a323e7be7ec425fb0b3626</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>canonEv</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a98d2248e3f1df52f23cbbdd18b380a88</anchor>
      <arglist>(long val)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>packIfdId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a410460f90daa87c9a9a16639b2a2b21f</anchor>
      <arglist>(const ExifData &amp;exifData, IfdId ifdId, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stringFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad79e627e95ffec614d5d91be92f8029b</anchor>
      <arglist>(const char *format,...) ATTRIBUTE_FORMAT_PRINTF</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>binaryToHex</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b8620e3142840e13a68867fcfc8fe77</anchor>
      <arglist>(const byte *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>indent</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a898199dce665df2e51d921b557af0690</anchor>
      <arglist>(int32_t depth)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade9e6e7bb6a43b714e2880f3dd250df6</anchor>
      <arglist>(std::ostream &amp;stream, const binaryToStringHelper&lt; T &gt; &amp;binToStr)</arglist>
    </member>
    <member kind="function">
      <type>binaryToStringHelper&lt; T &gt;</type>
      <name>binaryToString</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af34f35ffe2178d8537a2de01263febbd</anchor>
      <arglist>(const Slice&lt; T &gt; sl)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getExiv2ConfigPath</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3170ffa4d54148053546b80f328f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readExiv2Config</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac2afbedbe0cda263f4a5dcfca1ebdd76</anchor>
      <arglist>(const std::string &amp;section, const std::string &amp;value, const std::string &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af45d0c588ae7fed9a114360ae0d20413</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newIfdMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac644e2b25848c7b08b4e208c977312a3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae6b8805c882b30f4f992ec3d11691ba2</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympusMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d35675525b7e091fbb9318a51a675ef</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newOlympus2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3abd12b311e188910521ce968129f11f</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a260b34a09cec125f39433614ac11d989</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newFujiMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a41af8e2dfd2746beba18be9f56469720</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikonMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac52719d1e3bb994008772f83f609ff94</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab4b074daef4d895c73daf9bdb4eee69c</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newNikon3Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72880d9402840d41f933b1bde32150bf</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50c93fb52ea46f8ce71a02a47d6a35b3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPanasonicMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1139bcade370b885c3dc8d8e2b316e16</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abce03865a0aa274c91b8203a42e31c13</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe063e35f4659ffb946bb0ba137293d3</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newPentaxDngMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acccde413ce8bb61feaa3ae33daff4662</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7c1aa880133b5320e9e784178554fb8</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSamsungMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab9bb0cf4e71868e34b63dcb12edebde5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a10f30799b5107df59489cb5cad20f961</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSigmaMn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a940ba1982bf1b9c949aa44903648abe5</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSonyMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a50b1a1d205fa295a3a295634e56f215d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony1Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac783235ad92b8c31db4435304aa37c75</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newSony2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a34fc25b42a3d42f0c0cdd8ab1e56a60d</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newCasioMn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2845bb1fa5b8203f23da1fd9253d0a2</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup, const byte *pData, uint32_t size, ByteOrder byteOrder)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent *</type>
      <name>newCasio2Mn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade6bc22e127e1813dc9939a4701b2ff4</anchor>
      <arglist>(uint16_t tag, IfdId group, IfdId mnGroup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nikonSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f2631eb24935814c8f3740cf459de4b</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nikonAf2Selector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2340b8ad108f96b2d1e1a269383b082</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>DataBuf</type>
      <name>nikonCrypt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a793f2472ec54d909cd6032d01fd21dae</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sonyCsSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c259094300986472ea5fb07e4c0cf6a</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sony2010eSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a58b80567de9ca47c55e376a3100cd083</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sony2FpSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aac92a665b64b16d9ce8ef3baeeacd8df</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sonyMisc2bSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a36b5b1311b20ad76809aad31f3725102</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sonyMisc3cSelector</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2f0977a05b0b28a8104419b5c5eabe72</anchor>
      <arglist>(uint16_t tag, const byte *pData, uint32_t size, TiffComponent *const pRoot)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>ltrim</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a923f92480b26469b8ecd535fc4ee0ad9</anchor>
      <arglist>(std::string &amp;s, const char *t=&quot; \t\n\r\f\v&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>rtrim</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a60b3364e317b42843dc06bd33e7a2279</anchor>
      <arglist>(std::string &amp;s, const char *t=&quot; \t\n\r\f\v&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>trim</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5c6db358eb65f82380e301693deb11ca</anchor>
      <arglist>(std::string &amp;s, const char *t=&quot; \t\n\r\f\v&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLensID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30a4a48f32ff30ebd5b2d3f287515fff</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf85a4e392dd45fe89e49906c674e8f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9faad19bdbf5d9570facac8bd15e2a6d</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyBoolInverseValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abf1f8bcb9afd33fe9cac0d921efae23f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03460091fe8b38f7aaa9706fdf415f05</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyLocalAFAreaPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4941ee5b6907a08ccf3ff5615356a0bd</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyDynamicRangeOptimizerMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9b6b551cc59cd673b13ad3b6fe9e247</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyPrioritySetupShutterRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e743cbfb656a46cacfd3d0ccd039eb0</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyQualityCs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a313428300476feea2fc74c472cd681c3</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4e274a07692451da226b7eff38fd4f55</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonySceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa70d5d0e1536a569e79a91b6d08b8ab6</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a025316796e05dab3e853021926bc7c1c</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyTeleconverterModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a849385c64f0449f89df16fde5b29b14f</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c1abc6e530322beb4d094d165406f51</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyZoneMatching</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad842adb2bee340da1b26aeddfd00d3f4</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printMinoltaSonyFlashExposureComp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f32fc9a16c34eb9c74da36778d88056</anchor>
      <arglist>(std::ostream &amp;, const Value &amp;, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>resolveLens0x32c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaa5fd90c3c705edec3ba9a37e179a06c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>resolveLens0x3ff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a60e762607239eb49c22ab63cf7333444</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>resolveLens0x8ff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3c408211b2d7d6305243dd4e15c6d3f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>resolveLens0x319</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9edeaa88a73e60590ddc31bbdb76b3d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>resolveLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e7026b31e0cd441d668c8ace4a92376</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3eee0c89f859901d960d1b80663804b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCombiTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac41bcaf675d55fd20f36d74ce3169743</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *metadata)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCameraTemperature</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63d5029447efc4a97d73f84e889c6692</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printFocalLength35</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a06a6de292b6724edbf13c105868fc726</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printPwColor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae88e8afbbc12d5e5463c42a78c756b79</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printValueMinus4</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a324b489ee95b935596fd93e43f816986</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>ifdTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab75bb1bee28538bcb081291e8f3b2396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>exifTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2cb95524a5d466ed5c78690d171d4c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>gpsTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81d1579cf2385261189c76984227959d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>mpfTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4370306ab95440e87cf2e37d6b1efb6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>iopTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5ee3671f4518639ff2bed7731d6c750c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>mnTagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad473f74392cf835fc7607e2e36736a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMakerIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a080ea8768c028af335952d166ef3e2e9</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExifIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8ecf0d2152798e13bf5c0b2edebcb78</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>taglist</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4c3a170a28ffa4de54e55435e7d95bd0</anchor>
      <arglist>(std::ostream &amp;os, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagList</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5173c535856e05763c719329f89c843c</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a741128c1e42e2dd283160b20c43b215f</anchor>
      <arglist>(uint16_t tag, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const TagInfo *</type>
      <name>tagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6989cdf7bf32837cc6bfc455d32b9428</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>IfdId</type>
      <name>groupId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8d40d5f0bced57d0a6564f7d5bfe9494</anchor>
      <arglist>(const std::string &amp;groupName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ifdName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6a14670f47e8b636f0d0e24913638a6f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>groupName</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02590bedabb5438d17b309363cc9ff2f</anchor>
      <arglist>(IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>tagNumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7dce1ef6847f8f14400f3e0ac0eea4ae</anchor>
      <arglist>(const std::string &amp;tagName, IfdId ifdId)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a197db52942bec0a175c1e572e1d05d2a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagBitmask</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7e02f9e2665455c550f61b47fea4e68d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printTagVocabulary</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9731f9c21cc69df5baa073a64e31d45b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>TypeId</type>
      <name>toTypeId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac248be2a2f3a3d1218625a2d2e6dd40a</anchor>
      <arglist>(TiffType tiffType, uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffType</type>
      <name>toTiffType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8d23237963473f87eebe4bb10a1d41d</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpTagLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad5237bdffeaa52ed8d7e5d681f4f8e95</anchor>
      <arglist>(TiffComponent const  *lhs, TiffComponent const  *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cmpGroupLt</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8d45e233a8bd33cc24b9db3f110d5d94</anchor>
      <arglist>(TiffComponent const  *lhs, TiffComponent const  *rhs)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3b2ab5a4255ef9e7c305d187bbab1cdc</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffMnEntry</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a55b0ce402a9ce6d6d75103d24e42b551</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffBinaryElement</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae81cc7fd7a8d3d2489e1ec9ac9d191a8</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffDirectory</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4681c37188d1b0b925e12e0fc754b48c</anchor>
      <arglist>(uint16_t tag, IfdId)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffSubIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a58490de7555c7cad69c6542e7582d1de</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffBinaryArray0</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3fc805142e8aad07f4d2644556628b85</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffBinaryArray1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab04f57794babc088210518c9063f2da3</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffBinaryArray2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab245af191d778ea317a67ca07eb7a148</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffThumbData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac0a9594f0549b75dd276ec3b3c3ef683</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffThumbSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1786c0665aa49e7c22df63ff889ace71</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffImageData</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6dec79e7a5ba5b745deb9219afd70871</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>TiffComponent::UniquePtr</type>
      <name>newTiffImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeffc66a7852e5d9a88a7b86b1f1e6eb0</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTiffImageTag</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada054fe3aa5471a1c547503754778613</anchor>
      <arglist>(uint16_t tag, IfdId group)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac72e915f3de1c90489744aaace1eddb7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printBitmask</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a66b6955e1440a0c72a9a0b20b750eb02</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fnumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7de99c06937d5d362fe7a23c7eb466ee</anchor>
      <arglist>(float apertureValue)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22702f724f37509d0f690eb1c55a708b</anchor>
      <arglist>(float shutterSpeedValue)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af0262ce29f58bb6ef73a72334499dbce</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aac98c672ae0e3f36eee77824cba2051b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDegrees</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1549243d106072fc6f8af62d0a4b37be</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printUcs2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a2a3db205807282b11a0b735737ca4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a480d5b006044c9d2558c189b33bca4ba</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0000</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a85af83520247babc349336ef2585ebe7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0005</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f813b3c092bd23119fcc09468577b4a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0006</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e8b717cdf9654528cbf302766568edf</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af93755b9a64d16971d1361145b5d22a3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0009</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2841f6212b7438cee4ce47b41fead3a7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b944bd62989bad256f800c1a997c412</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30c9cbeea92ecb53a15a1e73173e6a84</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0019</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46573df98727246f120be51f1fd5615a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x001e</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aea2db9942e632eb8e8ef4a7322040a97</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0112</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f90b4bd2b255db7c26f4a7106be7ca2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0213</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72e024d188015a0bc3c6d3dbf349402f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8298</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9503966b91423d0bb6a1d7b7fd462b24</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a8dff2b93a9178e66b69ace34519acb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829d</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3cfcd55a41b3c4c7fc0cfa000d6aede8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8822</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae63349b8be43ad15b9c565cbfc03bd3a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8827</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1a671418b32e2d6c6a17f13f8572dc4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9101</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a832a7340403cbc1edb10ed7e28281784</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9201</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a587d0088ba36a9821fef0b5f43961f7a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9202</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13d42c7c19808774dcc797e07948b8ef</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9204</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abc26de089a85c0fff7b0f93c0a8c91b6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9206</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03b7d5be0ced8186b0485bab3c2ea8e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9207</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5f36366077efd4e5b4075ed4408016e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9208</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbfba091a165f12b56916b9e86e7fb18</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x920a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a740f086758e563dada879bdbd170e68f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa001</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f81c67c695aeb2b566a23401d35b03f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa217</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ddba10cc3f5d31bdb2a9925ae4365e3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa300</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f87440df2e6da3f1d443519ce8f52ad</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa301</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af6a9eb4158c2c4a502c3ec2499b754e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa401</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75be3a1b9d634e16d8cc0f0f684e2563</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa402</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a860b0d1a851f3f5e0d6d4876419d74b2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa403</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4cc305ada96f988fe2c40bdd76e2b48c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa404</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a899fcd1bb10809d69227ee92aa99757a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa405</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02abdb4141bfb8f1081d82b965ad7df9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa406</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac3c504cc957db0023b795b9507144655</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa407</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a036f440ab36f7d70aef356d9df499ff6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa409</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2290911707bdbbd1ab46264ace0733d6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa40c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a33bd654d069342ac6e5deeba6296cfa2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printGPSDirRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f307649b7068ffb93015ad0632dd2b8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printNormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6d4ba6c9d1b153f58e7fbd76c14c559a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63d73c7d07334a6cd9ed8ad196e6c3f1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a807979bcb0b8df58903e77d6dcdcec7f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpDate</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac068f1a78b0bc4dbe6fe70d05a4aa7e2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a51e74d7d5bae242a8c3439d94c479db2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonModelId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae1a02a24e893bc1073613b7c73c14289</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonSerialNumberFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92dec2cb8427b496aedfb92e340880ed</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonSuperMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abea50986152d38b699d34a94dd342e1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonPictureStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ace405dccb5bdce9269819c935612158d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonSiWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a155da2f4dd8feda36c2f49df85c529a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6b84252ba7235f5bc98f4155f8a3d764</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6162573882cef31af1c459ee614965a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b962c7f92240f50c9b27039820367dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a53d5b3674c46f7d63100f2d126d14764</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade5c66cf906014e077cf27dde3cfbe65</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsDriveMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac17b309ddef8285683fbef1663554370</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9a8b7a055c21614a84d4b7defb628c81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsRecordMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9a28f46eedae6bbefcba8e568bcae4c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab11c8fd9229101f0addf0ad53025c3d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsEasyMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1ffa8ac950a4056b1d7df9d93a5bf7d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsDigitalZoom</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4ce1a3f68c86b0ea1f15630102ac8275</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsLnh</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2a9f9fdced75a1297e475b7b93fe9d2e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsISOSpeed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46274d49d7fa1ab3272a2b0b7cfd7a5a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a128c9184e2d00f6096f99c8a6b1ad5ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsFocusType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b120ac9fa403588c8e2753927b9f200</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsAfPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8ec26680fd7461eb585bee089e7343f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a86dc05ad5a621f72cbcae8a6970f2e67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9838ceb3a9b8b635d8d94834dd0ded01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsFlashActivity</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1f9525acacd6ae2d73e94dcb4f2c53f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>canonCsFlashDetails</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a94fdb77f127bb017e2b054fb378a1aab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsFocusContinuous</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6691b611adab7ecb45ef7877b42af661</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsAESetting</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b16bdfa4591f925b0942bf7d6a875cc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad6d1bc61f9936cbbf3e8a91ba64124fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsSpotMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a17893cb619ebe0cd2e8c73f690242e98</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsPhotoEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aceebbd1b46caef9c565e4263ac715099</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr EXV_UNUSED TagDetails</type>
      <name>canonCsManualFlashOutput</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abf1c7d32fd02cc45e4b5ec84de797051</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonCsSRAWQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aace0ea1f35160fe7afc67f32618cae00</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>canonSiAFPointUsed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae5cb9ab1664e6e4a5088d373bf908e41</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonSiFlashBias</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81387fa71d8d4e746a00308bdb640472</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonPaDirection</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a65d21ceac56981e94e83a5c90d39b487</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>canonPiAFPointsUsed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3d1d754012ab3427832ec42c9a8df6f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>canonPiAFPointsUsed20D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af73d061374af9f3848c15fc9d316c98b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonBracketMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22977f632bf7c12e6434dd52a229e31d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonRawJpgSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a67f80052f58b8f64aae53269bbf2673b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a25f86a3db9f59f7d3b6af40cbd5edc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonWBBracketMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f3fa9af0aa84a5fbe35d1d5d0e6a275</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonFilterEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8bcf25d1a7df226b0338057f495cf85b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonToningEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a97ea7c71116a5b8e0f96d6875709964a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonRFLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2f568335e7039d734f3323d1ed044a1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonToneCurve</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa5243dc1e58e6bb2f0a134f3d4a063a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonSharpnessFrequency</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75bdc3e69a2acacb92121c3a5ab719f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>canonTimeZoneCity</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c6ded1c98e8b6dbea10f1e05b8d5264</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioRecordingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a531a0f74a34f95698ff437d28dcb1a44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4766ec8ee73cdfb61256cf4136190a28</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acf0869d917e1452891b9db9ec1c5d99b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d287c2752076d00a0b7baed0711561b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioFlashIntensity</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aefc3c9892c09b42ad394ff2c0111617e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa463a2b0211a89e68a332f521c75b25f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioDigitalZoom</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3fa75b65b31fa90bd1a1ccda33ced96a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abbc9f9de2e678c3e60d8617d45b200c2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab8abdebbaaf2c612ed0b16124d70f69e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56f586315bb583e1b047e01f772eb971</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioEnhancement</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5340b60db88e1bc334e8fa43ec48d801</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioColorFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7e06647c01c0361e48a67ad89747be77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioFlashIntensity2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a14cfc2687d14ba7f54e9a2dba3d4d15e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casioCCDSensitivity</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab94b42bb8bf689c892fc6180fcb02ddc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2QualityMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a97e7a46e256403898b6407c037dbfa5d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2ImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6ebfc520debb17136fe7c04a8a062bc4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2FocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8a4a60d11398ee6c4b8d32ea3be4e414</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2IsoSpeed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a443983214ba615b030aad79dc31aa164</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2WhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab0422809fb5627ea12b59269a31361b6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2Saturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3ae3a1e4283e380435de92b9da6bff32</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2Contrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7895801667ba33dc0b490fa63da8e636</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2Sharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7ad9110a552e765a22befd754d051ce8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2WhiteBalance2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8e7a7bfaa5fea38c2367eb80ae8d2dc5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2ReleaseMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad0262724c4cc00c3552569e3867bb7ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2Quality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a840dd0cc27b9c9193288aeaf8b5ac024</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2FocusMode2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6755b4778253356da967c8fbf21022f6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2AutoISO</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae9fa178e1c40b837a9bc5061c3573453</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2AFMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af7ba8156c63f664dc9c039b8080169ac</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2ColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adadb56257e1b0d34c283bd24a181cec0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2Enhancement</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acb16070b9f3f89f8a8222c31776048cd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2ColorFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f2676bb67affbb9c89a35d761ace369</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2ArtMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a79b41b67313de74bff6218c7990c2a7b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2LightingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a05f64cd5cbc91bc0691483d96e49f8ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2PortraitRefiner</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adb581f893e8bb67f3f183484cf442c51</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2SpecialEffectSetting</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a078a9fbd4fb23d6ff2422aa27c40f84d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2DriveMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a73b2782f2f4b8f1cd682f99fc9fd6e0e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>casio2VideoQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4d54f07593c937663687884e533e79e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aec33cadda3040224f30da3ba1af336d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af95d469591eda9571d5e6f5fd4c5b52e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa6f4c739ab085ca6a83891e38dc9e714</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiColor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aabf3a2eaba9ad487b5de283aed40116e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a875ccea76b944f9e46ec6b939d583f5a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a14bffe85bbae65ee54d2249fed02a2c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aacd7a3a08e2e64e04e2891a01ec8c72c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92eaa7fd212d1f1a4443e351f3d2aa9c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiSHTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b7818397032863ec89c9ca9277bf10f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiContinuous</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4173b0f58536eca2ca026f72104c022a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiFinePixColor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3c75702167ddbdfef9b48328a1cfdca7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiDynamicRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9da0d091708e55835c433c9ef3eb422</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiFilmMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a32fd864a507e26a58c1efa899ef09069</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiDynamicRangeSetting</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a662bf55932c99884be309edb26c5e7e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiCropMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7616bf6df30172338156481e6c3bc90c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiDRangePriority</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af9c6517f5f680f52a5cfd62030a76da7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiDRangePriorityAuto</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1e1bcbba6bee10a5a859d9c9497b5625</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>fujiDRangePriorityFixed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1c98f6bb4cdb575da7c7035b36966090</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr NikonArrayIdx</type>
      <name>nikonArrayIdx</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9127e88f03eec4c8526f7f5ba7d04d3e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a19442878bd01816977d1b25733973ad5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr EXV_UNUSED TagDetails</type>
      <name>minoltaImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6940beeb849907ed66087372afb9e29f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a835a7b108e1afcf0baf1836e7ca7adfb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaExposureModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aee9d2b243d31c2e1912054cde8f60631</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFlashModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae4cb470aee4970f88067fc7cf8967827</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aedbd3517523fa287f35cb6b34a07f448</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageSizeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6522bb68456d578bbf7a0f017b1109fa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageQualityStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a312a5beb232818f16a36e5debdde8b63</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaDriveModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a51e1db6a518061aec007a293f273e361</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaMeteringModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adcf6682465a4fddad01ad2bf00ecbf27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaDigitalZoomStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abde7f5a6410fabc54482b8df48af9d99</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaBracketStepStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a531c9213f3b095eb7b4b61da6ce4602c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr EXV_UNUSED TagDetails</type>
      <name>minoltaAFPointsStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afaa95ed612cfc6b18fd09b35cc8a9806</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFlashFired</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9500ece992403c745ab94d37669e6393</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSharpnessStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9fad992e5d629c2447a1290817f30202</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSubjectProgramStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a327f2059d8ed1ec6169479a1e96ac317</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaISOSettingStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a36d710f9bf14b5a4af7539bd429c3247</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaModelStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4688727d57bfcc8e7daaad66242ffcfd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaIntervalModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a137f0a02d91ddb8dbe42fb68866ac1e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFolderNameStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e1199faf0055ac90ba66cfa26ed11d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaColorModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a55432ec4a52a44d4fabed9b32a6fc58a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaWideFocusZoneStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a384602693b5fe70822e5a3b1e0fc8456</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFocusModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8f6dd94c040138da1972aa1c049bc4dd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFocusAreaStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6583d71117634c00fbd372cd72c31fd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaDECPositionStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a10ab948d65af1b3dfb0ce01085ba98a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaColorProfileStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aba3a07b2a9505b316190d4106d137c25</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaDataImprintStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3ccce2b8ad23bd61ee13747b04a8d3c4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFlashMeteringStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9452b4937d1fdb6da7d3cb662a9baeb9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaExposureMode7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a941c03d54b9d8d86e482bb2f6bcbdbd6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageSize7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abfb4ed313ed8a671663e4003694f82fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageQuality7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a10b16fde519dabe89dd4eca45703d4c8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaWhiteBalance7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a76ef924792e083ff8207bd1a2f7377e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFocusMode7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a858765d5562b71ded8e93289f07852cc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaAFPoints7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4bc08602fa587cc07744c1edc2aae577</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaISOSetting7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a404a8fd66564efe012e9d55c3c1d2fc4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaColorSpace7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9bc66dd88572175facfeaf86ac880f80</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaRotation7D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a34701acf376b5172fa123e29be278b50</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaExposureMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0e7acd93197e84a45705aa383cdea0ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageSize5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6ccd25da6717920940523e14752ebc6a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaImageQuality5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a842587435d6f4d7ce2cb9ef0e3a52256</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaWhiteBalance5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a410b1c04790962ac4636fd8bc16a832f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaMeteringMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5c33c19daa7e00fb945b0b0f06499d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaISOSetting5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b7c5b29c804de183568c9136a1be733</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaColorSpace5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a82332530de34501fae388604cbfe36ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaRotation5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8360ab4cf62212b4154cb093fb6d7f4b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFocusPosition5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a081f892d5f486a2874d0590da8eaee87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaFocusArea5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aed3e52385f0ad9acc13f76b0fdb3b294</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaAFMode5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0d6c728cc121e8edd27dbd6f4faf8fa0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaPictureFinish5D</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac246db38ec46a9c99b64e39b2f1da563</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyDriveMode2A100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab4c103d1806f72ebe5ddc60f313a6069</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFocusModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adf3d35a74cfe9367cb11783f2042df44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFlashModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3453b9b95e0909ed214182c18fd5d789</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMeteringModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abffbd24fb497b2670a23f3909d5f1b9f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyZoneMatchingModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad38b1d00a7b25c2b53618e9afe445b39</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyColorSpaceA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6a291465459cb1dff383dd0e0d4cc5f3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyDriveModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1365fb9255b7e3d2bbaae812017693f9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonySelfTimerTimeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aed9e3cae71f37f72a8ce8925570e2804</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyContinuousBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aad31e02a9d89064f31b05ee429df1d77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonySingleFrameBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad58d2a935f5b9e8d534dd57fc37b10eb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyWhiteBalanceBracketingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac70590954ff8be1f7186b34991ae4732</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyWhiteBalanceSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8c9bf1c5ba015a08e6e44900c382cee8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyPresetWhiteBalanceA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acdf95d599426c594b5807ca793c17d78</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyColorTemperatureSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b9fb2b0cd91119f8947e1f3ac69c0c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyCustomWBSettingA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade775cc3ca7448bb64a666af062d3255</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyCustomWBErrorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab06045a9eaebe995fd6220e376b26b3e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyImageSizeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a674d8b5b4d5e740362c6c8a54cb960b0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyInstantPlaybackSetupA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aec27e10d67654b630b9bfe45bd662a4c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFlashDefaultA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae4ec916ee3a81532b555d6887596c321</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAutoBracketOrderA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2bb5b427935bf97b013a68389e76c957</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFocusHoldButtonA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a67ab6fe5cc611d2df74a202a93d388bf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAELButtonA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab59de77a9194a9478b0dbc64ecfec293</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyControlDialSetA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8838cd2fdd8d620a84b164a4bcc098c7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureCompensationModeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad1d2a7313a28d73ad9789fd28dc605e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAFAreaIlluminationA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92d7f59d5ab3200c1f142cb5ad6fca62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMonitorDisplayOffA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3bd092533c14bbe4c0625566b43786d6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyRecordDisplayA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a71cd44b98e47f648c07538709143334e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyPlayDisplayA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7fbbfca2984b7c1dce687a2d4531f4c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMeteringOffScaleIndicatorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1bcb9b461991844ae9d3fd01d343dc4e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureIndicatorA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad0228a6fa3cc7e0482908408cc7b2bb4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFocusModeSwitchA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad8b51bb31047f35e90a23b066edf0abf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFlashTypeA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab9435b971412455358d52d2d428e74b1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyBatteryLevelA100</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d38595ccdead892d2961e5ab9895939</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>TagDetails const</type>
      <name>minoltaSonyLensID</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a634ee06b9381d3fc4d917f5cb493b423</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const LensIdFct</type>
      <name>lensIdFct</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afd378d0a4f17e8533bfd8ad80a6e09ba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae21b97814e15f36b90e5265892654701</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyBoolFunction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abd750e30e779b810ab00a689fc3cf977</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyBoolInverseFunction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a66a4e205dca7c9dad6c939b9da8c013e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abffa40b947a083134a71ea05850665ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyLocalAFAreaPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7279a17e04107021a237da55aedc9610</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyDynamicRangeOptimizerMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a18aa2c4a927de74dfd87e4ef2cdb2ccc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyPrioritySetupShutterRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a920fc92e58137c1de521b85f69ed87b3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyQualityCs</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaf0d729a56ed734e9cb679d7ca292ad7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1c5d3100bc33dc9ac6794f3fa199e632</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonySceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abc4f8ba8c7eba7c4b8c90d0616382e36</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyImageQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acd48618b4be33d49126b8ad5749cff2d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyTeleconverterModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b1ffa9c815d40a3b444d0bdcb3af894</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyWhiteBalanceStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a39dcf5c934dd6528594d457384ba343b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>minoltaSonyZoneMatching</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5cfcac412ef9dbb2f6934662f7618cbf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a815dbb7667487a75c21e92ce7a0429d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonOlnh</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a96b5726a804251d370275dc709a69cd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonActiveDLighning</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac454faed1be4b894ebbc4d86d5db05c9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const char *</type>
      <name>nikonFocusarea</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2026d3dfc7d5f8085d1d4837ec2d4de</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const char *</type>
      <name>nikonFocuspoints</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22a550d0d61c2dcad7a94af58668dc89</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonShutterModes</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2e79fa6c6f8d434531d899a9167a8274</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashComp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac4910c1c02f8553789475e41d41f083f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4149165a9bc62d63383a39d9fe31b3cf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac5a7cabfd4ac1c7b20906015535c4e92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>nikonShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a78f4e986d31bd9f73e807b746029be03</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>nikonShootingModeD70</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3b7afda0a4995fd45dd4fb3088f800c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAutoBracketRelease</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b7633a78b4f85891c811b17061603e3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonNefCompression</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7336c1306aae0443d5edd9a1849b8c86</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonRetouchHistory</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aff1bd9f71d9ee9fb24c59c7c673c556d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonHighISONoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1c2f0efee77d8aaf51e37c0372c5c9d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikon2Quality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a05d29558a3f985da4132e4cb5f6379ad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikon2ColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46633327e421b57eca3e70b0ed26a8ed</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikon2ImageAdjustment</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac68e0a9b60db64e1419e1eedfdc26945</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikon2IsoSpeed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20c8010c4aea233096452c6a4084757e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikon2WhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade1cca068b4b2d8fcdf1c6d8108f4ba3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonYesNo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3b04177bddd9f106c6a73d6dd6a8d6f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonDateDisplayFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56aa295bc4857b6d69ac1dbadef004ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonOnOff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae0d99000b3e6fb1b197a66657812789c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAdjust</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a177f59c21e9ac8265435e47f6c07aa83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFilterEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa549747c3d70a28c4b959a8148807d42</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonToningEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a85a6cbd2247dc3b7a07e91f16148b5d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>aftOnOff</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75128321006f2fb9b720bcb8ebe09a42</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonIsoExpansion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a81cc4f3b3e893ae35f3ed63eda8edbe9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAfAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae4f87d981e6da056ee473d6b1a9941a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAfPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a18ebe8046b245fe88c2818d56b40e4fa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>nikonAfPointsInFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a58736930a5a96ad43e958824ca7cb1e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonPhaseDetectAF</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab1df7809e137db2cc7ed197b9dd14157</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonMultiExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20759773ca8500941ae8299c62d823fa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9ba2bbbcced8464237c97a6a093566ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashFirmware</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a765c6a570bb25fb37b8357f805bca413</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashGNDistance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5bb7a863674bbddfae91b393c007d069</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashControlMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a44943be736f015ab16659b04065ad119</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonExternalFlashFlags</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0d8f30e24db89664f199f595f36fa223</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonFlashColorFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa0bded023cc841f86aff148fe36223d0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAfFineTuneAdj1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8690399f36ef727bba1222978a458c6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonAfFineTuneAdj2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a255e9858087d255ea23638d5852b9124</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonOffOn2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac9816d3a38f358c6d8f20330e8f1be6a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>nikonOffOn3</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad99e07dfd1507c358f55df11da72bf61</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6b6ae160affd32d67ab3b6738b192ac3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusNoYes</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a39a6f6cf527eef30a8dadeb2870b6969</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1157d7811ba4e4f83ef9eb171bae5ce2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a676bfbf3103a962a2679ce5c128f424a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusOneTouchWb</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4600182ec6d5e8b6ea2dee5c9924b0dd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusSceneMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1a22642fa1603943e72f50302e55f3e5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFlashDevice</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afd352db5ade4cce501398c2d2d8c002a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFocusRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6d9a0fad2caab0c03de1453073943b47</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a49a7436f6dae4fbe8ac9be539a8de319</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af4a8e5432d57faa749c9ec99b5dd191a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6e9bdac48414d999189c6cc9059a5f49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusCCDScanMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72b6838bb5ff110c0120a2c01961b5e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a25b12864293432a54b8c7f70eadbf592</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af594b6914c99e528f4cb9c2279b9319a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusMacroMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2a5aba42c825ff4608acbc28a0c2ce62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr EXV_UNUSED TagDetails</type>
      <name>olympusCsFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adc2a083ab69e9df3fd04484e759d1160</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFocusProcess</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3413eaf7e7761599b1901e462548aa0b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusAFSearch</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aab77f6f60a1eaf5c13c1d2989db28df7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>olympusFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a823f274bdee47e914716cbe3f6bffd45</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFlashRemoteControl</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac550059a457febc309b70625c5c7a52c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFlashControlMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a95f23e44ac186554900eb1c270ec0b0d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8aec7a3b692f1303314bb9cee0754f2f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusModifiedSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3e841fe9adc0142bfcee3a96f70c3ebd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afca63d2d509fe53c659fa4700d4d2ac4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>olympusNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a01799304c0e6831127bd441528dca8ef</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2455d1b548e48c35b6a99470bafe0e30</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusPictureModeBWFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a318d5ac7fb4fc646da6858c4c7159199</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusPictureModeTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac8a087d4e8a89ed56a52e06cb17db534</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusCsQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab4a8fa5d979bd42fd72af099cd9d83fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusImageStabilization</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a61762e349d8985f0e315f9cdbffbb6e3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusEqFlashType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a541e0ddc0aac6eb6f2c731510821255a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusEqFlashModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af48165f2757cea688e5e99db11fdf0a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRdColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a86fa6a934ddcbaf010591794e207967e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRdEngine</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a48473dcb689f2ea6e587eaca54d98e5a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRdEditStatus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4069ae174a0950bfaac0f0221a3e1cbd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetailsBitmask</type>
      <name>olympusRdSettings</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a24b6734940c5be03cad7ca56d88cba6d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2WhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30e7509b43ca3824c97ee6d4fbde9e82</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2ColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1f23c305b62d0eb565226ee9ecf49cbd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2Engine</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afc7174d5e9f85f77ca3b9b468170ab16</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2PictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af6a782d3d5b145ca7297e648e8c88c04</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2PM_BWFilter</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2fddaeb41357f75bafc3e9a8c1e52543</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRd2PMPictureTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af8610eb95343254d408bca3550e41b7a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusIpMultipleExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c566c4de057536b407db2bf6f558e1e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusIpAspectRatio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a21d7bef0e2ea17d873bace3c4898be07</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusFiExternalFlashBounce</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a8c107dc72dd09aa1e2c64d50f8ffb0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>olympusRiLightSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6c31da73126ae16fae149d59c63bd58c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a269742a2733652486669be3b7546f07b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a452bb7c5cf0481457c6ef7c2a7c20a62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1e9555cecc8fb1deb0704b86c6a09317</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicImageStabilizer</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72d83fa7680ce9caf137df80a626e9e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicMacro</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab2d62068105091aabab3919ad4871cb7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83512347e4e71111c1123513f87eb5bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicAudio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a464fdc76cbddf36bbef4f6dc543d2f0c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicColorEffect</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a89dba3ac66d365c807ce0872ff7eff08</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicBurstMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6af8e0852f1ca8ea342afb37b539f1b6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4b5c216e076adcedbff0647a858dc49b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a962f7f967bc04f59b3db8b2e341f12</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicSelfTimer</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a14c395c355e30f5b646f85807d4f7b1b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicRotation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2236c1a743473e05127268da726ef071</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicAFAssistLamp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad8e813d2bab46d22985060f1de0599f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicColorMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a760fb88321dbd125bb0700232b05e06b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicOpticalZoomMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad9ad8bc3288328d8ac1dc777c3868ab3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicConversionLens</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ade6f299c1a833399706e0c8fc9da63dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicWorldTimeLocation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a023c5c30e6a423053c4d6cbecea64d7b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicTextStamp</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af66e1f44f8008cee357191dedea25fa3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicFilmMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac91bdd8970f28da1585348b6af2406fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicBracketSettings</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13cf335cbb9f97b7457b90ff5a83676b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicFlashCurtain</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aeb66d3c96153ec7fe9ed5ad9da3e5b29</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicLongShutterNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a167c9169999951fcaec09dc766153e6a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicIntelligentExposure</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab1b6cf9a85d82f80b576a42d30a69372</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicFlashWarning</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa28002bb729021d940c25a96b90f27d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicIntelligentResolution</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0598932cd567476697600dfdb56121cd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicIntelligentDRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2724c20b1de5e9a8452230b6bd058fc4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicClearRetouch</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e36f17cef738615ad28421b4875337d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicPhotoStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab844ac0aab6d803153eaf138009055fe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicShadingCompensation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8fd068d36b493550f482a69f608ea10f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicCameraOrientation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56529e766adbf936f3da9e3c319f234c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicSweepPanoramaDirection</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a717125ba090710689a3b168eccdcc73d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicTimerRecording</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5332f09edbc1673886266b18ed1a532b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicHDR</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a228bb89c3bb95c8e8c8614fd8b9e6f8b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicShutterType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a497651a840b51ae22a0184ed2fd5d87e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicTouchAE</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63df21c2d92f4c06903ab48b32d47a9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>panasonicFlashFired</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a37a0c5c1d7004323ac4230b3eff045d3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxShootingMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2b89c29d96042ea805e04516f8836ff2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxModel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8ccd7db47fc4c889a8215a935757ec66</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afdd270df439c8d223cb2e407f633e03f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab738ebae2675e457d65c664cf8ac1aad</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxFlash</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abb4b1f2d532c0fbabbbabb96614db4cc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1f24d2ef89209e5815731e55252697bb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxAFPoint</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af3e7a88dc2e337c101fc8606cbf9365a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxAFPointFocus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9499b2092639cf0d522ff422d22fb1c8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxISO</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f6f4ef174a34030655c371ef6da5f2d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxOffOn</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a267147f5642cdd79d640539094216ce7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxYesNo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae05f7c76b8e4270904adb8f50e361580</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72b28739cc79b707f4fd23c1e06c1401</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5139dcaaf55b99cf83b2cd733039254c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxWhiteBalanceMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a01963e19ebb55521522a11fd8724b276</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a45e570cbbed22b496f56f6e7e7ac6700</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxContrast</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af6e074269194823c82c50c8d30d0eca1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxSharpness</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a94d44342f589536c2741791e25210f20</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxLocation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0643c27803f3932fe9f9e3756e33200b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxCities</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8065aae34032112b1f2da766ecaa316e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxImageProcessing</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac6bc0d75723ae0796d86b1fd244b3db2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxPictureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a26dbab38cde4777df4212424ccd0c888</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxDriveMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a687968725360af9950d7850755a1c41c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0795b3847a9aa403d68b7a261198e5aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxLensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad2f2996b07f2a50b2c22eb90344549e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxImageTone</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac70b2e45c3c24e4f2dec163fbfc474d8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxDynamicRangeExpansion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a320a1a3d9513de5b133285c1bcea77c8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>pentaxHighISONoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a961b5aad292c1437db947273f175f25d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>samsung2LensType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa8ed783732b798c058950b7795243d4b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>samsung2ColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad63fac83c9eea3795ef8ab1988cb4c70</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>samsung2SmartRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aefaeb13f7483704f76bb52d780482bd5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>samsungPwMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad8d35e887b6fc4eb2b40c9fb468650ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyHDRMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acd3671ecff3baf7ecc1b6cbff6fb9551</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyModelId</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1cbb861c8b3d9a473c0d7ae9938661e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>print0xb025</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad9878faca505c211085772f5785bb7a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6418f9a7e87e77cade118c758a7ea350</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyJPEGQuality</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acfd740a909aaa58b61f3b9ae03987570</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAntiBlur</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9a0cc13090161a7d59ad048c0ec0f15e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>print0xb04f</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d35333ba79c124d5b41024f63af0d67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyIntelligentAuto</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a264857c44553caffa9b9bd27799919a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e069305d040c617fc56a9f992daa339</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad7d3bd3f9beef2232760770944bb06c0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAFMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46e4a2b6491f4debd879d850a8d72362</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAFIlluminator</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a47ae8d1ae6be53b73da7076c33274eba</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMacroMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aae31dba4011f6bfaea98a8c4743befc9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFlashLevel</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1e78546e26b3b4bb6a417259deaadadb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyReleaseMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af401b5d70c260ece8136a3203eeced11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyReleaseMode2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5a6616985ccbad1888804a41428fed36</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonySequenceNumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af1b818e97f88f1a1422dd67c75236838</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyLongExposureNoiseReduction</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa80769900468079e1625c4aebd499877</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyDriveModeStd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9fa4a556515e4a292099d6889386e6bf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyCSFocusMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3f0883926be10efb58ffcea22e3dbdcb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a230e93e486cfff2b48a0ddb87aa0f13c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyCreativeStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abd60ca5b93fb30f0d8561d854eb0201e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyFlashMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a28c0b649450a313fa4be807cb2d6d7c9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAFIlluminatorCS</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a49fa71e29c6db09d44ddf9927d054e05</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyImageStyle</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abce274b5c48c6f1fc9f618d2fb128327</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a01a77b732ca8c356ad4997a9b2aed7cb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyImageSize</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad4a671944a322f5625cbec2e7be8ff0f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyAspectRatio</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a437b6111306637442533e16c2a8ebe65</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureLevelIncrements</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1aac5ae869f3dbea59f41323d099cf22</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sony2FpAFAreaMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20540fdb493f9b0099de2bede86455d7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyExposureProgram3</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae77388fb8235b4154b5191b97b5feb96</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMisc3cSequenceLength1</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f981b766c25731b34270daa5f2e6267</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMisc3cSequenceLength2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72ebed493523d28d3b3d5a04f1849552</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>sonyMisc3cCameraOrientation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aff7dcfdefb2799a753fae53059a7a621</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr GroupInfo</type>
      <name>groupInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab459dafd1373c3ac44ccc00483fa0363</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a824f58285ac4af5542301d1f7bef4975</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifOrientation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1743d08a1e92dea1f40adf8a7372fa6e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifPlanarConfiguration</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6cee9cd680581c358f1d38b40d11dfb1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifPredictor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2aca50086fda884484084da50b0afb4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifInkSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0efd2beb7b661f1b4377906d926688aa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifNewSubfileType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f60055e49418bd5872bd6133791a204</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSubfileType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af214d4b19b1ae80321e8dfdd85b7ea46</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifCompression</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aca72a57fadcebc6ece72b105418dee84</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifPhotometricInterpretation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03b9f4ee2c71a6a31aafe9fa57e40f41</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifThresholding</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a09db06c67d359bc759ea89fc8ef4e162</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSampleFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a458b74ab3913300fafb396aa6d72c3a8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifIndexed</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a82435401424ce621ae64a4edc7722e9e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifJpegLosslessPredictor</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7309f1c1d29ee752858b66368835a68b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifLightSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa7216e018981b889b0e9cba6a37089be</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifFlash</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab0878177858ce7d23047763ec63886e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>tiffFocalPlaneResolutionUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ef0cea3097f0aeeca2c5ef4a5495709</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>tiffSensingMethod</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af58bf1915174e01f398e416240562f98</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngCfaLayout</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>added8c5cdb9d0a86307acfce8d1b2e87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngMakerNoteSafety</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a44de43718fd9997cbf3b52caf4b61b13</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngColorimetricReference</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8558d4f179cc50b914c40bc1d40a2ffd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngProfileEmbedPolicy</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5d0d047db505f6729480b229e988e0a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngPreviewColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5bcda11b024328e14e50552130fe72ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngProfileEncoding</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa7e4f30d3c32ae402c6f0bdca9baa1b5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngDefaultBlackRender</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3937ba0f47c4d7dec08493b879c8cf27</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngDepthFormat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af61be0b2964b2189476de77cc8462f2c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngDepthUnits</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3f82e2308cad76ee67658d9d7b2efa8e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>dngDepthMeasureType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acb825b7f55a81d389ef40e6180ef9ee5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagInfo</type>
      <name>ifdTagInfo</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a00018d0babf395fdde5bfd43ab30cc11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifCompositeImage</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a104aaa59e1dcb36b43da4e337b45e34d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSLatitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0127b2d901dc6dad2127df4fe3c35c44</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSLongitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a32555f2328d4457db27cd42f1f8c0c5b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSAltitudeRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a90fae4e0290633402ea522515b3f1cec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSStatus</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a56c3fe235fff214978187982ee943a43</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSMeasureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aaf552eecf1ae70de60d4d3e6acbb2490</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSSpeedRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3ba5a1e8f361b84c3168c2102b1b384f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSDirRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adb021fd06b5a4ec17a32a936abdd2aa9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSDestDistanceRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8feaaaa3d56899a07978f073e37dd6cb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGPSDifferential</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ad0a833f5abc1fe2790399bdcacf476ee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifYCbCrPositioning</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adfed5834e82a94b86046d3f1ebf411db</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifExposureProgram</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a88ff79b2621f24b00de661c0b88dd081</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifMeteringMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa3631c5ca1ec7bf81b259e1c2f9d7e5b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifColorSpace</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6299d84d0c92424c7d9369b82751cf4f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSensingMethod</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1a02753713f50cd7f0fd9f57633e7e16</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifFileSource</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a91f9df297e475605716bfc7584786e1c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSceneType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a26da841721fe7688156e2a371b4ccfa9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifCustomRendered</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a404ab5ca4f0b4a66baa03e19566704a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifExposureMode</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0123e312d92b6d5cc43d585c7a304c63</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifWhiteBalance</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4131fdb25f4e1ac382f5dfc886449a2d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSceneCaptureType</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a707a90af82e063f32bbb3924c807a3ac</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifGainControl</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a37d9fecc57be8aba9b05e66691ece4a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSaturation</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a52a7245a487c186918e5b2b1cf92a9ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifSubjectDistanceRange</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa4aa1faa08ec3cb8dc48b8eaf2843036</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr TagDetails</type>
      <name>exifNormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abae24243150aff048d51137d58c890dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab71efecbf99f9418820c73708a3cf62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttAsciiString</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9b5bde30ee6d5c70b7bb097fb9ec2964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9d20b7b8d431865c5bbb72ece0e82421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2074c61e7cda2b4dae148c2ab281eaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUnsignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a354900bea65845107454abb6775a32f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedByte</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a210fbda6987f7c2812751a85d9b9f298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttUndefined</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acffb015c64c008b6f123c06b1522286c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedShort</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e6bcae5c75296a29576af25dbad8c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9f8b97b43c3cbc2f3b23e2f7612d0d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttSignedRational</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af85d508a811442ccc864d5fa516c2c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a098b9822143ebe072f1efc9669dd8e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffDouble</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a38ee59526e75451a0eef5fa23afb11a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TiffType</type>
      <name>ttTiffIfd</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a59beb014bec68a9a262d80dbb35c0318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr CryptFct</type>
      <name>notEncrypted</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acf38b2485cc0ff1f2f1cdbdeb6a41b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonCsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac1240761a76755110b87ae691005b8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>canonCsDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af4d13ea2010bb7354c0c4194b4dc2fcc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonSiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9fcfbeb45f6c6c7d0af90a8a6bf2b5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonPaCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a54111ff5b504d4741edbfe8fd1549254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonCfCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa6d212e9dc9be02b47244b7fe5c3d59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonPiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adac44e488bf9165cca1e43f28e0f0ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonTiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a21804438c7cf2199024ff2ecfe6609ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonFiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7484371d9b9d42f8fb1c82b8ca098873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>canonFiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0b18388077144e0bb9c780e540485743</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>canonPrCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afcda46be2dcc5894a1ee72d861ac7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonVrCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af674fab11826654358f032d783d6a7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonVrDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a71bc15726f83c0b24c88a563cbd5ccf9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonPcCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5e58ee31c88c0bb67709cc2a86ac0f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonPcDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a330b23880f264b6dba6df26b34550606</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonWtCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab32c05fa10d115852a6efbcd3508d7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonWtDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a35aff935bf65148cc5ed0cf4a1bdfa24</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonIiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4b142385748724c89290c871498953c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonIiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a36d462bdc410a652874ef6f02672d0b0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonAfCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a442bbd548a6b4261a79eb2766f8a61a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonAfDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a304d687d86d8b51ee044bd7ac182521e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonAf21Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac3710fdd0eb3aee4dbe20e01d88d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonAf21Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a49bdc5bd49cbb85744d9727e48a41b0a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonAf22Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8d2a290abfa49ef3caf7b92285356b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonAf22Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe674a6a2f43f4d9571b28abb3835690</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>nikonAf2Set</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a64e82cc1639521046af71c1ee894bd0b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonAFTCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afb1be7dcc680dfbdfeae7f8a38c6c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonAFTDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a780aa256d61903b0d3ec89f62895290b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonFiCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3ae62d15ffa9471ed640abc574059062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonFiDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5fe961622994e9f6fa5da3456c4324c2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonMeCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4d39aa03ef1192f47addf82a204a9271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonMeDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac3fcd7ba8cef6ec27abe697e66cae625</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonFl1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6238b17238674eca3e97949fda49fb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonFl1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1b209ecc3e8f73fab89734a83067153d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonFl2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a424d3e42bdf00b655a15d5daa33d6e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonFl2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adb66e3cd526e6917c54a63af5582a907</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonFl3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2c2ec1118efa5696bd9f9ff6a61d4e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonFl3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a94197c9f755663f79282cc292dbdb0a0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>nikonFlSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a923b829f4061f3b968b27dbcb936c2c8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa2e20dcfae5f3a8b7c27009676b1f170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonSi1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8cd51144b7ae041d484271905b0ffb38</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ada7468ca53069c55af37272111fb6b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonSi2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2e0d20980a024adc140ce91d5e61a46e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83d4768f871d059f4d8a268c8abe6c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonSi3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9116798b6cb457d13009cdcbfd05544b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi4Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae1dec5b5cc5c1c7e6a795f438ed27bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonSi4Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a728d9d6bfdd6e01e792e5a256c04d136</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi5Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af3c2d6e892cd669388f8f6b6117d62dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonSi5Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4bd931323f64646c8e068c6110a4e6cb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonSi6Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afe1f7f2fd1bacb561034ba324b672169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>nikonSiSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a41e29746c3c3dde8186e63b2e6c0adee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonLd1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a255a03e753dcd23bcc2d087d9ca28833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonLd2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae5eeb71e4e4a1e9234aed513d32da5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonLd3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a3eba4fd1e426ad4adb885898043a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonLd4Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af4735052cec9444cff2d9d60fdc03b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonLdDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2b24d93356214ca232584eeea167efe3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonLd4Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>acbbd10d791c104187ca7967716ce93b5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>nikonLdSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a83e610458be7b1eb54baf6c29de550c9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb1Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a20bc9227fe095fb7f3f20e0dbb64dbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ab7779fdbba04336ea75b6c0d32bcc55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb2aCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac97bfced758e6f5cfe75c4c27c8ec85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb2bCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a24a791db5cd1c9860dc9c17be20e558a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb3Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2af0ded902651085164cd4ea18e6f72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>nikonCb4Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1539597190de01aa14fc86ce93528405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb1Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a92e7ed9c45f36347ac5a6515f46b8a9b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6b87bc20ac5a196099fe3a6e910f40d1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb2aDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3ad5d00ffca8540971028f0181624a41</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb2bDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a091c61c63aff78517ceedd3a199b4ec2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb3Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8a98c627e7c664470c80aa0ec6fc2dcf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>nikonCb4Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a8169fba9e36789e941cca05e72444b11</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>nikonCbSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac562c83b7cb414b63c9fb1f5da36cbaa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>minoCsoCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aa6e6a88009b2f2cb27212078e350a5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>minoCsnCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afb3ae3d83a133960a60a2cc0454f8432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>minoCs7Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6797d8267970cc917f73aa4d90d4b339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>minoCs7Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0acbf9b07550cfc31bffb779df2dafe3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>minoCs5Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a51adc77d5f9fc4c6fb5a3f7a865b4a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>minoCs5Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac50acfe39ed6a223f23b647f77b9a189</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1CsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a410069cbe189948e99aa2be5a358dac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1Cs2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f1692c513abad9c7ea49c60cf07404b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sony2FpSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af41f81069f06fc68736289e5bee20279</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sonyMisc2bSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aea0788493ecc63e36151227129f2724e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sonyMisc3cSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7d7ec060fe1e402307b250cdc56195b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sony2010eSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a859baa59446bb08e2820a5e2c90ab472</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>sonyCsDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2fbdfd74d9d15923cc2700c50e794864</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony2CsCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af760d5d624254951f56aa415afa75ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony2Cs2Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aab2c7114139f8448c8727a3a45205ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>sonyCs2Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a18fc1800a687891ae15a0dec84a557f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sony1CsSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aab8f56dfe2a80ded71ebef02393efbd8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArraySet</type>
      <name>sony2CsSet</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac449169ffccdec1a0e6d067dff25d90a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1MCsoCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a85706efd1a04018b18e2baec1fd2059f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1MCsnCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>afbdbadcc2b7cf6eda5fb96296c93c39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1MCs7Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a69087bb0c92f5156a01b917b745adbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>sony1MCsA100Cfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a550af6c92fc6f0ae0e3f45830d510085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>sony1MCsA100Def</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2d1bfd828d503c587d119c31e9a63ac5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayCfg</type>
      <name>samsungPwCfg</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ace7778175e3de8b4c8bfb659a4bd6fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr ArrayDef</type>
      <name>samsungPwDef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a35b1bc7c45bb94906e1a25cb6ff851b2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printValue</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac72e915f3de1c90489744aaace1eddb7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printBitmask</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a66b6955e1440a0c72a9a0b20b750eb02</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fnumber</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7de99c06937d5d362fe7a23c7eb466ee</anchor>
      <arglist>(float apertureValue)</arglist>
    </member>
    <member kind="function">
      <type>URational</type>
      <name>exposureTime</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a22702f724f37509d0f690eb1c55a708b</anchor>
      <arglist>(float shutterSpeedValue)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printLong</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af0262ce29f58bb6ef73a72334499dbce</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printFloat</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aac98c672ae0e3f36eee77824cba2051b</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printDegrees</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1549243d106072fc6f8af62d0a4b37be</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printUcs2</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0a2a3db205807282b11a0b735737ca4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifUnit</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a480d5b006044c9d2558c189b33bca4ba</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0000</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a85af83520247babc349336ef2585ebe7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0005</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4f813b3c092bd23119fcc09468577b4a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0006</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9e8b717cdf9654528cbf302766568edf</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0007</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af93755b9a64d16971d1361145b5d22a3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0009</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2841f6212b7438cee4ce47b41fead3a7</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5b944bd62989bad256f800c1a997c412</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x000c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a30c9cbeea92ecb53a15a1e73173e6a84</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0019</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a46573df98727246f120be51f1fd5615a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x001e</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>aea2db9942e632eb8e8ef4a7322040a97</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0112</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a5f90b4bd2b255db7c26f4a7106be7ca2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x0213</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a72e024d188015a0bc3c6d3dbf349402f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8298</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a9503966b91423d0bb6a1d7b7fd462b24</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3a8dff2b93a9178e66b69ace34519acb</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x829d</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a3cfcd55a41b3c4c7fc0cfa000d6aede8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8822</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ae63349b8be43ad15b9c565cbfc03bd3a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x8827</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a1a671418b32e2d6c6a17f13f8572dc4d</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9101</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a832a7340403cbc1edb10ed7e28281784</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9201</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a587d0088ba36a9821fef0b5f43961f7a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9202</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a13d42c7c19808774dcc797e07948b8ef</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9204</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>abc26de089a85c0fff7b0f93c0a8c91b6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9206</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a03b7d5be0ced8186b0485bab3c2ea8e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9207</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af5f36366077efd4e5b4075ed4408016e</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x9208</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>adbfba091a165f12b56916b9e86e7fb18</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0x920a</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a740f086758e563dada879bdbd170e68f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa001</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f81c67c695aeb2b566a23401d35b03f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa217</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2ddba10cc3f5d31bdb2a9925ae4365e3</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa300</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a0f87440df2e6da3f1d443519ce8f52ad</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa301</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>af6a9eb4158c2c4a502c3ec2499b754e9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa401</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a75be3a1b9d634e16d8cc0f0f684e2563</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa402</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a860b0d1a851f3f5e0d6d4876419d74b2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa403</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a4cc305ada96f988fe2c40bdd76e2b48c</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa404</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a899fcd1bb10809d69227ee92aa99757a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa405</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a02abdb4141bfb8f1081d82b965ad7df9</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa406</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac3c504cc957db0023b795b9507144655</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa407</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a036f440ab36f7d70aef356d9df499ff6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa409</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a2290911707bdbbd1ab46264ace0733d6</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print0xa40c</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a33bd654d069342ac6e5deeba6296cfa2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printGPSDirRef</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a7f307649b7068ffb93015ad0632dd2b8</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printNormalSoftHard</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a6d4ba6c9d1b153f58e7fbd76c14c559a</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printExifVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a63d73c7d07334a6cd9ed8ad196e6c3f1</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpVersion</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>a807979bcb0b8df58903e77d6dcdcec7f</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printXmpDate</name>
      <anchorfile>namespaceExiv2_1_1Internal.html</anchorfile>
      <anchor>ac068f1a78b0bc4dbe6fe70d05a4aa7e2</anchor>
      <arglist>(std::ostream &amp;os, const Value &amp;value, const ExifData *)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Exiv2::Internal::Tag</name>
    <filename>namespaceExiv2_1_1Internal_1_1Tag.html</filename>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>none</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a17e6ad3bb3358f906bf837a70130abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>root</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a417152f70ffd99dfe68efd7d5d5264c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>next</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>afd82fb6baa277be5f954f3ec475b6162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>all</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>ae69c008300422213aaece8ee8c730109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>pana</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a3af7db83d7ab02130ca4c7ee7c2c1949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>fuji</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a0dda14e15a2a8a1d9878b5542d6521f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>cmt2</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a06372a1d690afab5cecf1894f39e75ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>cmt3</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>ac176edbfd063834717055c3c7021e42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>cmt4</name>
      <anchorfile>namespaceExiv2_1_1Internal_1_1Tag.html</anchorfile>
      <anchor>a2451133824f97e7f1d8beaa56541a505</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Safe</name>
    <filename>namespaceSafe.html</filename>
    <namespace>Safe::Internal</namespace>
    <member kind="function">
      <type>T</type>
      <name>add</name>
      <anchorfile>namespaceSafe.html</anchorfile>
      <anchor>a5b2f03baa7955e3c837c989fe02e3166</anchor>
      <arglist>(T summand_1, T summand_2)</arglist>
    </member>
    <member kind="function">
      <type>Internal::enable_if&lt; Internal::is_signed&lt; T &gt;::VALUE, T &gt;::type</type>
      <name>abs</name>
      <anchorfile>namespaceSafe.html</anchorfile>
      <anchor>aaa8b961c9424791b18ead21e8296b301</anchor>
      <arglist>(T num)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Safe::Internal</name>
    <filename>namespaceSafe_1_1Internal.html</filename>
    <class kind="struct">Safe::Internal::enable_if</class>
    <class kind="struct">Safe::Internal::enable_if&lt; true, T &gt;</class>
    <class kind="struct">Safe::Internal::is_signed</class>
  </compound>
  <compound kind="namespace">
    <name>Util</name>
    <filename>namespaceUtil.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>dirname</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a2d5eb823f2910e392a04c146c54f9543</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>basename</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a0ec92119bdb7f1269693f1ee94d360ea</anchor>
      <arglist>(const std::string &amp;path, bool delsuffix=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>suffix</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aa61f770944bfdb930ec8241c529887b8</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strtol</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>ae3760f32ad9aaad800e68917578c7220</anchor>
      <arglist>(const char *nptr, long &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>aac2efa1797a1bd038485be421ca80ca3</anchor>
      <arglist>(std::string &amp;text, const std::string &amp;searchText, const std::string &amp;replaceText)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startsWith</name>
      <anchorfile>namespaceUtil.html</anchorfile>
      <anchor>a5f7dc7e169d3d8c3d403206cd2969580</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;start)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Image metadata library and tools v</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Exiv2 Overview">overview</docanchor>
    <docanchor file="index.html" title="Getting started">getting-started</docanchor>
    <docanchor file="index.html" title="Metadata reference tables">metadata</docanchor>
    <docanchor file="index.html" title="File Formats">formats</docanchor>
    <docanchor file="index.html" title="Support">supp</docanchor>
    <docanchor file="index.html" title="License">license</docanchor>
  </compound>
</tagfile>
